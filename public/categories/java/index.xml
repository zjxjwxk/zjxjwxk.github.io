<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on Xinkang&#39;s Blog</title>
    <link>http://localhost:1313/categories/java/</link>
    <description>Recent content in Java on Xinkang&#39;s Blog</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Jul 2020 11:01:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自己编译OpenJDK 8</title>
      <link>http://localhost:1313/posts/java/jvm/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91openjdk-8/</link>
      <pubDate>Thu, 16 Jul 2020 11:01:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/jvm/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91openjdk-8/</guid>
      <description>&lt;p&gt;想要一探 JDK 内部的实现机制，最便捷的捷径之一就是自己编译一套 JDK，通过阅读和跟踪调试 JDK 源码去了解 Java 技术体系的原理。本人选择了 OpenJDK 进行编译。&lt;/p&gt;
&lt;p&gt;由于在编译 OpenJDK 7 时出现了如下不知如何解决的问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;llvm-gcc -m64   -m64  -L&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;  -framework CoreFoundation  -o gamma launcher/java_md.o launcher/java.o launcher/jli_util.o launcher/wildcard.o -ljvm -lm -pthread
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Undefined symbols &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture x86_64:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_JNI_CreateJavaVM&amp;#34;&lt;/span&gt;, referenced from:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      _LoadJavaVM in java_md.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_JNI_GetDefaultJavaVMInitArgs&amp;#34;&lt;/span&gt;, referenced from:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      _LoadJavaVM in java_md.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ld: symbol&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; not found &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clang: error: linker command failed with exit code &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use -v to see invocation&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;gamma&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;the_vm&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;product&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;generic_build2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;product&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;all_product_universal&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;universal_product&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;hotspot-build&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;build_product_image&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;个人猜想是由于我 Mac OS 系统版本太高的问题（Catalina 10.15.5），XCode 版本也是最新的 11.6。&lt;/p&gt;</description>
    </item>
    <item>
      <title>J2EE基础知识</title>
      <link>http://localhost:1313/posts/java/j2ee/</link>
      <pubDate>Fri, 04 Jan 2019 12:54:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/j2ee/</guid>
      <description>&lt;h2 id=&#34;servlet总结&#34;&gt;Servlet总结&lt;/h2&gt;
&lt;p&gt;在Java Web程序中，&lt;strong&gt;Servlet&lt;/strong&gt;主要负责接收用户请求&lt;strong&gt;HttpServletRequest&lt;/strong&gt;,在&lt;strong&gt;doGet()&lt;/strong&gt;,&lt;strong&gt;doPost()中做相应的处理，并将回应HttpServletResponse&lt;/strong&gt;反馈给用户。Servlet可以设置初始化参数，供Servlet内部使用。一个Servlet类只会有一个实例，在它初始化时调用&lt;strong&gt;init()方法&lt;/strong&gt;，销毁时调用&lt;strong&gt;destroy()方法&lt;/strong&gt;。&lt;strong&gt;Servlet需要在web.xml中配置&lt;/strong&gt;（MyEclipse中创建Servlet会自动配置），&lt;strong&gt;一个Servlet可以设置多个URL访问&lt;/strong&gt;。&lt;strong&gt;Servlet不是线程安全&lt;/strong&gt;，因此要谨慎使用类变量。&lt;/p&gt;
&lt;h2 id=&#34;阐述servlet和cgi的区别&#34;&gt;阐述Servlet和CGI的区别?&lt;/h2&gt;
&lt;h3 id=&#34;cgi的不足之处&#34;&gt;CGI的不足之处:&lt;/h3&gt;
&lt;p&gt;1，需要为每个请求启动一个操作CGI程序的系统进程。如果请求频繁，这将会带来很大的开销。&lt;/p&gt;
&lt;p&gt;2，需要为每个请求加载和运行一个CGI程序，这将带来很大的开销&lt;/p&gt;
&lt;p&gt;3，需要重复编写处理网络协议的代码以及编码，这些工作都是非常耗时的。&lt;/p&gt;
&lt;h3 id=&#34;servlet的优点&#34;&gt;Servlet的优点:&lt;/h3&gt;
&lt;p&gt;1，只需要启动一个操作系统进程以及加载一个JVM，大大降低了系统的开销&lt;/p&gt;
&lt;p&gt;2，如果多个请求需要做同样处理的时候，这时候只需要加载一个类，这也大大降低了开销&lt;/p&gt;
&lt;p&gt;3，所有动态加载的类可以实现对网络协议以及请求解码的共享，大大降低了工作量。&lt;/p&gt;
&lt;p&gt;4，Servlet能直接和Web服务器交互，而普通的CGI程序不能。Servlet还能在各个程序之间共享数据，使数据库连接池之类的功能很容易实现。&lt;/p&gt;
&lt;p&gt;补充：Sun Microsystems公司在1996年发布Servlet技术就是为了和CGI进行竞争，Servlet是一个特殊的Java程序，一个基于Java的Web应用通常包含一个或多个Servlet类。Servlet不能够自行创建并执行，它是在Servlet容器中运行的，容器将用户的请求传递给Servlet程序，并将Servlet的响应回传给用户。通常一个Servlet会关联一个或多个JSP页面。以前CGI经常因为性能开销上的问题被诟病，然而Fast CGI早就已经解决了CGI效率上的问题，所以面试的时候大可不必信口开河的诟病CGI，事实上有很多你熟悉的网站都使用了CGI技术。&lt;/p&gt;
&lt;p&gt;参考：《javaweb整合开发王者归来》P7&lt;/p&gt;
&lt;h2 id=&#34;servlet接口中有哪些方法及servlet生命周期探秘&#34;&gt;Servlet接口中有哪些方法及Servlet生命周期探秘&lt;/h2&gt;
&lt;p&gt;Servlet接口定义了5个方法，其中&lt;strong&gt;前三个方法与Servlet生命周期相关&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;void init(ServletConfig config) throws ServletException&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;void destory()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;java.lang.String getServletInfo()&lt;/li&gt;
&lt;li&gt;ServletConfig getServletConfig()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;生命周期：&lt;/strong&gt; &lt;strong&gt;Web容器加载Servlet并将其实例化后，Servlet生命周期开始&lt;/strong&gt;，容器运行其&lt;strong&gt;init()方法&lt;/strong&gt;进行Servlet的初始化；请求到达时调用Servlet的&lt;strong&gt;service()方法&lt;/strong&gt;，service()方法会根据需要调用与请求对应的&lt;strong&gt;doGet或doPost&lt;/strong&gt;等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的&lt;strong&gt;destroy()方法&lt;/strong&gt;。&lt;strong&gt;init方法和destory方法只会执行一次，service方法客户端每次请求Servlet都会执行&lt;/strong&gt;。Servlet中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入init方法中，销毁资源的代码放入destroy方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。&lt;/p&gt;
&lt;p&gt;参考：《javaweb整合开发王者归来》P81&lt;/p&gt;
&lt;h2 id=&#34;get和post请求的区别&#34;&gt;get和post请求的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;网上也有文章说：get和post请求实际上是没有区别，大家可以自行查询相关文章！我下面给出的只是一种常见的答案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;①get请求用来从服务器上获得资源，而post是用来向服务器提交数据；&lt;/p&gt;
&lt;p&gt;②get将表单中数据按照name=value的形式，添加到action 所指向的URL 后面，并且两者使用&amp;quot;?&amp;ldquo;连接，而各个变量之间使用&amp;rdquo;&amp;amp;&amp;ldquo;连接；post是将表单中的数据放在HTTP协议的请求头或消息体中，传递到action所指向URL；&lt;/p&gt;
&lt;p&gt;③get传输的数据要受到URL长度限制（1024字节即256个字符）；而post可以传输大量的数据，上传文件通常要使用post方式；&lt;/p&gt;
&lt;p&gt;④使用get时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用get；对于敏感数据还是应用使用post；&lt;/p&gt;
&lt;p&gt;⑤get使用MIME类型application/x-www-form-urlencoded的URL编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是&amp;rdquo;%20&amp;quot;。&lt;/p&gt;
&lt;p&gt;补充：GET方式提交表单的典型应用是搜索引擎。GET方式就是被设计为查询用的。&lt;/p&gt;
&lt;p&gt;还有另外一种回答。推荐大家看一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/28586791&#34;&gt;https://www.zhihu.com/question/28586791&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;amp;mid=100000054&amp;amp;idx=1&amp;amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd&#34;&gt;https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;amp;mid=100000054&amp;amp;idx=1&amp;amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么情况下调用doget和dopost&#34;&gt;什么情况下调用doGet()和doPost()&lt;/h2&gt;
&lt;p&gt;Form标签里的method的属性为get时调用doGet()，为post时调用doPost()。&lt;/p&gt;
&lt;h2 id=&#34;转发forward和重定向redirect的区别&#34;&gt;转发(Forward)和重定向(Redirect)的区别&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;转发是服务器行为，重定向是客户端行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转发（Forword）&lt;/strong&gt; 通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到login_success.jsp页面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;     request.getRequestDispatcher(&amp;#34;login_success.jsp&amp;#34;).forward(request, response);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;重定向（Redirect）&lt;/strong&gt; 是利用服务器返回的状态吗来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过HttpServletRequestResponse的setStatus(int status)方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;从地址栏显示来说&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址. redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java基础知识</title>
      <link>http://localhost:1313/posts/java/java%E6%A0%B8%E5%BF%83/</link>
      <pubDate>Thu, 03 Jan 2019 22:44:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/java%E6%A0%B8%E5%BF%83/</guid>
      <description>&lt;h2 id=&#34;1-面向对象和面向过程的区别&#34;&gt;1. 面向对象和面向过程的区别&lt;/h2&gt;
&lt;h3 id=&#34;面向过程&#34;&gt;面向过程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt; 性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发，性能是最重要的因素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 没有面向对象易维护、易复用、易扩展&lt;/p&gt;
&lt;h3 id=&#34;面向对象&#34;&gt;面向对象&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt; 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 性能比面向过程低&lt;/p&gt;
&lt;h2 id=&#34;2-java-语言有哪些特点&#34;&gt;2. Java 语言有哪些特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;简单易学；&lt;/li&gt;
&lt;li&gt;面向对象（封装，继承，多态）；&lt;/li&gt;
&lt;li&gt;平台无关性（ Java 虚拟机实现平台无关性）；&lt;/li&gt;
&lt;li&gt;可靠性；&lt;/li&gt;
&lt;li&gt;安全性；&lt;/li&gt;
&lt;li&gt;支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；&lt;/li&gt;
&lt;li&gt;支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；&lt;/li&gt;
&lt;li&gt;编译与解释并存；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-什么是-jdk-什么是-jre-什么是-jvm-三者之间的联系与区别&#34;&gt;3. 什么是 JDK 什么是 JRE 什么是 JVM 三者之间的联系与区别&lt;/h2&gt;
&lt;p&gt;这几个是Java中很基本很基本的东西，但是我相信一定还有很多人搞不清楚！为什么呢？因为我们大多数时候在使用现成的编译工具以及环境的时候，并没有去考虑这些东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JDK:&lt;/strong&gt; JDK（Java Development Kit）顾名思义它是给开发者提供的开发工具箱,是给程序开发者用的。它除了包括完整的JRE（Java Runtime Environment），Java运行环境，还包含了其他供开发者使用的工具包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JRE:&lt;/strong&gt; 普通用户而只需要安装 JRE（Java Runtime Environment）来运行 Java 程序。而程序开发者必须安装JDK来编译、调试程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVM：&lt;/strong&gt; 当我们运行一个程序时，JVM 负责将字节码转换为特定机器代码，JVM 提供了内存管理/垃圾回收和安全机制等。这种独立于硬件和操作系统，正是 java 程序可以一次编写多处执行的原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别与联系：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JDK 用于开发，JRE 用于运行java程序 ；&lt;/li&gt;
&lt;li&gt;JDK 和 JRE 中都包含 JVM ；&lt;/li&gt;
&lt;li&gt;JVM 是 java 编程语言的核心并且具有平台独立性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-什么是字节码-采用字节码的最大好处是什么&#34;&gt;4. 什么是字节码 采用字节码的最大好处是什么&lt;/h2&gt;
&lt;h3 id=&#34;先看下-java-中的编译器和解释器&#34;&gt;先看下 java 中的编译器和解释器： 　　&lt;/h3&gt;
&lt;p&gt;Java 中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟的机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
