<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop 基础篇</title>
      <link href="/2020/05/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2020/05/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><ol><li>大数据技术的相关概念</li><li>Hadoop 的架构和运行机制</li><li>实战：Hadoop 的安装和配置</li><li>实战：Hadoop 的开发</li></ol><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>掌握大数据存储与处理技术的原理（理论知识）</li><li>掌握 Hadoop 的使用和开发能力（实践能力）</li><li>结合书本，如《Hadoop 权威指南》</li></ul><h1 id="Hadoop-的前世今生"><a href="#Hadoop-的前世今生" class="headerlink" title="Hadoop 的前世今生"></a>Hadoop 的前世今生</h1><p>为了解决系统存在的瓶颈：存储容量、读写速率、计算效率… Google 提出了大数据技术：MapReduce、BigTable、GFS，这三样技术取得了革命性的变化：</p><ol><li>成本降低，能用 PC 机，就不用大型机和高端存储</li><li>软件容错硬件故障视为常态，通过软件保证可靠性</li><li>简化并行分布式计算，无须控制节点同步和数据交换</li></ol><p>但是，Google 只发表了相关的技术论文，没有开放源代码。于是，一个模仿 Google 大数据技术的开源实现出现了：Hadoop。</p><h1 id="Hadoop-的功能和优势"><a href="#Hadoop-的功能和优势" class="headerlink" title="Hadoop 的功能和优势"></a>Hadoop 的功能和优势</h1><p>Hadoop 是开源的分布式存储和分布式计算框架。</p><h2 id="Hadoop-的组成"><a href="#Hadoop-的组成" class="headerlink" title="Hadoop 的组成"></a>Hadoop 的组成</h2><p>包含两个核心组件：</p><ol><li>HDFS：分布式文件系统，存储海量的数据</li><li>MapReduce：并行处理框架，实现任务分解和调度</li></ol><p>Hadoop 可以用来搭建大型数据仓库，PB 级数据的存储、处理、分析、统计等业务。如：搜索引擎、日志分析、商业智能、数据挖掘。</p><h2 id="Hadoop-的优势"><a href="#Hadoop-的优势" class="headerlink" title="Hadoop 的优势"></a>Hadoop 的优势</h2><ol><li>高扩展</li><li>低成本</li><li>成熟的生态圈（Hive、HBase 等）</li></ol><h1 id="Hadoop-生态系统及版本"><a href="#Hadoop-生态系统及版本" class="headerlink" title="Hadoop 生态系统及版本"></a>Hadoop 生态系统及版本</h1><h2 id="Hadoop-生态系统"><a href="#Hadoop-生态系统" class="headerlink" title="Hadoop 生态系统"></a>Hadoop 生态系统</h2><ul><li><p>Hive：只需要编写 SQL 语句，Hive 就能够将其转化为一个 Hadoop 任务去执行，降低了使用 Hadoop 的门槛。</p></li><li><p>HBase：和传统的关系型数据库不同，HBase 放弃事务特性，追求更高的扩展；和 HDFS 不同，HBase 提供数据的随机读写和实时访问，实现对表数据的读写功能。</p></li><li>ZooKeeper：用于监控 Hadoop 集群的状态，管理一些配置，维护数据间节点的一致性等。</li></ul><h2 id="Hadoop-版本"><a href="#Hadoop-版本" class="headerlink" title="Hadoop 版本"></a>Hadoop 版本</h2><p>ver1.x较为稳定且容易上手，本人将选择 ver1.x。</p><h1 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h1><ul><li>准备 Linux 环境</li><li>安装 JDK</li><li>配置 Hadoop</li></ul><h2 id="下载-Hadoop"><a href="#下载-Hadoop" class="headerlink" title="下载 Hadoop"></a>下载 Hadoop</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://archive.apache.org/dist/hadoop/core/hadoop-1.2.1/hadoop-1.2.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并解压之。</p><h2 id="配置-Hadoop"><a href="#配置-Hadoop" class="headerlink" title="配置 Hadoop"></a>配置 Hadoop</h2><p>在 conf 目录下找到 hadoop-env.sh 脚本，编辑之，将 JAVA_HOME 的注释去掉并配置为 Java 目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置 core.site.xml 添加如下配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Hadoop 的临时工作目录 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Hadoop 的元数据目录 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/hadoop/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文件系统 namenode 的访问地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://localhost:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 hdfs-site.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- dfs 文件块的存放目录，文件系统的数据目录 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/hadoop/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 mapred-site.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- MapReduce 的 job tracker 访问地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>localhost:9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 Hadoop 环境变量，编辑 /etc/profile，添加以下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/Library/hadoop-1.2.1<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HADOOP_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动-Hadoop"><a href="#启动-Hadoop" class="headerlink" title="启动 Hadoop"></a>启动 Hadoop</h2><p>对 NameNode 进行格式化操作：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 Hadoop，执行 bin/start-all.sh ，使用 jps 命令查看是否有以下进程，若有则表示 Hadoop 已正常运行：</p><pre class="line-numbers language-bash"><code class="language-bash">10690 NameNode10773 DataNode10920 JobTracker10859 SecondaryNameNode11003 TaskTracker11101 Jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以查看 Hadoop 下有哪些文件：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -ls /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Hadoop-的核心——HDFS简介"><a href="#Hadoop-的核心——HDFS简介" class="headerlink" title="Hadoop 的核心——HDFS简介"></a>Hadoop 的核心——HDFS简介</h1><h2 id="HDFS-设计架构"><a href="#HDFS-设计架构" class="headerlink" title="HDFS 设计架构"></a>HDFS 设计架构</h2><ul><li>块（Block）</li><li>NameNode</li><li>DataNode</li></ul><h3 id="块（Block）"><a href="#块（Block）" class="headerlink" title="块（Block）"></a>块（Block）</h3><p>HDFS 的文件被分成块进行存储，块的默认大小为 64MB，块是文件存储处理的逻辑单元。</p><h3 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h3><p>HDFS 中有两类节点 NameNode 和 DataNode：</p><h4 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h4><p>NameNode 是管理节点，存放文件元数据：</p><ol><li>文件与数据块的映射表</li><li>数据块与数据节点的映射表</li></ol><h4 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h4><p>DateNode 是 HDFS 的工作节点，存放数据块：</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507142142615.png" alt="HDFS 设计架构"></p><h2 id="数据管理策略"><a href="#数据管理策略" class="headerlink" title="数据管理策略"></a>数据管理策略</h2><h3 id="冗余数据块"><a href="#冗余数据块" class="headerlink" title="冗余数据块"></a>冗余数据块</h3><p>每个数据块 3 个副本，分布在两个机架内的三个节点，存储冗余数据是为了预防数据丢失。</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507142935890.png" alt="数据管理策略"></p><h3 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h3><p>每隔一段时间，DataNode 就像 NameNode 发送自己的状态：</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507143153831.png" alt="心跳检测"></p><h3 id="二级-NameNode"><a href="#二级-NameNode" class="headerlink" title="二级 NameNode"></a>二级 NameNode</h3><p>二级 NameNode 定期同步元数据映像文件和修改日志，NameNode 发生故障时，备胎转正，以保证 NameNode 的高可用性。</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507143448919.png" alt="Secondary NameNode"></p><h2 id="HDFS-中文件的读写操作"><a href="#HDFS-中文件的读写操作" class="headerlink" title="HDFS 中文件的读写操作"></a>HDFS 中文件的读写操作</h2><h3 id="HDFS-读取文件的流程"><a href="#HDFS-读取文件的流程" class="headerlink" title="HDFS 读取文件的流程"></a>HDFS 读取文件的流程</h3><ol><li>客户端（Java 程序或命令行）向 NameNode 发起文件读取请求，把文件名和路径告诉 NameNode</li><li>NameNode 查询元数据，并返回给客户端，客户端就知道了这个文件包含哪些块，以及这些块分别能在哪些 DataNode 里找到</li><li>然后，客户端就能从这些 DataNode 找到这些块，并读取下载，再对它们进行组装</li></ol><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507144702645.png" alt="HDFS读取文件"></p><h3 id="HDFS-写入文件的流程"><a href="#HDFS-写入文件的流程" class="headerlink" title="HDFS 写入文件的流程"></a>HDFS 写入文件的流程</h3><ol><li>客户端将需要写的文件拆分成块，并通知 NameNode</li><li>NameNode 会找到当前可用的磁盘空间中的 DataNodes，并返回给客户端</li><li>根据返回的 DataNodes，客户端将这些块写入 DataNodes</li><li>客户端在向 DataNode 写入一个块后，DataNode 就要通过管道进行流水线复制</li><li>复制完之后，就对 NameNode 更新元数据</li></ol><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507145230830.png" alt="HDFS写入文件"></p><h2 id="HDFS-的特点"><a href="#HDFS-的特点" class="headerlink" title="HDFS 的特点"></a>HDFS 的特点</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>数据冗余，硬件容错</li><li>流式的数据访问（写一次，读多次）</li><li>存储大文件</li></ul><h3 id="适用性和局限性"><a href="#适用性和局限性" class="headerlink" title="适用性和局限性"></a>适用性和局限性</h3><ul><li>适合数据批量读写，吞度量高（但不适合交互式应用，低延迟很难满足）</li><li>适合一次写入多次读取，顺序读写（但不支持多用户并发写相同文件）</li></ul><h2 id="HDFS-的使用"><a href="#HDFS-的使用" class="headerlink" title="HDFS 的使用"></a>HDFS 的使用</h2><h3 id="格式化-NameNode"><a href="#格式化-NameNode" class="headerlink" title="格式化 NameNode"></a>格式化 NameNode</h3><p>先对 NameNode 进行格式化操作：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>在 HDFS 中创建一个文件夹 input：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -mkdir input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>input 文件夹将会在 HDFS 中的 /user/root/ 下</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:~ root<span class="token comment" spellcheck="true"># hadoop fs -ls /user/root/input</span>Found 1 items-rw-r--r--   3 root supergroup          0 2020-05-07 15:26 /user/root/input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>将本地 test.txt 文件上传到 HDFS 中刚刚创建的 input 中：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -put test.txt input/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就能在 /user/root/input/ 下找到该文件了</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:~ root<span class="token comment" spellcheck="true"># hadoop fs -ls /user/root/input</span>Found 1 items-rw-r--r--   3 root supergroup         14 2020-05-07 16:00 /user/root/input/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>输出 HDFS 中的文件：</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:~ root<span class="token comment" spellcheck="true"># hadoop fs -cat input/test.txt</span>Hello Hadoop<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>从 HDFS 下载指定路径下的文件到本地：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -get input/test.txt test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可在本地找到该文件：</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:~ root<span class="token comment" spellcheck="true"># cat test2.txt </span>Hello Hadoop<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看-NameNode-信息"><a href="#查看-NameNode-信息" class="headerlink" title="查看 NameNode 信息"></a>查看 NameNode 信息</h4><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:~ root<span class="token comment" spellcheck="true"># hadoop dfsadmin -report</span>Configured Capacity: 249531727872 <span class="token punctuation">(</span>232.39 GB<span class="token punctuation">)</span>Present Capacity: 83015577640 <span class="token punctuation">(</span>77.31 GB<span class="token punctuation">)</span>DFS Remaining: 83015569408 <span class="token punctuation">(</span>77.31 GB<span class="token punctuation">)</span>DFS Used: 8232 <span class="token punctuation">(</span>8.04 KB<span class="token punctuation">)</span>DFS Used%: 0%Under replicated blocks: 2Blocks with corrupt replicas: 0Missing blocks: 0-------------------------------------------------Datanodes available: 1 <span class="token punctuation">(</span>1 total, 0 dead<span class="token punctuation">)</span>Name: 127.0.0.1:50010Decommission Status <span class="token keyword">:</span> NormalConfigured Capacity: 249531727872 <span class="token punctuation">(</span>232.39 GB<span class="token punctuation">)</span>DFS Used: 8232 <span class="token punctuation">(</span>8.04 KB<span class="token punctuation">)</span>Non DFS Used: 166516150232 <span class="token punctuation">(</span>155.08 GB<span class="token punctuation">)</span>DFS Remaining: 83015569408<span class="token punctuation">(</span>77.31 GB<span class="token punctuation">)</span>DFS Used%: 0%DFS Remaining%: 33.27%Last contact: Thu May 07 16:09:02 CST 2020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Hadoop-的核心——MapReduce-原理与实现"><a href="#Hadoop-的核心——MapReduce-原理与实现" class="headerlink" title="Hadoop 的核心——MapReduce 原理与实现"></a>Hadoop 的核心——MapReduce 原理与实现</h1><h2 id="MapReduce-原理"><a href="#MapReduce-原理" class="headerlink" title="MapReduce 原理"></a>MapReduce 原理</h2><p>分而治之，一个大任务分成多个小的子任务（map），并行执行后，合并结果（reduce）。</p><p>假如有 100 副扑克牌混在了一起，其中少了一张，怎么找出缺少的那一张？</p><ul><li>Map：随机分为 100 副扑克牌，各自统计该副牌总每张牌的出现次数。</li><li>Reduce：通过交换每副牌各自统计的结果，再次统计总的每张牌出现次数。一个 Reduce 统计一张牌的总出现次数。</li></ul><p>最后对每张牌的总出现次数进行排序，筛选出结果。</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507162434845.png" alt="MapReduce过程"></p><p>再如：100 GB 的网站访问日志文件，找出访问次数最多的 IP 地址；SELECT 表查询操作、JOIN 表连接操作，都可以通过 MapReduce 来实现。</p><h2 id="MapReduce-的运行流程"><a href="#MapReduce-的运行流程" class="headerlink" title="MapReduce 的运行流程"></a>MapReduce 的运行流程</h2><ul><li>Job &amp; Task</li><li>JobTracker</li><li>TaskTracker</li></ul><h3 id="Job-amp-Task"><a href="#Job-amp-Task" class="headerlink" title="Job &amp; Task"></a>Job &amp; Task</h3><p>一个 Job 拆分为多个 Task 来解决，Task 又分为 MapTask 和 ReduceTask。</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200507163935796.png" alt="JobTracker和TaskTracker"></p><h3 id="JobTracker"><a href="#JobTracker" class="headerlink" title="JobTracker"></a>JobTracker</h3><ul><li>作业调度</li><li>分配任务、监控任务执行进度</li><li>监控 TaskTracker 的状态</li></ul><h3 id="TaskTracker"><a href="#TaskTracker" class="headerlink" title="TaskTracker"></a>TaskTracker</h3><ul><li>执行任务</li><li>汇报任务状态</li></ul><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200508095635229.png" alt="MapReduce作业执行过程"></p><h2 id="MapReduce-的容错机制"><a href="#MapReduce-的容错机制" class="headerlink" title="MapReduce 的容错机制"></a>MapReduce 的容错机制</h2><h3 id="重复执行"><a href="#重复执行" class="headerlink" title="重复执行"></a>重复执行</h3><p>重复执行将会最多重复执行四次任务，若仍然失败则放弃执行。</p><h3 id="推测执行"><a href="#推测执行" class="headerlink" title="推测执行"></a>推测执行</h3><p>当 JobTracker 发现其中某个 TaskTracker 执行特别慢的时候，就会另开一个 TaskTracker 执行该任务，这两个 Task 谁先执行完，则终止另一个。</p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200508095746307.png" alt="推测执行"></p><h1 id="开发-Hadoop-应用程序"><a href="#开发-Hadoop-应用程序" class="headerlink" title="开发 Hadoop 应用程序"></a>开发 Hadoop 应用程序</h1><h2 id="WordCount-单词计数"><a href="#WordCount-单词计数" class="headerlink" title="WordCount 单词计数"></a>WordCount 单词计数</h2><p>WordCount 单次计数：计算文件中出现每个单词的频数，输出结果按照字母顺序进行排序。</p><h3 id="MapReduce-过程"><a href="#MapReduce-过程" class="headerlink" title="MapReduce 过程"></a>MapReduce 过程</h3><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200508100649309.png" alt="Map过程"></p><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200508100706460.png" alt="Reduce过程"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zjut<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>LongWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>TextInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>TextOutputFormat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author zjxjwxk */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WordCountMap</span> <span class="token keyword">extends</span>            <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> IntWritable one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Text word <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>                <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            String line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringTokenizer token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                word<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> one<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WordCountReduce</span> <span class="token keyword">extends</span>            <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span>                           Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>IntWritable val <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> val<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Job job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Job</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>WordCount<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setJobName</span><span class="token punctuation">(</span><span class="token string">"wordcount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>WordCountMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>WordCountReduce<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span>TextInputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputFormatClass</span><span class="token punctuation">(</span>TextOutputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译和打包"><a href="#编译和打包" class="headerlink" title="编译和打包"></a>编译和打包</h3><p>编译（添加 classpath 依赖包）：</p><pre class="line-numbers language-bash"><code class="language-bash">javac -classpath /Library/hadoop-1.2.1/hadoop-core-1.2.1.jar:/Library/hadoop-1.2.1/lib/commons-cli-1.2.jar -d WordCountClass/ WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打包所有 class 文件为 jar 包：</p><pre><code>jar -cvf WordCount.jar *.class</code></pre><h3 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h3><p>创建一个 input 文件夹，在里面添加两个文本文件：</p><p>Hello.txt</p><pre class="line-numbers language-txt"><code class="language-txt">Hello WorldHello HadoopHello HDFSHello MapHello Reduce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hello2.txt</p><pre class="line-numbers language-txt"><code class="language-txt">Hadoop WorldHadoop NameNodeHadoop DataNodeHadoop MapReduceHello BigData<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传文件-1"><a href="#上传文件-1" class="headerlink" title="上传文件"></a>上传文件</h3><p>在 HDFS 中创建一个 input_wordcount 文件夹：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -mkdir input_wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将两个文本文件上传到 HDFS：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -put input/* input_wordcount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以在 HDFS 中找到这两个文件：</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:Project root<span class="token comment" spellcheck="true"># hadoop fs -ls input_wordcount</span>Found 2 items-rw-r--r--   3 root supergroup         59 2020-05-08 13:51 /user/root/input_wordcount/Hello.txt-rw-r--r--   3 root supergroup         76 2020-05-08 13:51 /user/root/input_wordcount/Hello2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行-MapReduce"><a href="#执行-MapReduce" class="headerlink" title="执行 MapReduce"></a>执行 MapReduce</h3><pre class="line-numbers language-bash"><code class="language-bash">hadoop jar Hadoop/WordCount/WordCountClass/WordCount.jar WordCount input_wordcount output_wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hadoop 中执行本地 jar 包，最后有两个参数 <code>input_wordcount</code>,  <code>output_wordcount</code>，分别为输入路径和输出路径。</p><p>执行过程和结果：</p><pre class="line-numbers language-bash"><code class="language-bash">20/05/08 13:59:11 WARN mapred.JobClient: Use GenericOptionsParser <span class="token keyword">for</span> parsing the arguments. Applications should implement Tool <span class="token keyword">for</span> the same.20/05/08 13:59:11 INFO input.FileInputFormat: Total input paths to process <span class="token keyword">:</span> 220/05/08 13:59:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="token keyword">for</span> your platform<span class="token punctuation">..</span>. using builtin-java classes where applicable20/05/08 13:59:11 WARN snappy.LoadSnappy: Snappy native library not loaded20/05/08 13:59:11 INFO mapred.JobClient: Running job: job_202005081303_000120/05/08 13:59:12 INFO mapred.JobClient:  map 0% reduce 0%20/05/08 13:59:15 INFO mapred.JobClient:  map 100% reduce 0%20/05/08 13:59:22 INFO mapred.JobClient:  map 100% reduce 33%20/05/08 13:59:23 INFO mapred.JobClient:  map 100% reduce 100%20/05/08 13:59:24 INFO mapred.JobClient: Job complete: job_202005081303_000120/05/08 13:59:24 INFO mapred.JobClient: Counters: 2620/05/08 13:59:24 INFO mapred.JobClient:   Map-Reduce Framework20/05/08 13:59:24 INFO mapred.JobClient:     Spilled Records<span class="token operator">=</span>4020/05/08 13:59:24 INFO mapred.JobClient:     Map output materialized bytes<span class="token operator">=</span>26720/05/08 13:59:24 INFO mapred.JobClient:     Reduce input records<span class="token operator">=</span>2020/05/08 13:59:24 INFO mapred.JobClient:     Map input records<span class="token operator">=</span>1020/05/08 13:59:24 INFO mapred.JobClient:     SPLIT_RAW_BYTES<span class="token operator">=</span>24520/05/08 13:59:24 INFO mapred.JobClient:     Map output bytes<span class="token operator">=</span>21520/05/08 13:59:24 INFO mapred.JobClient:     Reduce shuffle bytes<span class="token operator">=</span>26720/05/08 13:59:24 INFO mapred.JobClient:     Reduce input groups<span class="token operator">=</span>1020/05/08 13:59:24 INFO mapred.JobClient:     Combine output records<span class="token operator">=</span>020/05/08 13:59:24 INFO mapred.JobClient:     Reduce output records<span class="token operator">=</span>1020/05/08 13:59:24 INFO mapred.JobClient:     Map output records<span class="token operator">=</span>2020/05/08 13:59:24 INFO mapred.JobClient:     Combine input records<span class="token operator">=</span>020/05/08 13:59:24 INFO mapred.JobClient:     Total committed heap usage <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span>57881395220/05/08 13:59:24 INFO mapred.JobClient:   File Input Format Counters 20/05/08 13:59:24 INFO mapred.JobClient:     Bytes Read<span class="token operator">=</span>13520/05/08 13:59:24 INFO mapred.JobClient:   FileSystemCounters20/05/08 13:59:24 INFO mapred.JobClient:     HDFS_BYTES_READ<span class="token operator">=</span>38020/05/08 13:59:24 INFO mapred.JobClient:     FILE_BYTES_WRITTEN<span class="token operator">=</span>15678820/05/08 13:59:24 INFO mapred.JobClient:     FILE_BYTES_READ<span class="token operator">=</span>26120/05/08 13:59:24 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN<span class="token operator">=</span>9120/05/08 13:59:24 INFO mapred.JobClient:   Job Counters 20/05/08 13:59:24 INFO mapred.JobClient:     Launched map tasks<span class="token operator">=</span>220/05/08 13:59:24 INFO mapred.JobClient:     Launched reduce tasks<span class="token operator">=</span>120/05/08 13:59:24 INFO mapred.JobClient:     SLOTS_MILLIS_REDUCES<span class="token operator">=</span>806520/05/08 13:59:24 INFO mapred.JobClient:     Total <span class="token function">time</span> spent by all reduces waiting after reserving slots <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span>020/05/08 13:59:24 INFO mapred.JobClient:     SLOTS_MILLIS_MAPS<span class="token operator">=</span>414220/05/08 13:59:24 INFO mapred.JobClient:     Total <span class="token function">time</span> spent by all maps waiting after reserving slots <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span>020/05/08 13:59:24 INFO mapred.JobClient:     Data-local map tasks<span class="token operator">=</span>220/05/08 13:59:24 INFO mapred.JobClient:   File Output Format Counters 20/05/08 13:59:24 INFO mapred.JobClient:     Bytes Written<span class="token operator">=</span>91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看执行结果"><a href="#查看执行结果" class="headerlink" title="查看执行结果"></a>查看执行结果</h3><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:Project root<span class="token comment" spellcheck="true"># hadoop fs -ls output_wordcount</span>Found 3 items-rw-r--r--   3 root supergroup          0 2020-05-08 13:59 /user/root/output_wordcount/_SUCCESSdrwxr-xr-x   - root supergroup          0 2020-05-08 13:59 /user/root/output_wordcount/_logs-rw-r--r--   3 root supergroup         91 2020-05-08 13:59 /user/root/output_wordcount/part-r-00000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，part-r-00000 就包含执行的结果，即统计了两个文件中，每个单词的总个数，并且按照字典顺序排序：</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:Project root<span class="token comment" spellcheck="true"># hadoop fs -cat output_wordcount/part-r-00000</span>BigData    1DataNode    1HDFS    1Hadoop    5Hello    6Map    1MapReduce    1NameNode    1Reduce    1World    2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用-MapReduce-进行排序"><a href="#利用-MapReduce-进行排序" class="headerlink" title="利用 MapReduce 进行排序"></a>利用 MapReduce 进行排序</h2><p>将多个文件中的数字排序。</p><h3 id="MapReduce-过程-1"><a href="#MapReduce-过程-1" class="headerlink" title="MapReduce 过程"></a>MapReduce 过程</h3><ul><li>Map：将数据分片后，将数字按照区间进行标记。</li><li>Reduce：将每个分区的数字分别进行排序，最后合并。</li></ul><p><img src="/2020/05/06/大数据/Hadoop/Hadoop基础篇/image-20200508141137261.png" alt="Reduce过程"></p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Partitioner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GenericOptionsParser<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Map</span> <span class="token keyword">extends</span>            <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> IntWritable data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>                <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            String line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Reduce</span> <span class="token keyword">extends</span>            <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>IntWritable<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> IntWritable linenum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>IntWritable key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span>                Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>IntWritable val <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>linenum<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                linenum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span>linenum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Partition</span> <span class="token keyword">extends</span> <span class="token class-name">Partitioner</span><span class="token operator">&lt;</span>IntWritable<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span>IntWritable key<span class="token punctuation">,</span> IntWritable value<span class="token punctuation">,</span>                <span class="token keyword">int</span> numPartitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> MaxNumber <span class="token operator">=</span> <span class="token number">65223</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bound <span class="token operator">=</span> MaxNumber <span class="token operator">/</span> numPartitions <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> keynumber <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numPartitions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keynumber <span class="token operator">&lt;</span> bound <span class="token operator">*</span> i <span class="token operator">&amp;&amp;</span> keynumber <span class="token operator">>=</span> bound <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> otherArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericOptionsParser</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> args<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getRemainingArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>otherArgs<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage Sort &lt;int> &lt;out>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Job job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Job</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token string">"Sort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span>Partition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>Reduce<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译和打包-1"><a href="#编译和打包-1" class="headerlink" title="编译和打包"></a>编译和打包</h3><p>编译：</p><pre class="line-numbers language-bash"><code class="language-bash">javac -classpath /Library/hadoop-1.2.1/hadoop-core-1.2.1.jar:/Library/hadoop-1.2.1/lib/commons-cli-1.2.jar -d SortClass/ Sort.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打包：</p><pre class="line-numbers language-bash"><code class="language-bash">jar -cvf Sort.jar *.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="准备文件-1"><a href="#准备文件-1" class="headerlink" title="准备文件"></a>准备文件</h3><p>Numbers.txt</p><pre class="line-numbers language-txt"><code class="language-txt">1993609456789119<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Numbers2.txt</p><pre><code>478971988125931</code></pre><h3 id="上传文件-2"><a href="#上传文件-2" class="headerlink" title="上传文件"></a>上传文件</h3><p>在 HDFS 中创建 input_sort 文件夹：</p><pre class="line-numbers language-bash"><code class="language-bash">hadoop fs -mkdir input_sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将两个文本文件上传到 HDFS：</p><pre><code>hadoop fs -put Sort/* input_sort/</code></pre><h3 id="执行-MapReduce-1"><a href="#执行-MapReduce-1" class="headerlink" title="执行 MapReduce"></a>执行 MapReduce</h3><pre><code>hadoop jar Hadoop/WordCount/WordCountClass/WordCount.jar WordCount input_wordcount output_wordcount</code></pre><p>执行过程和结果：</p><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:Project root<span class="token comment" spellcheck="true"># hadoop jar Hadoop/Sort/SortClass/Sort.jar Sort input_sort output_sort</span>20/05/08 14:58:36 INFO input.FileInputFormat: Total input paths to process <span class="token keyword">:</span> 220/05/08 14:58:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="token keyword">for</span> your platform<span class="token punctuation">..</span>. using builtin-java classes where applicable20/05/08 14:58:36 WARN snappy.LoadSnappy: Snappy native library not loaded20/05/08 14:58:36 INFO mapred.JobClient: Running job: job_202005081303_000220/05/08 14:58:37 INFO mapred.JobClient:  map 0% reduce 0%20/05/08 14:58:40 INFO mapred.JobClient:  map 100% reduce 0%20/05/08 14:58:48 INFO mapred.JobClient:  map 100% reduce 100%20/05/08 14:58:48 INFO mapred.JobClient: Job complete: job_202005081303_000220/05/08 14:58:48 INFO mapred.JobClient: Counters: 2620/05/08 14:58:48 INFO mapred.JobClient:   Map-Reduce Framework20/05/08 14:58:48 INFO mapred.JobClient:     Spilled Records<span class="token operator">=</span>2620/05/08 14:58:48 INFO mapred.JobClient:     Map output materialized bytes<span class="token operator">=</span>14220/05/08 14:58:48 INFO mapred.JobClient:     Reduce input records<span class="token operator">=</span>1320/05/08 14:58:48 INFO mapred.JobClient:     Map input records<span class="token operator">=</span>1320/05/08 14:58:48 INFO mapred.JobClient:     SPLIT_RAW_BYTES<span class="token operator">=</span>23920/05/08 14:58:48 INFO mapred.JobClient:     Map output bytes<span class="token operator">=</span>10420/05/08 14:58:48 INFO mapred.JobClient:     Reduce shuffle bytes<span class="token operator">=</span>14220/05/08 14:58:48 INFO mapred.JobClient:     Reduce input groups<span class="token operator">=</span>1220/05/08 14:58:48 INFO mapred.JobClient:     Combine output records<span class="token operator">=</span>020/05/08 14:58:48 INFO mapred.JobClient:     Reduce output records<span class="token operator">=</span>1320/05/08 14:58:48 INFO mapred.JobClient:     Map output records<span class="token operator">=</span>1320/05/08 14:58:48 INFO mapred.JobClient:     Combine input records<span class="token operator">=</span>020/05/08 14:58:48 INFO mapred.JobClient:     Total committed heap usage <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span>57881395220/05/08 14:58:48 INFO mapred.JobClient:   File Input Format Counters 20/05/08 14:58:48 INFO mapred.JobClient:     Bytes Read<span class="token operator">=</span>4420/05/08 14:58:48 INFO mapred.JobClient:   FileSystemCounters20/05/08 14:58:48 INFO mapred.JobClient:     HDFS_BYTES_READ<span class="token operator">=</span>28320/05/08 14:58:48 INFO mapred.JobClient:     FILE_BYTES_WRITTEN<span class="token operator">=</span>15617220/05/08 14:58:48 INFO mapred.JobClient:     FILE_BYTES_READ<span class="token operator">=</span>13620/05/08 14:58:48 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN<span class="token operator">=</span>7420/05/08 14:58:48 INFO mapred.JobClient:   Job Counters 20/05/08 14:58:48 INFO mapred.JobClient:     Launched map tasks<span class="token operator">=</span>220/05/08 14:58:48 INFO mapred.JobClient:     Launched reduce tasks<span class="token operator">=</span>120/05/08 14:58:48 INFO mapred.JobClient:     SLOTS_MILLIS_REDUCES<span class="token operator">=</span>798020/05/08 14:58:48 INFO mapred.JobClient:     Total <span class="token function">time</span> spent by all reduces waiting after reserving slots <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span>020/05/08 14:58:48 INFO mapred.JobClient:     SLOTS_MILLIS_MAPS<span class="token operator">=</span>390220/05/08 14:58:48 INFO mapred.JobClient:     Total <span class="token function">time</span> spent by all maps waiting after reserving slots <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span>020/05/08 14:58:48 INFO mapred.JobClient:     Data-local map tasks<span class="token operator">=</span>220/05/08 14:58:48 INFO mapred.JobClient:   File Output Format Counters 20/05/08 14:58:48 INFO mapred.JobClient:     Bytes Written<span class="token operator">=</span>74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看执行结果-1"><a href="#查看执行结果-1" class="headerlink" title="查看执行结果"></a>查看执行结果</h3><pre class="line-numbers language-bash"><code class="language-bash">MacBook-Pro-of-Wxk:Project root<span class="token comment" spellcheck="true"># hadoop fs -ls output_sort</span>Found 3 items-rw-r--r--   3 root supergroup          0 2020-05-08 14:58 /user/root/output_sort/_SUCCESSdrwxr-xr-x   - root supergroup          0 2020-05-08 14:58 /user/root/output_sort/_logs-rw-r--r--   3 root supergroup         74 2020-05-08 14:58 /user/root/output_sort/part-r-00000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，part-r-00000 就包含执行的结果，即两个文件中所有数字从小到大排序后的排名和数字。</p><pre><code>MacBook-Pro-of-Wxk:Project root# hadoop fs -cat output_sort/part-r-000001    12    33    34    95    1196    1257    1998    4569    47810    60911    78912    97113    988</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview Prepare</title>
      <link href="/2020/05/05/Private/%E5%A4%8D%E8%AF%95%E9%97%AE%E7%AD%94/"/>
      <url>/2020/05/05/Private/%E5%A4%8D%E8%AF%95%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h1 id="英文部分"><a href="#英文部分" class="headerlink" title="英文部分"></a>英文部分</h1><h2 id="自我介绍（1～2分钟）"><a href="#自我介绍（1～2分钟）" class="headerlink" title="自我介绍（1～2分钟）"></a>自我介绍（1～2分钟）</h2><p><img src="/2020/05/05/Private/复试问答/v2-d7296a912e10a648ca7609bdc6bad5cd_r.jpg" alt="自我介绍思维导图"></p><p>Good morning everyone,</p><p>Thank you for giving me this opportunity. It’s my pleasure to introduce myself. I‘m Wu Xinkang, born and raised in Taizhou, Zhejiang. Currently, I am pursuing my bachelor’s degree in Software Engineering at the Zhejiang University of Technology.</p><p>During college, I studied hard. My GPA was over 3.4, ranking in the top 30% of this major. I passed CET-6, participated in some competitions (such as e-commerce competition), and got school level scholarships for several times. I love and enjoy coding. I have done some small projects outside of class, mainly based on Java backend technologies. I learned how a complete project is developed and how team members work together in practice. I also built my own personal blog to record and share some knowledge with others.</p><p>I’m interested in distributed systems. I will try myself to be a qualified software engineer and I dream of being an architect in the future. The training system of Software College of Zhejiang University is very suitable for me.</p><p>Therefore, I desperately wish to be accepted. I‘m confident that I can match your requirements and maintain high standards when pursuing the master’s degree. Thank you!</p><h2 id="为什么考浙大？"><a href="#为什么考浙大？" class="headerlink" title="为什么考浙大？"></a>为什么考浙大？</h2><p>I was born in Zhejiang and have lived in Zhejiang since childhood. Zhejiang University is excellent and famous in China and the world. When I was in high school, I dreamed of being admitted to Zhejiang University. I remember going Zijingang Campus for the first time to participate in a chemistry competition. At that time, I was deeply impressed by the academic atmosphere of Zhejiang University. Although I didn’t get enough scores in the college entrance examination, I still wanted to stay in Zhejiang and fulfill my dream of Zhejiang University when pursuing my master’s degree.</p><h2 id="为什么要读研，读研的计划？"><a href="#为什么要读研，读研的计划？" class="headerlink" title="为什么要读研，读研的计划？"></a>为什么要读研，读研的计划？</h2><p>In the undergraduate period, I have learned some basics of computer science and software engineering, and have gained some breadth of knowledge, but I still want to master the depth of knowledge in a certain field. So I can reach a higher starting point to serve the enterprise, society, and our country better.</p><p>During my postgraduate study, I will not only study postgraduate courses hard, but also learn more about the distributed systems which I am interested in, and participate in projects and competitions actively. Through deeper learning and practice, I hope to become a qualified software engineer.</p><h2 id="介绍项目"><a href="#介绍项目" class="headerlink" title="介绍项目"></a>介绍项目</h2><h3 id="介绍项目特点"><a href="#介绍项目特点" class="headerlink" title="介绍项目特点"></a>介绍项目特点</h3><h3 id="介绍项目难点"><a href="#介绍项目难点" class="headerlink" title="介绍项目难点"></a>介绍项目难点</h3><h2 id="介绍家乡"><a href="#介绍家乡" class="headerlink" title="介绍家乡"></a>介绍家乡</h2><p>I am from Xianju, Taizhou, a beautiful and historic place located in the southeast of Zhejiang Province. It was named after the place where the gods lived. Almost 80% of Xianju is hilly. So Xianju has many beautiful landscapes, such as Shenxianju, which is a national 5A-level scenic. Agriculture and tourism are two of our most important industries.</p><h2 id="介绍家庭"><a href="#介绍家庭" class="headerlink" title="介绍家庭"></a>介绍家庭</h2><p>My father works in a bank and he knows some finance and bank management. And my mother is a math teacher in a rural elementary school. I am a single child in my family, and I have been interested in computers since I was a child, So I hope that I can contribute to the financial and educational fields of my parents through information technology in the future. They also support me a lot and respect my interests.</p><h2 id="介绍本科"><a href="#介绍本科" class="headerlink" title="介绍本科"></a>介绍本科</h2><h3 id="介绍学校"><a href="#介绍学校" class="headerlink" title="介绍学校"></a>介绍学校</h3><p>Zhejiang University of Technology is located in Hangzhou, Zhejiang, formerly known as Zhejiang Institute of Chemical Technology. So it has advantages in chemical industry. His computer science and software engineering subject assessments are both B, which is not bad. Our school has a lot of cooperation with Zhejiang University, and many of the teachers here graduated from Zhejiang University. So I think our school has a good relationship with Zhejiang University.</p><h3 id="介绍专业"><a href="#介绍专业" class="headerlink" title="介绍专业"></a>介绍专业</h3><p>My major is software engineering. We have not only studied basic courses in computer science, but also learned a lot about software engineering. This makes our knowledge not only limited to computers or programming languages, but also involves projects, architecture and management, and even team collaboration.</p><h3 id="介绍学过的课程，学的最好的计算机课程是什么？"><a href="#介绍学过的课程，学的最好的计算机课程是什么？" class="headerlink" title="介绍学过的课程，学的最好的计算机课程是什么？"></a>介绍学过的课程，学的最好的计算机课程是什么？</h3><p>We have learned some basic computer courses, including computer networks, operating systems, data structures, databases, and some programming languages, such as C ++, Java, and Python. And we also learned some courses about software engineering, such as software project management, requirements engineering, and outsourcing.</p><p>I think the best course I have learned may be data structure.</p><h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><p>I used to like playing computer games in the past, but since entering college, I think programming is much more fun than computer games. So I often enjoy coding and do some projects. When the project is deployed on the server and goes online to work normally, I will have a strong sense of accomplishment. I like reading some books about technology and learn some latest and popular technologies. I also like to play badminton with my friends. Sometimes I also like singing, I used to be one of the top ten singers in our college.</p><h1 id="中文部分"><a href="#中文部分" class="headerlink" title="中文部分"></a>中文部分</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="关键路径的求解过程？"><a href="#关键路径的求解过程？" class="headerlink" title="关键路径的求解过程？"></a>关键路径的求解过程？</h3><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="怎么找中位数以及复杂度？"><a href="#怎么找中位数以及复杂度？" class="headerlink" title="怎么找中位数以及复杂度？"></a>怎么找中位数以及复杂度？</h3><h3 id="怎么在尽可能短的时间里找出数组里是否有两个数的和相加为k？"><a href="#怎么在尽可能短的时间里找出数组里是否有两个数的和相加为k？" class="headerlink" title="怎么在尽可能短的时间里找出数组里是否有两个数的和相加为k？"></a>怎么在尽可能短的时间里找出数组里是否有两个数的和相加为k？</h3><h3 id="求行列式最好的算法时间复杂度，怎么实现？"><a href="#求行列式最好的算法时间复杂度，怎么实现？" class="headerlink" title="求行列式最好的算法时间复杂度，怎么实现？"></a>求行列式最好的算法时间复杂度，怎么实现？</h3><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h3><ul><li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li><li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="/2020/05/05/Private/复试问答/e92d0ebc-7d46-413b-aec1-34a39602f787.png" alt="TCP三次握手"></p><p>假设 A 为客户端，B 为服务器端。</p><ul><li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li><li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li><li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li><li>B 收到 A 的确认后，连接建立。</li></ul><h4 id="三次握手的原因"><a href="#三次握手的原因" class="headerlink" title="三次握手的原因"></a>三次握手的原因</h4><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="/2020/05/05/Private/复试问答/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" alt="TCP四次挥手"></p><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ul><li>A 发送连接释放报文，FIN=1。</li><li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文，FIN=1。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ul><h4 id="四次挥手的原因"><a href="#四次挥手的原因" class="headerlink" title="四次挥手的原因"></a>四次挥手的原因</h4><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程是什么，为什么要有进程？"><a href="#进程是什么，为什么要有进程？" class="headerlink" title="进程是什么，为什么要有进程？"></a>进程是什么，为什么要有进程？</h4><p>进程就是执行中的程序实例。早期的计算机系统只允许一次执行一个程序，现代计算机系统允许将多个程序调入内存并发执行，这就要求对各种程序提供更严格的控制和更好的划分。这些需求产生了进程的概念。</p><h4 id="线程和进程的区别？"><a href="#线程和进程的区别？" class="headerlink" title="线程和进程的区别？"></a>线程和进程的区别？</h4><h5 id="Ⅰ-拥有资源"><a href="#Ⅰ-拥有资源" class="headerlink" title="Ⅰ 拥有资源"></a>Ⅰ 拥有资源</h5><p>进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</p><h5 id="Ⅱ-调度"><a href="#Ⅱ-调度" class="headerlink" title="Ⅱ 调度"></a>Ⅱ 调度</h5><p>线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</p><h5 id="Ⅲ-系统开销"><a href="#Ⅲ-系统开销" class="headerlink" title="Ⅲ 系统开销"></a>Ⅲ 系统开销</h5><p>由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</p><h5 id="Ⅳ-通信方面"><a href="#Ⅳ-通信方面" class="headerlink" title="Ⅳ 通信方面"></a>Ⅳ 通信方面</h5><p>线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h4><ul><li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的。</li><li>占有和等待：已经得到了某个资源的进程可以再请求新的资源。</li><li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。</li><li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li></ul><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="虚拟内存？"><a href="#虚拟内存？" class="headerlink" title="虚拟内存？"></a>虚拟内存？</h4><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p><p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p><p>虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。</p><p><img src="/2020/05/05/Private/复试问答/7b281b1e-0595-402b-ae35-8c91084c33c1.png" alt="虚拟内存"></p><h4 id="为什么设置页表？页表中存放的是什么？"><a href="#为什么设置页表？页表中存放的是什么？" class="headerlink" title="为什么设置页表？页表中存放的是什么？"></a>为什么设置页表？页表中存放的是什么？</h4><p>页表在分页内存管理中，用于将逻辑地址转化为物理地址。</p><p>页表（Page table）是存储着页（程序地址空间）和页框（物理内存空间）的映射表。页表包含每页所在物理内存的基地址。</p><p><img src="/2020/05/05/Private/复试问答/cf4386a1-58c9-4eca-a17f-e12b1e9770eb.png" alt="页表"></p><h4 id="虚地址和实地址有什么区别？在程序中计算机用的是虚地址还是实地址？"><a href="#虚地址和实地址有什么区别？在程序中计算机用的是虚地址还是实地址？" class="headerlink" title="虚地址和实地址有什么区别？在程序中计算机用的是虚地址还是实地址？"></a>虚地址和实地址有什么区别？在程序中计算机用的是虚地址还是实地址？</h4><p>物理内存和虚拟内存之间的主要区别在于，物理内存是指与系统的主板相连的实际RAM，但是虚拟内存是一种内存管理技术，可让用户执行比实际物理内存更大的程序。</p><p>虚拟地址或逻辑地址是CPU在执行过程中生成的地址，而物理地址是指存储单元中的地址。</p><p>程序中使用的是虚拟地址或逻辑地址。</p><h3 id="Cache是啥，分别解释三种映射方式？"><a href="#Cache是啥，分别解释三种映射方式？" class="headerlink" title="Cache是啥，分别解释三种映射方式？"></a>Cache是啥，分别解释三种映射方式？</h3><h3 id="Cache块大小对命中率的影响？"><a href="#Cache块大小对命中率的影响？" class="headerlink" title="Cache块大小对命中率的影响？"></a>Cache块大小对命中率的影响？</h3><h3 id="操作系统中断过程"><a href="#操作系统中断过程" class="headerlink" title="操作系统中断过程"></a>操作系统中断过程</h3><h3 id="键盘输入是怎么实现的？（IO中断）除了中断，CPU还有什么控制IO的方式？"><a href="#键盘输入是怎么实现的？（IO中断）除了中断，CPU还有什么控制IO的方式？" class="headerlink" title="键盘输入是怎么实现的？（IO中断）除了中断，CPU还有什么控制IO的方式？"></a>键盘输入是怎么实现的？（IO中断）除了中断，CPU还有什么控制IO的方式？</h3><h3 id="操作系统中的抖动是什么？"><a href="#操作系统中的抖动是什么？" class="headerlink" title="操作系统中的抖动是什么？"></a>操作系统中的抖动是什么？</h3><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="哈希索引和B-树索引有啥区别？"><a href="#哈希索引和B-树索引有啥区别？" class="headerlink" title="哈希索引和B+树索引有啥区别？"></a>哈希索引和B+树索引有啥区别？</h3><h3 id="外键的作用？"><a href="#外键的作用？" class="headerlink" title="外键的作用？"></a>外键的作用？</h3><h3 id="什么是事务，事务的四大特点？"><a href="#什么是事务，事务的四大特点？" class="headerlink" title="什么是事务，事务的四大特点？"></a>什么是事务，事务的四大特点？</h3><h3 id="数据库中视图有啥作用？"><a href="#数据库中视图有啥作用？" class="headerlink" title="数据库中视图有啥作用？"></a>数据库中视图有啥作用？</h3><h2 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h2><h3 id="毕业设计项目的原理和具体实现"><a href="#毕业设计项目的原理和具体实现" class="headerlink" title="毕业设计项目的原理和具体实现"></a>毕业设计项目的原理和具体实现</h3><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="static的作用？"><a href="#static的作用？" class="headerlink" title="static的作用？"></a>static的作用？</h3><h3 id="C-中的继承和多态？"><a href="#C-中的继承和多态？" class="headerlink" title="C++中的继承和多态？"></a>C++中的继承和多态？</h3><h3 id="Java、C-、C之间的区别？"><a href="#Java、C-、C之间的区别？" class="headerlink" title="Java、C++、C之间的区别？"></a>Java、C++、C之间的区别？</h3><h3 id="Java为什么要使用引用不使用指针？"><a href="#Java为什么要使用引用不使用指针？" class="headerlink" title="Java为什么要使用引用不使用指针？"></a>Java为什么要使用引用不使用指针？</h3><h3 id="struct和class的区别？"><a href="#struct和class的区别？" class="headerlink" title="struct和class的区别？"></a>struct和class的区别？</h3><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="这个项目中你具体做了什么、用了什么技术、为什么用这些技术、有什么改进方式吗、项目中遇到的最大问题是什么等等。"><a href="#这个项目中你具体做了什么、用了什么技术、为什么用这些技术、有什么改进方式吗、项目中遇到的最大问题是什么等等。" class="headerlink" title="这个项目中你具体做了什么、用了什么技术、为什么用这些技术、有什么改进方式吗、项目中遇到的最大问题是什么等等。"></a>这个项目中你具体做了什么、用了什么技术、为什么用这些技术、有什么改进方式吗、项目中遇到的最大问题是什么等等。</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="希望从事什么方面的研究？"><a href="#希望从事什么方面的研究？" class="headerlink" title="希望从事什么方面的研究？"></a>希望从事什么方面的研究？</h3><h3 id="人生规划"><a href="#人生规划" class="headerlink" title="人生规划"></a>人生规划</h3>]]></content>
      
      
      <categories>
          
          <category> Private </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
            <tag> Memo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（12）：系统部署</title>
      <link href="/2020/05/03/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/12.%20%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%8812%EF%BC%89%EF%BC%9A%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/05/03/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/12.%20%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%8812%EF%BC%89%EF%BC%9A%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><ul><li>CentOS 6</li><li>云服务器</li></ul><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><p>创建一个 cinema 用户：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@huawei ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd cinema</span><span class="token punctuation">[</span>root@huawei ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># passwd cinema</span>Changing password <span class="token keyword">for</span> user cinema.New password: BAD PASSWORD: it does not contain enough DIFFERENT charactersRetype new password: passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给予其权限，首先需要赋予当前用户对 /etc/sudoers 的写权限，然后在 sudoers 文件中的 root ALL = (ALL) ALL 下增加一行，基于其在任何地方执行任何命令的权限：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> u+w /etc/sudoersvim sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## Allow root to run any commands anywhere </span>root    ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALLcinema  ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后，取消当前用户的写权限：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> u-w /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="关闭-iptables-防火墙"><a href="#关闭-iptables-防火墙" class="headerlink" title="关闭 iptables 防火墙"></a>关闭 iptables 防火墙</h1><p>我们只需要使用云服务器提供的防火墙就够了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> iptables stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且关闭开机启动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chkconfig</span> iptables off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h1><p>下载并安装 MySQL Yum Repository（MySQL 镜像源）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://dev.mysql.com/get/mysql80-community-release-el6-3.noarch.rpm<span class="token function">sudo</span> yum <span class="token function">install</span> mysql80-community-release-el6-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证安装是否成功：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> /etc/yum.repos.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若存在 mysql-community.repo 和 mysql-community-source.repo，则表示 MySQL Yum Repository 安装成功。</p><p>查看所有 MySQL 版本：</p><pre class="line-numbers language-bash"><code class="language-bash">yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁用最新版，使用 5.7 版本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --disable mysql80-communityyum-config-manager --enable mysql57-community<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装 MySQL：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启 MySQL 服务：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 MySQL 初始密码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">grep</span> <span class="token string">"password"</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用初始密码登录数据库：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改初始密码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> password <span class="token keyword">for</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'Zjxjwxk19981018_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前有哪些用户：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> host, user from mysql.user<span class="token punctuation">;</span>+---------+---------------+<span class="token operator">|</span> host          <span class="token operator">|</span> user                      <span class="token operator">|</span>+-------- +---------------+<span class="token operator">|</span> localhost <span class="token operator">|</span> mysql.session    <span class="token operator">|</span><span class="token operator">|</span> localhost <span class="token operator">|</span> mysql.sys            <span class="token operator">|</span><span class="token operator">|</span> localhost <span class="token operator">|</span> root                       <span class="token operator">|</span>+-----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 root 用户访问权限，使得其可以被远程访问：</p><pre class="line-numbers language-bash"><code class="language-bash">UPDATE mysql.user SET host <span class="token operator">=</span> <span class="token string">'%'</span> WHERE user <span class="token operator">=</span> <span class="token string">'root'</span> and host <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改后重启 MySQL：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装-vsftpd"><a href="#安装-vsftpd" class="headerlink" title="安装 vsftpd"></a>安装 vsftpd</h1><blockquote><p>阿里云文档：<a href="https://help.aliyun.com/knowledge_detail/60152.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/60152.html</a></p></blockquote><h1 id="安装-JDK-和-Zookeeper"><a href="#安装-JDK-和-Zookeeper" class="headerlink" title="安装 JDK 和 Zookeeper"></a>安装 JDK 和 Zookeeper</h1><h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><p>从 Oracle 官网下载 jdk 的 tar.gz 包 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a> ，解压之：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-8u251-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 JAVA_HOME 环境变量：</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下几行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## JAVA_HOME</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/developer/jdk1.8.0_251<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生效环境变量：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-Zookeeper"><a href="#安装-Zookeeper" class="headerlink" title="安装 Zookeeper"></a>安装 Zookeeper</h2><p>从 Apache Zookeeper 官网获取 tar.gz 包：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，解压之：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf zookeeper-3.4.14.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重命名 zoo_sample.cfg 为 zoo.cfg：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> zookeeper-3.4.14/conf/zoo_sample.cfg zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 Zookeeper：</p><pre class="line-numbers language-bash"><code class="language-bash">sh zookeeper-3.4.14/bin/zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看服务进程：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数据初始化、工程打包和部署"><a href="#数据初始化、工程打包和部署" class="headerlink" title="数据初始化、工程打包和部署"></a>数据初始化、工程打包和部署</h1><p>将各个模块的 application.yml 配置为线上环境，包括数据库和 FTP 服务器的地址、用户名和密码等。然后直接对父模块使用 maven clean 和 package 打包各个模块为 jar 包，发送到服务器上部署运行即可（jar 包后台运行和日志输出重定向见 <a href="https://zjxjwxk.com/2019/01/30/Linux/CentOS/CentOS jar包后台运行/">CentOS jar包后台运行</a>）。当然，这里是一种比较 low 的部署方式，可以通过 Jenkins，k8s 等进行持续集成。</p><p><img src="/2020/05/03/Dubbo/Dubbo微服务影院系列/12. 系统部署/Dubbo微服务影院系列（12）：系统部署/image-20200504122029175.png" alt="mvn clean and package"></p><p>可以通过以下命令查看是否启动成功：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> xxx或者<span class="token function">jobs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装-OpenResty"><a href="#安装-OpenResty" class="headerlink" title="安装 OpenResty"></a>安装 OpenResty</h1><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><p>您必须将这些库 <code>perl 5.6.1+</code>, <code>libpcre</code>, <code>libssl</code>安装在您的电脑之中。 对于 Linux来说, 您需要确认使用 <code>ldconfig</code> 命令，让其在您的系统环境路径中能找到它们。</p><h2 id="Fedora-和-RedHat-用户"><a href="#Fedora-和-RedHat-用户" class="headerlink" title="Fedora 和 RedHat 用户"></a>Fedora 和 RedHat 用户</h2><p>推荐您使用yum安装以下的开发库:</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> pcre-devel openssl-devel gcc curl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="构建-OpenResty"><a href="#构建-OpenResty" class="headerlink" title="构建 OpenResty"></a>构建 OpenResty</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>从下载页 <a href="https://openresty.org/cn/download.html" target="_blank" rel="noopener">Download</a>下载最新的 OpenResty® 源码包，并且像下面的示例一样将其解压:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf openresty-VERSION.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>VERSION</code> 的地方替换成您下载的源码包的版本号，比如说 <code>0.8.54.6</code>。</p><h2 id="configure"><a href="#configure" class="headerlink" title="./configure"></a>./configure</h2><p>然后在进入 <code>openresty-VERSION/</code> 目录, 然后输入以下命令配置:</p><pre class="line-numbers language-bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认, <code>--prefix=/usr/local/openresty</code> 程序会被安装到/usr/local/openresty目录。</p><p>您可以指定各种选项，比如</p><pre class="line-numbers language-bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/developer/openresty \            --with-luajit \            --without-http_redis2_module \            --with-http_iconv_module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>试着使用 <code>./configure --help</code> 查看更多的选项。</p><p>配置文件（./configure script）运行出错可以到 <code>build/nginx-VERSION/objs/autoconf.err</code> 找到。 <code>VERSION</code> 的地方必须与<a href="https://openresty.org/cn/openresty.html" target="_blank" rel="noopener">OpenResty</a>版本号相对应, 比如 <code>0.8.54.6</code>。</p><p>需要额外安装 postersql-devel</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y postgresql-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>您可以使用下面的命令来编译：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您的电脑支持多核 <code>make</code> 工作的特性, 您可以这样编译:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设您是的机器是双核。</p><h2 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h2><p>如果前面的步骤都没有问题的话,您可以使用下面的命令安装 <a href="https://openresty.org/cn/openresty.html" target="_blank" rel="noopener">OpenResty</a> 到您的系统中：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Linux 上，通常需要使用 <code>sudo</code> 来获取 root 权限来完成安装。</p><p>如果在 prefix 目录有了 openresty 目录，这代表安装完成。</p><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>编辑 Nginx 的 nginx.conf</p><pre class="line-numbers language-bash"><code class="language-bash">vim openresty/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在其中启用（去掉注释） error_log, pid, http 中的 log_format 和 access_log。</p><p>在 http 的 server 中，去掉 access_log 的注释（全局也有一个 access_log，局部优先），并给 server_name 添加域名，将 location / 中修改为 proxy_pass <a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a> （此处为我的 gateway 网关模块运行端口），即代理访问 gateway 服务。FTP 服务器代理则为 root /ftpfile/ 。</p><pre class="line-numbers language-json"><code class="language-json">#user  nobody<span class="token punctuation">;</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>error_log  logs/error.log<span class="token punctuation">;</span>#error_log  logs/error.log  notice<span class="token punctuation">;</span>#error_log  logs/error.log  info<span class="token punctuation">;</span>pid        logs/nginx.pid<span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime.types<span class="token punctuation">;</span>    default_type  application/octet-stream<span class="token punctuation">;</span>    log_format  main  '$remote_addr - $remote_user <span class="token punctuation">[</span>$time_local<span class="token punctuation">]</span> <span class="token string">"$request"</span> '                      '$status $body_bytes_sent <span class="token string">"$http_referer"</span> '                      '<span class="token string">"$http_user_agent"</span> <span class="token string">"$http_x_forwarded_for"</span>'<span class="token punctuation">;</span>    access_log  logs/access.log  main<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    #tcp_nopush     on<span class="token punctuation">;</span>    #keepalive_timeout  <span class="token number">0</span><span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    #gzip  on<span class="token punctuation">;</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost www.cinema.zjxjwxk.com cinema.zjxjwxk.com        #charset koi8-r<span class="token punctuation">;</span>        access_log  logs/host.access.log  main<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            proxy_pass http<span class="token operator">:</span>//<span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8081</span>        <span class="token punctuation">}</span>        #error_page  <span class="token number">404</span>              /<span class="token number">404</span>.html<span class="token punctuation">;</span>        # redirect server error pages to the static page /50x.html        #        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>        location = /50x.html <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        # proxy the PHP scripts to Apache listening on <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">80</span>        #        #location ~ \.php$ <span class="token punctuation">{</span>        #    proxy_pass   http<span class="token operator">:</span>//<span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token punctuation">;</span>        #<span class="token punctuation">}</span>        # pass the PHP scripts to FastCGI server listening on <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9000</span>        #        #location ~ \.php$ <span class="token punctuation">{</span>        #    root           html<span class="token punctuation">;</span>        #    fastcgi_pass   <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">;</span>        #    fastcgi_index  index.php<span class="token punctuation">;</span>        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name<span class="token punctuation">;</span>        #    include        fastcgi_params<span class="token punctuation">;</span>        #<span class="token punctuation">}</span>        # deny access to .htaccess files<span class="token punctuation">,</span> if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht <span class="token punctuation">{</span>        #    deny  all<span class="token punctuation">;</span>        #<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    # another virtual host using mix of IP-<span class="token punctuation">,</span> name-<span class="token punctuation">,</span> and port-based configuration    #    # vsftpd FTP server    #server <span class="token punctuation">{</span>    #    listen       <span class="token number">80</span><span class="token punctuation">;</span>       #    server_name  localhost img-cinema.zjxjwxk.com<span class="token punctuation">;</span>    #    location / <span class="token punctuation">{</span>    #        root   /ftpfile/<span class="token punctuation">;</span>    #    <span class="token punctuation">}</span>    #<span class="token punctuation">}</span>    # HTTPS server    #    #server <span class="token punctuation">{</span>    #    listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>    #    server_name  localhost<span class="token punctuation">;</span>    #    ssl_certificate      cert.pem<span class="token punctuation">;</span>    #    ssl_certificate_key  cert.key<span class="token punctuation">;</span>    #    ssl_session_cache    shared<span class="token operator">:</span>SSL<span class="token operator">:</span>1m<span class="token punctuation">;</span>    #    ssl_session_timeout  5m<span class="token punctuation">;</span>    #    ssl_ciphers  HIGH<span class="token operator">:</span>!aNULL<span class="token operator">:</span>!MD5<span class="token punctuation">;</span>    #    ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>    #    location / <span class="token punctuation">{</span>    #        root   html<span class="token punctuation">;</span>    #        index  index.html index.htm<span class="token punctuation">;</span>    #    <span class="token punctuation">}</span>    #<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 sbin 中执行以下命令查看配置是否合法</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 运行 nginx</p><pre class="line-numbers language-bash"><code class="language-bash">./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证是否运行成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">netstat</span> -nlp <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"nginx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terminal 终端代理加速</title>
      <link href="/2020/04/27/Linux/MacOS/Terminal%20%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F/"/>
      <url>/2020/04/27/Linux/MacOS/Terminal%20%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="方法1（暂时）"><a href="#方法1（暂时）" class="headerlink" title="方法1（暂时）:"></a>方法1（暂时）:</h1><p>在终端中直接运行命令</p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy=http://proxyAddres.s:port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个办法的好处是简单直接，并且影响面很小（只对当前终端有效，退出就不行了）。</p><p>如果你用的是 s.s 代理，在当前终端运行以下命令，那么<code>wget</code> <code>curl</code> 这类网络命令都会经过 s.s 代理，port 端口号可以从 s.s 高级设置中查看，我的是1086。</p><pre class="line-numbers language-shell"><code class="language-shell">export ALL_PROXY=socks5://127.0.0.1:1086<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/27/Linux/MacOS/Terminal 终端代理加速/image-20200426235228770.png" alt="s.s端口"></p><p>安装完软件以后，我们再执行以下命令取消终端代理</p><pre class="line-numbers language-shell"><code class="language-shell">unset ALL_PROXY<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="方法2（永久）"><a href="#方法2（永久）" class="headerlink" title="方法2（永久）:"></a>方法2（永久）:</h1><p>把代理服务器地址写入 shell 配置文件<code>.bashrc</code>或者<code>.zshrc</code></p><p>直接在<code>.bashrc</code>或者<code>.zshrc</code>添加下面内容</p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy="http://localhost:port"export https_proxy="http://localhost:port"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以使用 s.s 代理为例，s.s 的代理端口为<code>1086</code>,那么应该设置为</p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy="socks5://127.0.0.1:1086"export https_proxy="socks5://127.0.0.1:1086"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者直接设置 ALL_PROXY</p><pre class="line-numbers language-shell"><code class="language-shell">export ALL_PROXY=socks5://127.0.0.1:1086<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>localhost</code>就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。</p><p>然后<code>ESC</code>后<code>:wq</code>保存文件，接着在终端中执行<code>source ~/.bashrc</code></p><p>这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p><p>或者通过设置 alias 简写来简化操作，每次要用的时候输入<code>setproxy</code>，不用了就<code>unsetproxy</code>。</p><pre class="line-numbers language-shell"><code class="language-shell">alias setproxy="export ALL_PROXY=socks5://127.0.0.1:1086"alias unsetproxy="unset ALL_PROXY"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Git-代理"><a href="#Git-代理" class="headerlink" title="Git 代理"></a>Git 代理</h1><p>git 设置全局代理：</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global http.proxy 'socks5://127.0.0.1:1086' git config --global https.proxy 'socks5://127.0.0.1:1086'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>git 仅针对 GitHub 的单独配置：</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global http.https://github.com.proxy 'socks5://127.0.0.1:1086' <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git 取消全局代理，只需加个 –unset，单独配置同理：</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global --unset http.proxy 'socks5://127.0.0.1:1086' git config --global --unset https.proxy 'socks5://127.0.0.1:1086'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（11）：服务监控</title>
      <link href="/2020/04/24/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/11.%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%8811%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/"/>
      <url>/2020/04/24/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/11.%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%8811%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>了解 Dubbo 监控相关内容</li><li>熟练掌握 Dubbo-admin 使用</li><li>熟练掌握链路监控</li><li>完成业务系统部署</li></ul><h1 id="Dubbo-monitor"><a href="#Dubbo-monitor" class="headerlink" title="Dubbo-monitor"></a>Dubbo-monitor</h1><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200424231550404.png" alt="Dubbo架构"></p><h2 id="源码下载和打包"><a href="#源码下载和打包" class="headerlink" title="源码下载和打包"></a>源码下载和打包</h2><p>目前，还可以从当当网的项目 Dubbox 中获取（很久没有维护了）：<a href="https://github.com/dangdangdotcom/dubbox" target="_blank" rel="noopener">https://github.com/dangdangdotcom/dubbox</a> ，在项目中执行以下命令打包并拷贝到本地仓库（跳过单元测试）：</p><pre class="line-numbers language-shell"><code class="language-shell">mvn package -Dmaven.test.skip=true  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，可能会遇到 Missing artifact com.alibaba:dubbo:jar:2.8.4 的坑，需要在根项目的 pom.xml 文件中添加以下 maven 插件：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200425004851922.png" alt="添加插件依赖"></p><p>这样在本地仓库就有了 ~/.m2/repository/com/alibaba/dubbo-monitor-simple/2.8.4/dubbo-monitor-simple-2.8.4-assembly.tar.gz 这个 tar.gz 包，解压它可以得到以下文件：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200425004950736.png" alt="Dubbo-Monitor文件目录"></p><h2 id="启动服务监控"><a href="#启动服务监控" class="headerlink" title="启动服务监控"></a>启动服务监控</h2><p>在 conf 文件夹下，编辑 dubbo.properties，将相关参数配置如下：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">dubbo.container</span><span class="token punctuation">=</span><span class="token attr-value">log4j,spring,registry,jetty</span><span class="token attr-name">dubbo.application.name</span><span class="token punctuation">=</span><span class="token attr-value">simple-monitor</span><span class="token attr-name">dubbo.application.owner</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">#dubbo.registry.address=multicast://224.5.6.7:1234</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://127.0.0.1:2181</span><span class="token comment" spellcheck="true">#dubbo.registry.address=redis://127.0.0.1:6379</span><span class="token comment" spellcheck="true">#dubbo.registry.address=dubbo://127.0.0.1:9090</span><span class="token attr-name">dubbo.protocol.port</span><span class="token punctuation">=</span><span class="token attr-value">7070</span><span class="token attr-name">dubbo.jetty.port</span><span class="token punctuation">=</span><span class="token attr-value">8090</span><span class="token attr-name">dubbo.jetty.directory</span><span class="token punctuation">=</span><span class="token attr-value">monitor</span><span class="token attr-name">dubbo.charts.directory</span><span class="token punctuation">=</span><span class="token attr-value">monitor/charts</span><span class="token attr-name">dubbo.statistics.directory</span><span class="token punctuation">=</span><span class="token attr-value">monitor/statistics</span><span class="token attr-name">dubbo.log4j.file</span><span class="token punctuation">=</span><span class="token attr-value">monitor/dubbo-monitor-simple.log</span><span class="token attr-name">dubbo.log4j.level</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 然后，进入 bin 目录，运行 start.sh 就可以启动 Dubbo-Monitor 了，运行在配置好的 8090 端口（需要先打开 Zookeeper）。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200425005304792.png" alt="Dubbo-Monitor界面"></p><p>启动服务提供者和消费者后，可以在 Applications 中看到如下信息：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200425010612712.png" alt="服务提供者和消费者"></p><p>同时，可以点击 Providers 查看服务某一服务提供者的详细信息，并且可以将其取消注册：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200425010858667.png" alt="服务提供者详细信息"></p><p>取消注册后，服务消费者将不能够调用该提供者的服务：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200425011020489.png" alt="提供者取消注册"></p><h1 id="Dubbo-admin"><a href="#Dubbo-admin" class="headerlink" title="Dubbo-admin"></a>Dubbo-admin</h1><p>现在有两种版本：</p><ul><li>Dubbo 原生的 admin 工程</li><li>Apache 修正版</li></ul><h2 id="Apache-修正版"><a href="#Apache-修正版" class="headerlink" title="Apache 修正版"></a>Apache 修正版</h2><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/admin/introduction.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/admin/introduction.html</a></p></blockquote><h3 id="Maven方式部署"><a href="#Maven方式部署" class="headerlink" title="Maven方式部署"></a>Maven方式部署</h3><ul><li>安装</li></ul><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/apache/dubbo-admin.gitcd dubbo-adminmvn clean packagecd dubbo-admin-distribution/targetjava -jar dubbo-admin-0.1.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080</a></li></ul><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200427003703064.png" alt="Apache修正版界面"></p><h2 id="Dubbo-原生"><a href="#Dubbo-原生" class="headerlink" title="Dubbo 原生"></a>Dubbo 原生</h2><p>现在很少能找到，但目前还能在当当网的 dubbox 项目中找到，打包当当网的 dubbox 项目后，可以在 dubbo-admin 模块下找到其 war 包。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200427201627442.png" alt="war包"></p><p>将其放到 tomcat 目录的 webapps 下，启动 tomcat 即可在默认的 8080 端口访问到 Dubbo-admin 的界面，<a href="http://localhost:8080/dubbo-admin" target="_blank" rel="noopener">http://localhost:8080/dubbo-admin</a> ，dubbo-admin 为 war 包名称。默认 root 的登录密码为 root，可以在 WEB-INF 中的 dubbo.properties 中配置。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200427201911136.png" alt="Dubbo原生界面"></p><p>可以在服务治理的服务中查看所有服务，点击服务名可以查看该服务的提供者、消费者等详细信息。</p><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>可以对其提供者进行权重修改（用于 Dubbo 的负载均衡特性），权重越高越容易被调用。也可以禁用某一台机器的服务，消费者将不会对其进行调用。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200427202649454.png" alt="服务提供者"></p><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p>可以对服务消费者进行静止、屏蔽和容错。</p><ul><li>若禁止某一台消费者，则该消费者调用时将会抛出异常。</li><li>若屏蔽某一台消费者，则该消费者将不会进行远程调用，并且直接返回空对象。</li><li>若对某一台消费者开启容错，则报任何错误时都会返回一个空对象。</li></ul><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200427204820304.png" alt="服务消费者"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>可以查看所有应用，包括提供者和消费者。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200427205426151.png" alt="应用"></p><h3 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h3><p>路由规则在发起一次RPC调用前起到过滤目标服务器地址的作用，过滤后的地址列表，将作为消费端最终发起RPC调用的备选地址。</p><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html</a></p></blockquote><p>根据官方文档的配置说明，可以在 Dubbo Admin 的服务治理的路由规则中新增配置：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200428195151141.png" alt="路由规则"></p><h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h3><p>覆盖规则是Dubbo设计的在无需重启应用的情况下，动态调整RPC调用行为的一种能力。2.7.0版本开始，支持从<strong>服务</strong>和<strong>应用</strong>两个粒度来调整动态配置。</p><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/config-rule.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/config-rule.html</a></p></blockquote><h1 id="链路监控"><a href="#链路监控" class="headerlink" title="链路监控"></a>链路监控</h1><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200429162539237.png" alt="请求链路"></p><p>首先，我们需要先熟悉一下 Dubbo-Filter 拦截器：</p><h2 id="Dubbo-Filter"><a href="#Dubbo-Filter" class="headerlink" title="Dubbo-Filter"></a>Dubbo-Filter</h2><blockquote><p>官方文档：<a href="http://dubbo.apache.org/zh-cn/docs/dev/impls/filter.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/dev/impls/filter.html</a></p></blockquote><ul><li>Dubbo 支持 Filter 机制</li><li>Dubbo 诸多工作都是通过 Filter 实现</li><li>常见自定义 Filter：例子记录、trace 功能等</li></ul><h3 id="拦截器简介"><a href="#拦截器简介" class="headerlink" title="拦截器简介"></a>拦截器简介</h3><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200503165744560.png" alt="拦截器"></p><h3 id="Dubbo-Filter-使用"><a href="#Dubbo-Filter-使用" class="headerlink" title="Dubbo-Filter 使用"></a>Dubbo-Filter 使用</h3><p>Spring XML 配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 消费方调用过程拦截 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx,yyy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 消费方调用过程缺省拦截器，将拦截所有reference --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx,yyy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 提供方调用过程拦截 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx,yyy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 提供方调用过程缺省拦截器，将拦截所有service --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx,yyy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个 Filter 类，实现 com.alibaba.dubbo.rpc.Filter 接口，可以在服务调用前后做一些事情，这里用控制台输出表示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Result <span class="token function">invoke</span><span class="token punctuation">(</span>Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invoker<span class="token punctuation">,</span> Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// do something...</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务调用之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Result result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务调用之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// do something...</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模块的 resources 下创建 META-INF 文件夹，并在 META-INF 下创建 dubbo 文件夹，在其中创建一个名为 com.alibaba.dubbo.rpc.Filter 的纯文件（File），并在其中添加之前创建的 Filter 类：</p><pre class="line-numbers language-txt"><code class="language-txt">MyFilter=com.zjut.zjxjwxk.springboot.provider.filter.MyFilter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，在调用服务时，就会被 MyFilter 拦截器拦截，并在调用前后可以做一些事情，比如链路监控。</p><pre><code>服务调用之前quickstart-provider-message=Hello World!服务调用之后</code></pre><p>然后，介绍一下 Zipkin：</p><h2 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h2><blockquote><p>官网：<a href="https://zipkin.io" target="_blank" rel="noopener">https://zipkin.io</a></p></blockquote><p>Zipkin 是一个分布式跟踪系统。它有助于收集解决服务体系结构中的延迟问题所需的时序数据。功能包括该数据的收集和查找。</p><h3 id="Zipkin-架构"><a href="#Zipkin-架构" class="headerlink" title="Zipkin 架构"></a>Zipkin 架构</h3><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200429203208048.png" alt="Zipkin architecture"></p><h3 id="Zipkin-简介"><a href="#Zipkin-简介" class="headerlink" title="Zipkin 简介"></a>Zipkin 简介</h3><table><thead><tr><th>构成</th><th>作用</th></tr></thead><tbody><tr><td>TraceID</td><td>全局唯一表示，单次请求唯一</td></tr><tr><td>SpanID</td><td>调用编号，每次远程调用唯一</td></tr><tr><td>ParentID</td><td>父请求编号，上一级 SpanID</td></tr><tr><td>Client Start</td><td>cs，表示客户端发起请求</td></tr><tr><td>Server Receive</td><td>sr，表示服务端收到请求</td></tr><tr><td>Server Send</td><td>ss，表示服务端完成处理</td></tr><tr><td>Client Receive</td><td>cr，表示客户端收到相应</td></tr></tbody></table><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200429210440297.png" alt="请求和响应流程"></p><h3 id="Zipkin-运行"><a href="#Zipkin-运行" class="headerlink" title="Zipkin 运行"></a>Zipkin 运行</h3><p>The quickest way to get started is to fetch the <a href="https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec" target="_blank" rel="noopener">latest released server</a> as a self-contained executable jar. Note that the Zipkin server requires minimum JRE 8. For example:</p><pre class="line-numbers language-shell"><code class="language-shell">curl -sSL https://zipkin.io/quickstart.sh | bash -sjava -jar zipkin.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以在默认的 9411 端口上看到 Zipkin 的界面：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200430214447946.png" alt="Zipkin界面"></p><h3 id="Dubbo-Spring-项目配置"><a href="#Dubbo-Spring-项目配置" class="headerlink" title="Dubbo Spring 项目配置"></a>Dubbo Spring 项目配置</h3><p>主模块 pom.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.reporter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-reporter-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>provider 模块 pom.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-instrumentation-dubbo-rpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-context-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.reporter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-sender-okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>provider spring 配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zipkin2.reporter.beans.OkHttpSenderFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>endpoint<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:9411/api/v2/spans<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tracing<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brave.spring.beans.TracingFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localServiceName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello-service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spanReporter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zipkin2.reporter.beans.AsyncReporterFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sender<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- wait up to half a second for any in-flight spans on close --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTraceContext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brave.spring.beans.CurrentTraceContextFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scopeDecorators<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brave.context.slf4j.MDCScopeDecorator<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 openzipkin/brave GitHub 仓库中，brave/instrumentation/dubbo-rpc 中的文档说明：<a href="https://github.com/openzipkin/brave/tree/master/instrumentation/dubbo-rpc" target="_blank" rel="noopener">https://github.com/openzipkin/brave/tree/master/instrumentation/dubbo-rpc</a> ，要在需要监控的服务上添加 filter=”tracing” ，如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span>            <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjut.zjxjwxk.dubbo.ServiceAPI<span class="token punctuation">"</span></span>            <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>quickStartService<span class="token punctuation">"</span></span>            <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tracing<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者监控所有服务，则加在 consumer 和 provider 上：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tracing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tracing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，在调用服务后，就能在 Zipkin 中找到对应的服务请求状态了：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200430214608676.png" alt="服务请求状态"></p><h3 id="Dubbo-SpringBoot-项目配置"><a href="#Dubbo-SpringBoot-项目配置" class="headerlink" title="Dubbo SpringBoot 项目配置"></a>Dubbo SpringBoot 项目配置</h3><p>主模块 pom.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.reporter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-reporter-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>provider 模块 pom.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-instrumentation-dubbo-rpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-context-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.reporter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-sender-okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SpringBoot 需要的额外依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringBoot 不需要 Spring XML 文件，只需要创建一个 TraceConfig 配置类，该类每个需要监控的模块都需要一个，其 LocalServiceName 可以设置为服务名，如 order 模块中的该配置类（别忘了在 @Bean 中加上 “tracing” 名称）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"tracing"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TracingFactoryBean <span class="token function">getTracingBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TracingFactoryBean tracingFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TracingFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tracingFactoryBean<span class="token punctuation">.</span><span class="token function">setLocalServiceName</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tracingFactoryBean<span class="token punctuation">.</span><span class="token function">setSpanReporter</span><span class="token punctuation">(</span>AsyncReporter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>OkHttpSender<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9411/api/v2/spans"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tracingFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h4><p>在需要监控的消费者的 @Reference 和提供者的 @Service 中添加 filter 属性为 “tracing” 即可：</p><p>消费者：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> AlipayServiceApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> filter <span class="token operator">=</span> <span class="token string">"tracing"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> AlipayServiceApi alipayServiceApi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提供者：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> OrderServiceApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> filter <span class="token operator">=</span> <span class="token string">"tracing"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="服务级别"><a href="#服务级别" class="headerlink" title="服务级别"></a>服务级别</h4><p>在需要监控的服务的 application.yml 中添加如下配置，则对该服务的服务消费和提供均进行监控：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>    <span class="token key atrule">provider</span><span class="token punctuation">:</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span> tracing    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span> tracing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Zipkin-监控面板"><a href="#Zipkin-监控面板" class="headerlink" title="Zipkin 监控面板"></a>Zipkin 监控面板</h3><p>之后每次调用被监控的服务，就能在 Zipkin 面板中找到对应的调用链路：</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200503201604777.png" alt="Discover面板"></p><p>可以在 Discover 面板中，找到一定时间内被监控的服务调用。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200503215735455.png" alt="链路调用详情"></p><p>接口调用详情中，接口的调用链路和时间一目了然，可以找出哪个接口调用的时间较长，或者错误发生在哪个接口的调用过程中，还可以从右侧的 Annotaions 中看到客户端和服务器的 Start 和 Finish 时间，以判断哪一台服务器的访问速度较慢等。</p><p><img src="/2020/04/24/Dubbo/Dubbo微服务影院系列/11.服务监控/Dubbo微服务影院系列（11）：服务监控/image-20200503220214486.png" alt="Dependencies面板"></p><p>Dependencies 面板中，服务之间的依赖关系以及访问流量以可视化的方式呈现出来。</p><p>（Zipkin 默认使用内存的形式存储数据，它也支持 MySQL 等持久化存储方式，以便于以后的数据分析）</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（10）：分布式事务</title>
      <link href="/2020/04/17/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/10.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%8810%EF%BC%89%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/04/17/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/10.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%8810%EF%BC%89%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>事务简介</li><li>分布式事务的前世今生</li><li>分布式事务解决方案</li><li>主流分布式事务框架介绍</li></ul><h1 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h1><ul><li>事务是用来保证一组<strong>数据操作</strong>的完整性和一致性的</li><li>事务必须满足 ACID 的四大特性</li><li>事务具有四种隔离级别</li><li>事务具有七种传播行为</li></ul><h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><ul><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离型（Isolation）</li><li>持久性（Durability）</li></ul><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>分布式事务就是将多个节点的事务看成一个整体处理</li><li>分布式事务由事务参与者、资源服务器、事务管理器等组成</li><li>常见的分布式事务的例子：支付、下订单等</li></ul><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>两段式事务和三段式事务</li><li>基于 XA 的分布式事务</li><li>基于消息的最终一致性方案</li><li><strong>TCC 编程式补偿性事务</strong></li></ul><h1 id="分布式事务类型"><a href="#分布式事务类型" class="headerlink" title="分布式事务类型"></a>分布式事务类型</h1><h2 id="两段式和三段式事务"><a href="#两段式和三段式事务" class="headerlink" title="两段式和三段式事务"></a>两段式和三段式事务</h2><h3 id="两段式事务"><a href="#两段式事务" class="headerlink" title="两段式事务"></a>两段式事务</h3><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/63d3220513cf709f84fdcd06457c3b65.png" alt="两段式事务"></p><h3 id="三段式事务"><a href="#三段式事务" class="headerlink" title="三段式事务"></a>三段式事务</h3><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200416213159506.png" alt="三段式事务"></p><h2 id="基于-XA-的分布式事务"><a href="#基于-XA-的分布式事务" class="headerlink" title="基于 XA 的分布式事务"></a>基于 XA 的分布式事务</h2><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200416213551917.png" alt="基于XA的分布式事务"></p><h2 id="基于消息的一致性方案"><a href="#基于消息的一致性方案" class="headerlink" title="基于消息的一致性方案"></a>基于消息的一致性方案</h2><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200416215409588.png" alt="基于消息的一致性方案"></p><h2 id="TCC-补偿性事务"><a href="#TCC-补偿性事务" class="headerlink" title="TCC 补偿性事务"></a>TCC 补偿性事务</h2><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200416220735799.png" alt="TCC补偿性事务"></p><h3 id="基于消息的一致性方案和-TCC-补偿性事务的区别"><a href="#基于消息的一致性方案和-TCC-补偿性事务的区别" class="headerlink" title="基于消息的一致性方案和 TCC 补偿性事务的区别"></a>基于消息的一致性方案和 TCC 补偿性事务的区别</h3><ul><li>基于消息的事务是强一致性事务，会存在浪费</li><li>TCC 事务是柔性事务，在 try 阶段要对资源做预留</li><li>TCC 事务在确认或取消阶段释放资源</li><li>与基于消息的事务对比，TCC 的时效性更好</li></ul><h1 id="分布式事务框架"><a href="#分布式事务框架" class="headerlink" title="分布式事务框架"></a>分布式事务框架</h1><ul><li>全局事务服务（Global Transaction Service，简称 GTS）</li><li>蚂蚁金服分布式事务（Distributed Transaction-eXtended，简称 DTX）</li><li><strong>开源 TCC 框架（TCC-Transaction）</strong>（<a href="https://github.com/changmingxie/tcc-transaction）" target="_blank" rel="noopener">https://github.com/changmingxie/tcc-transaction）</a></li><li>开源 TCC 框架（ByteTCC）（<a href="https://github.com/liuyangming/ByteTCC）" target="_blank" rel="noopener">https://github.com/liuyangming/ByteTCC）</a></li></ul><h1 id="TCC-Transaction-分布式事务框架"><a href="#TCC-Transaction-分布式事务框架" class="headerlink" title="TCC-Transaction 分布式事务框架"></a>TCC-Transaction 分布式事务框架</h1><blockquote><p>Github 仓库：<a href="https://github.com/changmingxie/tcc-transaction" target="_blank" rel="noopener">https://github.com/changmingxie/tcc-transaction</a></p></blockquote><ol><li>在需要提供分布式事务支持的接口方法上添加 <code>@Compensable</code></li><li>在对应的接口实现方法上也添加 @Compensable，并添加注解参数 <code>confirmMethod</code>, <code>cancelMethod</code> 和 <code>transactionContextEditor</code></li><li>实现对应的 <code>confirmMethod</code> 和 <code>cancelMethod</code>（必须和 try 方法在同一个类中）</li></ol><p>注意：</p><ol><li>在分布式事务框架中，不要轻易在业务层捕获所有异常，只有在抛出异常的情况下，分布式事务框架才知道该业务是执行失败的。</li><li>使用 TCC-Transaction 时，confirm 和 cancel 的幂等性问题需要自己解决。</li><li>TCC 的数据库应该和业务数据库分开，以保证分布式事务的正常进行。</li></ol><h2 id="建立用于分布式事务的数据库"><a href="#建立用于分布式事务的数据库" class="headerlink" title="建立用于分布式事务的数据库"></a>建立用于分布式事务的数据库</h2><p>TCC 的数据库应该和业务数据库分开，以保证分布式事务的正常进行。</p><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200424222035114.png" alt="分布式事务数据库"></p><p>其中，TCC 库用于实现分布式事务，其包含的表和表结构如下：</p><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200424222245457.png" alt="TCC库"></p><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200424222709615.png" alt="TCC表结构"></p><h2 id="Dubbo-Demo"><a href="#Dubbo-Demo" class="headerlink" title="Dubbo Demo"></a>Dubbo Demo</h2><h3 id="子事务：红包模块"><a href="#子事务：红包模块" class="headerlink" title="子事务：红包模块"></a>子事务：红包模块</h3><p><strong>接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RedPacketTradeOrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Compensable</span>    <span class="token keyword">public</span> String <span class="token function">record</span><span class="token punctuation">(</span>RedPacketTradeOrderDto tradeOrderDto<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"redPacketTradeOrderService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedPacketTradeOrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RedPacketTradeOrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RedPacketAccountRepository redPacketAccountRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    TradeOrderRepository tradeOrderRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Compensable</span><span class="token punctuation">(</span>confirmMethod <span class="token operator">=</span> <span class="token string">"confirmRecord"</span><span class="token punctuation">,</span> cancelMethod <span class="token operator">=</span> <span class="token string">"cancelRecord"</span><span class="token punctuation">,</span> transactionContextEditor <span class="token operator">=</span> DubboTransactionContextEditor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> String <span class="token function">record</span><span class="token punctuation">(</span>RedPacketTradeOrderDto tradeOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TradeOrder foundTradeOrder <span class="token operator">=</span> tradeOrderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getMerchantOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// check if trade order has been recorded, if yes, return success directly.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>foundTradeOrder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TradeOrder tradeOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TradeOrder</span><span class="token punctuation">(</span>                    tradeOrderDto<span class="token punctuation">.</span><span class="token function">getSelfUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    tradeOrderDto<span class="token punctuation">.</span><span class="token function">getOppositeUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    tradeOrderDto<span class="token punctuation">.</span><span class="token function">getMerchantOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    tradeOrderDto<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                tradeOrderRepository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                RedPacketAccount transferFromAccount <span class="token operator">=</span> redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getSelfUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                transferFromAccount<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transferFromAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataIntegrityViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this exception may happen when insert trade order concurrently, if happened, ignore this insert operation.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirmRecord</span><span class="token punctuation">(</span>RedPacketTradeOrderDto tradeOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TradeOrder tradeOrder <span class="token operator">=</span> tradeOrderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getMerchantOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// check if the trade order status is DRAFT, if yes, return directly, ensure idempotency.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tradeOrder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tradeOrder<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DRAFT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tradeOrder<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tradeOrderRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>            RedPacketAccount transferToAccount <span class="token operator">=</span> redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getOppositeUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transferToAccount<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transferToAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelRecord</span><span class="token punctuation">(</span>RedPacketTradeOrderDto tradeOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TradeOrder tradeOrder <span class="token operator">=</span> tradeOrderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getMerchantOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// check if the trade order status is DRAFT, if yes, return directly, ensure idempotency.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> tradeOrder <span class="token operator">&amp;&amp;</span> <span class="token string">"DRAFT"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tradeOrder<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tradeOrderRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>            RedPacketAccount capitalAccount <span class="token operator">=</span> redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getSelfUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            capitalAccount<span class="token punctuation">.</span><span class="token function">cancelTransfer</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>capitalAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考：为什么要在 <code>confirm</code> 和 <code>cancel</code> 方法里先检查订单状态是否为 DRAFT（在 try 方法中新增的一个订单），而不直接修改为结束状态？</p><p>答：为了保证服务的幂等性，即使用相同参数对同一资源重复调用某个接口的结果与调用一次的结果相同。</p><h3 id="主事务：订单模块"><a href="#主事务：订单模块" class="headerlink" title="主事务：订单模块"></a>主事务：订单模块</h3><p>注意：要在主事务的业务已经实现的差不多的时候才调用子事务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentServiceImpl</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    CapitalTradeOrderService capitalTradeOrderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    RedPacketTradeOrderService redPacketTradeOrderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    OrderRepository orderRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Compensable</span><span class="token punctuation">(</span>confirmMethod <span class="token operator">=</span> <span class="token string">"confirmMakePayment"</span><span class="token punctuation">,</span> cancelMethod <span class="token operator">=</span> <span class="token string">"cancelMakePayment"</span><span class="token punctuation">,</span> asyncConfirm <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> delayCancelExceptions <span class="token operator">=</span> <span class="token punctuation">{</span>SocketTimeoutException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@UniqueIdentity</span> String orderNo<span class="token punctuation">,</span> BigDecimal redPacketPayAmount<span class="token punctuation">,</span> BigDecimal capitalPayAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order order <span class="token operator">=</span> orderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// check if the order status is DRAFT, if no, means that another call makePayment for the same order happened, ignore this call makePayment.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DRAFT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            order<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span>redPacketPayAmount<span class="token punctuation">,</span> capitalPayAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                orderRepository<span class="token punctuation">.</span><span class="token function">updateOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OptimisticLockingFailureException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ignore the concurrently update order exception, ensure idempotency.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 调用子事务</span>        String result <span class="token operator">=</span> capitalTradeOrderService<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token function">buildCapitalTradeOrderDto</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result2 <span class="token operator">=</span> redPacketTradeOrderService<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token function">buildRedPacketTradeOrderDto</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirmMakePayment</span><span class="token punctuation">(</span>String orderNo<span class="token punctuation">,</span> BigDecimal redPacketPayAmount<span class="token punctuation">,</span> BigDecimal capitalPayAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order foundOrder <span class="token operator">=</span> orderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// check if the trade order status is PAYING, if no, means another call confirmMakePayment happened, return directly, ensure idempotency.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>foundOrder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> foundOrder<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PAYING"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            foundOrder<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            orderRepository<span class="token punctuation">.</span><span class="token function">updateOrder</span><span class="token punctuation">(</span>foundOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelMakePayment</span><span class="token punctuation">(</span>String orderNo<span class="token punctuation">,</span>  BigDecimal redPacketPayAmount<span class="token punctuation">,</span> BigDecimal capitalPayAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order foundOrder <span class="token operator">=</span> orderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// check if the trade order status is PAYING, if no, means another call cancelMakePayment happened, return directly, ensure idempotency.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>foundOrder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> foundOrder<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PAYING"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            foundOrder<span class="token punctuation">.</span><span class="token function">cancelPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            orderRepository<span class="token punctuation">.</span><span class="token function">updateOrder</span><span class="token punctuation">(</span>foundOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200420202720213.png" alt="TCC-Transaction-Core"></p><h2 id="隐式参数"><a href="#隐式参数" class="headerlink" title="隐式参数"></a>隐式参数</h2><p>根据官方文档可以得知，1.2.x 版本支持 rpc 框架支持隐式传参情况下将事务上下文参数 <code>TransactionContext</code> 以隐式传参方式进行传递。</p><p>那么，在子事务的 Service 实现代码中获取 Dubbo 隐式参数：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> attachments <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttachments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200422004334435.png" alt="Dubbo隐式参数attachments"></p><p>打一个断点，可以从隐式参数中得到 key 为 TRANSACTION_CONTEXT，value 为以下信息的键值对：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"attachments"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"status"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"xid"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"branchQualifier"</span><span class="token operator">:</span><span class="token string">"hMBMmir6Q56M0hskfmPebw=="</span><span class="token punctuation">,</span>    <span class="token property">"formatId"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"globalTransactionId"</span><span class="token operator">:</span><span class="token string">"trSosXg0Soi8Q9xlauTToQ=="</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，包含了 <code>globalTransactionId</code> 这一全局事务 id，和 <code>branchQualifier</code> 分支事务 id。</p><p>##提出疑问</p><ol><li>什么时候生成的 <code>TRANSACTION_CONTEXT</code> 隐式参数？</li><li>如何判断一个大的事务下，都有哪些小的事务？</li><li>为什么要有 <code>@Compensable</code> 注解？</li><li>两个拦截器都没有处理 confirm 和 cancel，谁来处理？</li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200422191933706.png" alt="调用流程"></p><h3 id="事务拦截器"><a href="#事务拦截器" class="headerlink" title="事务拦截器"></a>事务拦截器</h3><p>重点介绍 tcc-transaction-core 核心包的 interceptor 包，也就是拦截器包。</p><p><img src="/2020/04/17/Dubbo/Dubbo微服务影院系列/10.分布式事务/Dubbo微服务影院系列（10）：分布式事务/image-20200422224921576.png" alt="intercepter包"></p><p><strong>CompensableMethodContext</strong></p><p>这是加了 <code>@Compensable</code> 注释的目标方法对象的上下文类。通过构造函数，利用拦截的目标对象上下文，获取被拦截目标对象方法的各种信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">CompensableMethodContext</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pjp <span class="token operator">=</span> pjp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取待访问对象的方法名称</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token function">getCompensableMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取目标对象的 Compensable 注解</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>compensable <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Compensable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取目标对象的事务传播属性（默认为 REQUIRED）</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propagation <span class="token operator">=</span> compensable<span class="token punctuation">.</span><span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取事务上下文</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>transactionContext <span class="token operator">=</span> FactoryBuilder<span class="token punctuation">.</span><span class="token function">factoryOf</span><span class="token punctuation">(</span>compensable<span class="token punctuation">.</span><span class="token function">transactionContextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，transactionContext 是一个 <code>TransactionContext</code> 类，定义在 tcc-transaction-api 模块中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionContext</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>8199390103169700387L<span class="token punctuation">;</span>    <span class="token keyword">private</span> TransactionXid xid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * 保存当前事务有几个子事务     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> attachments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TransactionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TransactionContext</span><span class="token punctuation">(</span>TransactionXid xid<span class="token punctuation">,</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xid <span class="token operator">=</span> xid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXid</span><span class="token punctuation">(</span>TransactionXid xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xid <span class="token operator">=</span> xid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TransactionXid <span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> xid<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttachments</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> attachments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attachments <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>attachments<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>attachments<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>attachments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getAttachments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> attachments<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CompensableTransactionAspect</strong></p><p>这是一个 AOP 切面类。<code>@Pointcut</code> 将 <code>@Compensable</code> 注解标记为切入点，其签名为 <code>compensableService()</code>。<code>@Around</code> 表示在 <code>compensableService()</code> 之前和之后调用 <code>interceptCompensableMethod()</code>，其中调用了 <code>CompensableTransactionInterceptor</code> 的 <code>interceptCompensableMethod()</code>。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.mengyun.tcctransaction.api.Compensable)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compensableService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"compensableService()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">interceptCompensableMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> compensableTransactionInterceptor<span class="token punctuation">.</span><span class="token function">interceptCompensableMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CompensableTransactionInterceptor</strong></p><p>这是事务拦截器，具有以下作用：</p><ol><li>将事务区分为 ROOT 事务和 PROVIDER 分支事务</li><li>不断地修改数据库内的状态（初始化事务、修改事务状态）</li><li>修改和清除事务管理区中的事务队列</li><li>（并没有执行目标对象方法，pjp.proceed() 其实是交给了下一个拦截器 ResourceCoordinatorInterceptor）</li></ol><p><strong>interceptCompensableMethod</strong></p><p>其中<code>interceptCompensableMethod()</code> 方法中，参数 pjp 表示被代理的目标对象，比如被加了 <code>@Compensable</code> 注解的 <code>makePayment</code> 方法对象，就会作为该参数，通过其获取该方法的各种信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">interceptCompensableMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 通过上下文对象，获取待访问对象的各种信息，见下方 CompensableMethodContext() 构造函数</span>        CompensableMethodContext compensableMethodContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompensableMethodContext</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 通过事务管理器，来判断是否有存在的事务队列（从 ThreadLocal 获取 transactions 来判断当前线程是否已经有事务）</span>        <span class="token keyword">boolean</span> isTransactionActive <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">isTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TransactionUtils<span class="token punctuation">.</span><span class="token function">isLegalTransactionContext</span><span class="token punctuation">(</span>isTransactionActive<span class="token punctuation">,</span> compensableMethodContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token string">"no active compensable transaction while propagation is mandatory for method "</span> <span class="token operator">+</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 获取并判断当前事务的角色（ROOT 表示主事务，PROVIDER 表示分支事务或事务参与者），并根据其角色调用不同的方法来处理</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getMethodRole</span><span class="token punctuation">(</span>isTransactionActive<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> ROOT<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">rootMethodProceed</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> PROVIDER<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">providerMethodProceed</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>rootMethodProceed</strong></p><p>处理主事务的 <code>rootMethodProceed()</code> 方法，它会完成：</p><ol><li>开启全局事务</li><li>持久化全局事务</li><li>注册全局事务</li><li>判断应该 confirm 还是 cancel</li><li>清除事务队列</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">rootMethodProceed</span><span class="token punctuation">(</span>CompensableMethodContext compensableMethodContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object returnValue <span class="token operator">=</span> null<span class="token punctuation">;</span>        Transaction transaction <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> asyncConfirm <span class="token operator">=</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> asyncCancel <span class="token operator">=</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token operator">>></span> allDelayCancelExceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allDelayCancelExceptions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayCancelExceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        allDelayCancelExceptions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayCancelExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 让事务管理器开启一个全新的事务，持久化事务，并事务管理器注册该事务（加入事务队列）</span>            transaction <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getUniqueIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行目标方法（实际上会先调用 ResourceCoordinatorIntercepter 拦截器）</span>                returnValue <span class="token operator">=</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果执行异常，就回滚，否则提交</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> tryingException<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDelayCancelException</span><span class="token punctuation">(</span>tryingException<span class="token punctuation">,</span> allDelayCancelExceptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"compensable transaction trying failed. transaction content:%s"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tryingException<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/*                        1. 修改数据库状态                        2. 执行 rollback 方法                        3. 如果执行成功，则删除事务资源数据                     */</span>                    transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>asyncCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> tryingException<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*                1. 修改数据库状态                2. 执行 confirm 方法                3. 如果执行成功，则删除事务资源数据             */</span>            transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>asyncConfirm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 到这里，分支事务就都执行完了，就清除队列中的事务</span>            transactionManager<span class="token punctuation">.</span><span class="token function">cleanAfterCompletion</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中事务管理器 <code>TransactionManager</code> 的 <code>begin()</code> 方法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> Transaction <span class="token function">begin</span><span class="token punctuation">(</span>Object uniqueIdentify<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Transaction transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>uniqueIdentify<span class="token punctuation">,</span>TransactionType<span class="token punctuation">.</span>ROOT<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 持久化事务</span>        transactionRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注册事务，向事务队列中加入该事务</span>        <span class="token function">registerTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> transaction<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>providerMethodProceed</strong></p><p>处理分支事务的 <code>providerMethodProceed()</code> 方法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> Object <span class="token function">providerMethodProceed</span><span class="token punctuation">(</span>CompensableMethodContext compensableMethodContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Transaction transaction <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> asyncConfirm <span class="token operator">=</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> asyncCancel <span class="token operator">=</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据事务的不同状态，执行不同的动作</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>TransactionStatus<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getTransactionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> TRYING<span class="token operator">:</span>                    <span class="token comment" spellcheck="true">// propagationNewBegin() 持久化事务参与者的数据到当前服务中（默认状态为 TRYING），并向事务管理器注册事务</span>                    transaction <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">propagationNewBegin</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getTransactionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> CONFIRMING<span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// propagationExistBegin() 修改事务状态，并注册事务</span>                        transaction <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">propagationExistBegin</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getTransactionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// commit() 修改事务状态为 CONFIRMING，并持久化更新，提交事务</span>                        transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>asyncConfirm<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoExistedTransactionException</span> excepton<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//the transaction has been commit,ignore it.</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> CANCELLING<span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// propagationExistBegin() 修改事务状态，并注册事务</span>                        transaction <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">propagationExistBegin</span><span class="token punctuation">(</span>compensableMethodContext<span class="token punctuation">.</span><span class="token function">getTransactionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// rollback() 修改事务状态为 CANCELLING，并持久化更新，回滚事务</span>                        transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>asyncCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoExistedTransactionException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//the transaction has been rollback,ignore it.</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 清除事务队列</span>            transactionManager<span class="token punctuation">.</span><span class="token function">cleanAfterCompletion</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Method method <span class="token operator">=</span> compensableMethodContext<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getNullValue</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ResourceCoordinatorAspect</strong></p><p>资源协调切面类和 CompensableTransactionAspect 类似，几乎一样，不再赘述。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.mengyun.tcctransaction.api.Compensable)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transactionContextCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"transactionContextCall()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">interceptTransactionContextMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> resourceCoordinatorInterceptor<span class="token punctuation">.</span><span class="token function">interceptTransactionContextMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ResourceCoordinatorInterceptor</strong></p><p>主要处理 try 阶段的事情，在 try 阶段，就将所有的“资源”封装完成并交给事务管理器。</p><p>其中“资源”指的是“事务资源”：</p><p>即事务的参与者：</p><ol><li>confirm 上下文</li><li>cancel 上下文</li><li>分支事务信息</li></ol><p>然后事务管理器修改数据库状态。</p><p><strong>interceptTransactionContextMethod</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">interceptTransactionContextMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用事务管理器，传递一些事务相关的信息（线程共享）</span>        Transaction transaction <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getCurrentTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> TRYING<span class="token operator">:</span>                    <span class="token function">enlistParticipant</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> CONFIRMING<span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> CANCELLING<span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>enlistParticipant</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enlistParticipant</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取对象的方法</span>        Method method <span class="token operator">=</span> CompensableMethodUtils<span class="token punctuation">.</span><span class="token function">getCompensableMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"join point not found method, point is : %s"</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 获取对应的 @Compensable 对象</span>        Compensable compensable <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Compensable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取配置的 confirm 和 cancel 方法</span>        String confirmMethodName <span class="token operator">=</span> compensable<span class="token punctuation">.</span><span class="token function">confirmMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cancelMethodName <span class="token operator">=</span> compensable<span class="token punctuation">.</span><span class="token function">cancelMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction transaction <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getCurrentTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TransactionXid xid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionXid</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGlobalTransactionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FactoryBuilder<span class="token punctuation">.</span><span class="token function">factoryOf</span><span class="token punctuation">(</span>compensable<span class="token punctuation">.</span><span class="token function">transactionContextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            FactoryBuilder<span class="token punctuation">.</span><span class="token function">factoryOf</span><span class="token punctuation">(</span>compensable<span class="token punctuation">.</span><span class="token function">transactionContextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionContext</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> TransactionStatus<span class="token punctuation">.</span>TRYING<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class <span class="token class-name">targetClass</span> <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationContext confirmInvocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationContext</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span>                confirmMethodName<span class="token punctuation">,</span>                method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationContext cancelInvocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationContext</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span>                cancelMethodName<span class="token punctuation">,</span>                method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Participant participant <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">Participant</span><span class="token punctuation">(</span>                        xid<span class="token punctuation">,</span>                        confirmInvocation<span class="token punctuation">,</span>                        cancelInvocation<span class="token punctuation">,</span>                        compensable<span class="token punctuation">.</span><span class="token function">transactionContextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionManager<span class="token punctuation">.</span><span class="token function">enlistParticipant</span><span class="token punctuation">(</span>participant<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，经过两个拦截器后，才调用目标对象方法。</p><h3 id="幂等性问题"><a href="#幂等性问题" class="headerlink" title="幂等性问题"></a>幂等性问题</h3><p>TCC-Transaction 不能保证幂等性，需要自己实现幂等性。如以下 confirm 和 cancel 方法就实现了幂等性：</p><p><strong>confirm 的幂等性</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirmRecord</span><span class="token punctuation">(</span>RedPacketTradeOrderDto tradeOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"red packet confirm record called. time seq:"</span> <span class="token operator">+</span> DateFormatUtils<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TradeOrder tradeOrder <span class="token operator">=</span> tradeOrderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getMerchantOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保证幂等性 check if the trade order status is DRAFT, if yes, return directly, ensure idempotency.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tradeOrder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tradeOrder<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DRAFT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tradeOrder<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tradeOrderRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>            RedPacketAccount transferToAccount <span class="token operator">=</span> redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getOppositeUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transferToAccount<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transferToAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>cancel 的幂等性</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelRecord</span><span class="token punctuation">(</span>RedPacketTradeOrderDto tradeOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"red packet cancel record called. time seq:"</span> <span class="token operator">+</span> DateFormatUtils<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TradeOrder tradeOrder <span class="token operator">=</span> tradeOrderRepository<span class="token punctuation">.</span><span class="token function">findByMerchantOrderNo</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getMerchantOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保证幂等性 check if the trade order status is DRAFT, if yes, return directly, ensure idempotency.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> tradeOrder <span class="token operator">&amp;&amp;</span> <span class="token string">"DRAFT"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tradeOrder<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tradeOrderRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tradeOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>            RedPacketAccount capitalAccount <span class="token operator">=</span> redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getSelfUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            capitalAccount<span class="token punctuation">.</span><span class="token function">cancelTransfer</span><span class="token punctuation">(</span>tradeOrderDto<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redPacketAccountRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>capitalAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>事务的相关信息（全局事务编号，乐观锁版本等要持久化存储）</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>try 核心点：预留资源（业务资源、事务数据资源）</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>注册和初始化事务 -&gt; 组织事务参与者 -&gt; 执行目标方法（try） -&gt; 执行 confirm 和 cancel 方法</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>熟悉 TCC-Transaction 的分布式事务处理流程</li><li>TCC-Transaction 不能保证幂等性</li><li>TCC 分布式事务的核心是资源（业务资源和事务资源）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1108 Finding Average (20分)</title>
      <link href="/2020/04/15/PAT/Advanced_Level/A1108/"/>
      <url>/2020/04/15/PAT/Advanced_Level/A1108/</url>
      
        <content type="html"><![CDATA[<p>The basic task is simple: given <em>N</em> real numbers, you are supposed to calculate their average. But what makes it complicated is that some of the input numbers might not be legal. A <strong>legal</strong> input is a real number in [−1000,1000] and is accurate up to no more than 2 decimal places. When you calculate the average, those illegal numbers must not be counted in.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤100). Then <em>N</em> numbers are given in the next line, separated by one space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each illegal input number, print in a line <code>ERROR: X is not a legal number</code> where <code>X</code> is the input. Then finally print in a line the result: <code>The average of K numbers is Y</code> where <code>K</code> is the number of legal inputs and <code>Y</code> is their average, accurate to 2 decimal places. In case the average cannot be calculated, output <code>Undefined</code> instead of <code>Y</code>. In case <code>K</code> is only 1, output <code>The average of 1 number is Y</code> instead.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">75 -3.2 aaa 9999 2.3.4 7.123 2.35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">ERROR: aaa is not a legal numberERROR: 9999 is not a legal numberERROR: 2.3.4 is not a legal numberERROR: 7.123 is not a legal numberThe average of 3 numbers is 1.38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">2aaa -9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">ERROR: aaa is not a legal numberERROR: -9999 is not a legal numberThe average of 0 numbers is Undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>字符串数组不能开太小，否则会造成 “运行时错误”，即数组越界。实测大小至少为50.</li></ul><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>来自柳神，不容易想到。运用 sscanf 和 sprintf 后可以方便判断是否为合法数字。利用 sscanf(a, “%lf”, &amp;temp) 将原字符串输入为 double 型，再利用 sprintf(b, “%.2f”,temp) 将该 double 型数字输出为保留两位小数的字符串。之后判断保留两位小数后的字符串和原字符串是否相同，即可判断是否合法。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> temp<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sscanf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"%.2f"</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">||</span> temp <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1000</span> <span class="token operator">||</span> temp <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %s is not a legal number\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of 1 number is %.2f"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of %d numbers is %.2f"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> sum <span class="token operator">/</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of 0 numbers is Undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>我的方法比较笨，但最直接，思路简单，就是直接遍历原字符串的每个字符，判断是否合法。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">||</span> index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %s is not a legal number\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token function">stod</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1000</span> <span class="token operator">||</span> num <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %s is not a legal number\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>                total <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of 0 numbers is Undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of 1 number is %.2f"</span><span class="token punctuation">,</span> total <span class="token operator">/</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The average of %d numbers is %.2f"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> total <span class="token operator">/</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1072 Gas Station (30分)</title>
      <link href="/2020/04/13/PAT/Advanced_Level/A1072/"/>
      <url>/2020/04/13/PAT/Advanced_Level/A1072/</url>
      
        <content type="html"><![CDATA[<p>A gas station has to be built at such a location that the minimum distance between the station and any of the residential housing is as far away as possible. However it must guarantee that all the houses are in its service range.</p><p>Now given the map of the city and several candidate locations for the gas station, you are supposed to give the best recommendation. If there are more than one solution, output the one with the smallest average distance to all the houses. If such a solution is still not unique, output the one with the smallest index number.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains 4 positive integers: <em>N</em> (≤10^3), the total number of houses; <em>M</em> (≤10), the total number of the candidate locations for the gas stations; <em>K</em> (≤ 10^4 ), the number of roads connecting the houses and the gas stations; and D <sub>S</sub>, the maximum service range of the gas station. It is hence assumed that all the houses are numbered from 1 to <em>N</em>, and all the candidate locations are numbered from <code>G</code>1 to <code>G</code><em>M</em>.</p><p>Then <em>K</em> lines follow, each describes a road in the format</p><pre><code>P1 P2 Dist</code></pre><p>where <code>P1</code> and <code>P2</code> are the two ends of a road which can be either house numbers or gas station numbers, and <code>Dist</code> is the integer length of the road.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in the first line the index number of the best location. In the next line, print the minimum and the average distances between the solution and all the houses. The numbers in a line must be separated by a space and be accurate up to 1 decimal place. If the solution does not exist, simply output <code>No Solution</code>.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">4 3 11 51 2 21 4 21 G1 41 G2 32 3 22 G2 13 4 23 G3 24 G1 3G2 G1 1G3 G2 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">G12.0 3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">2 1 2 101 G1 92 G1 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">No Solution<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>加油站和居民房的编号都有可能为两位数，所以字符串数组起码要开 4 个大小。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1011</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> ds<span class="token punctuation">,</span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> minD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minG <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">double</span> minAvgD <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'G'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        index <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'G'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">+</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fill</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> d <span class="token operator">+</span> maxn<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> vis <span class="token operator">+</span> maxn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> min <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                u <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> maxn <span class="token operator">*</span> maxn<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> dist<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %d"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>        v1 <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        v2 <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Dijkstra</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> tempAvgD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tempMinD <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> ds<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tempMinD <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tempMinD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tempMinD <span class="token operator">=</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tempAvgD <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempMinD <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempMinD <span class="token operator">></span> minD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minD <span class="token operator">=</span> tempMinD<span class="token punctuation">;</span>                minG <span class="token operator">=</span> i <span class="token operator">-</span> n<span class="token punctuation">;</span>                minAvgD <span class="token operator">=</span> tempAvgD<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tempMinD <span class="token operator">==</span> minD <span class="token operator">&amp;&amp;</span> tempAvgD <span class="token operator">&lt;</span> minAvgD<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minG <span class="token operator">=</span> i <span class="token operator">-</span> n<span class="token punctuation">;</span>                minAvgD <span class="token operator">=</span> tempAvgD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minG <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"G%d\n"</span><span class="token punctuation">,</span> minG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f %.1f"</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">*</span> minD<span class="token punctuation">,</span> minAvgD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 最短路径 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1018 Public Bike Management (30分)</title>
      <link href="/2020/04/12/PAT/Advanced_Level/A1018/"/>
      <url>/2020/04/12/PAT/Advanced_Level/A1018/</url>
      
        <content type="html"><![CDATA[<p>There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may rent a bike at any station and return it to any other stations in the city.</p><p>The Public Bike Management Center (PBMC) keeps monitoring the real-time capacity of all the stations. A station is said to be in <strong>perfect</strong> condition if it is exactly half-full. If a station is full or empty, PBMC will collect or send bikes to adjust the condition of that station to perfect. And more, all the stations on the way will be adjusted as well.</p><p>When a problem station is reported, PBMC will always choose the shortest path to reach that station. If there are more than one shortest path, the one that requires the least number of bikes sent from PBMC will be chosen.</p><p><img src="/2020/04/12/PAT/Advanced_Level/A1018/213.jpeg" alt="Graph"></p><p>The above figure illustrates an example. The stations are represented by vertices and the roads correspond to the edges. The number on an edge is the time taken to reach one end station from another. The number written inside a vertex <em>S</em> is the current number of bikes stored at <em>S</em>. Given that the maximum capacity of each station is 10. To solve the problem at <em>S</em>3, we have 2 different shortest paths:</p><ol><li>PBMC -&gt; <em>S</em>1 -&gt; <em>S</em>3. In this case, 4 bikes must be sent from PBMC, because we can collect 1 bike from <em>S</em>1 and then take 5 bikes to <em>S</em>3, so that both stations will be in perfect conditions.</li><li>PBMC -&gt; <em>S</em>2 -&gt; <em>S</em>3. This path requires the same time as path 1, but only 3 bikes sent from PBMC and hence is the one that will be chosen.</li></ol><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains 4 numbers: Cmax (≤100), always an even number, is the maximum capacity of each station; N (≤500), the total number of stations; Sp, the index of the problem station (the stations are numbered from 1 to N, and PBMC is represented by the vertex 0); and M, the number of roads. The second line contains N non-negative numbers Ci (i=1,⋯,N) where each Ci is the current number of bikes at Si respectively. Then M lines follow, each contains 3 numbers: Si, Sj, and Tij which describe the time Tij taken to move betwen stations Si and Sj. All the numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print your results in one line. First output the number of bikes that PBMC must send. Then after one space, output the path in the format: 0−&gt;S1−&gt;⋯−&gt;Sp. Finally after another space, output the number of bikes that we must take back to PBMC after the condition of Sp is adjusted to perfect.</p><p>Note that if such a path is not unique, output the one that requires minimum number of bikes that we must take back to PBMC. The judge’s data guarantee that such a path is unique.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">10 3 3 56 7 00 1 10 2 10 3 31 3 12 3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">3 0->2->3 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>在更新 minNeed 的时候，别忘了更新相应的 minBack</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> cmax<span class="token punctuation">,</span> n<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> m<span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> minNeed <span class="token operator">=</span> INF<span class="token punctuation">,</span> minBack <span class="token operator">=</span> INF<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fill</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> t <span class="token operator">+</span> maxn<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> min <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                u <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                    path<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    path<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    path<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> need <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> cmax <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">>=</span> <span class="token punctuation">(</span>cmax <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    now <span class="token operator">-</span><span class="token operator">=</span> cmax <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    need <span class="token operator">+</span><span class="token operator">=</span> cmax <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>                    now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                now <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> cmax <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">&lt;</span> minNeed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            minNeed <span class="token operator">=</span> need<span class="token punctuation">;</span>            minBack <span class="token operator">=</span> now<span class="token punctuation">;</span>            ans <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">==</span> minNeed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> minBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minBack <span class="token operator">=</span> now<span class="token punctuation">;</span>                ans <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmax<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> maxn <span class="token operator">*</span> maxn<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">[</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> minNeed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> minBack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 最短路径 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（9）：Dubbo服务开发（支付模块开发）</title>
      <link href="/2020/04/11/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/9.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%889%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/"/>
      <url>/2020/04/11/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/9.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%889%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>完成支付模块业务开发</li><li>Dubbo 特性学习：隐式参数、参数验证等</li></ul><h1 id="Dubbo-本地存根"><a href="#Dubbo-本地存根" class="headerlink" title="Dubbo 本地存根"></a>Dubbo 本地存根</h1><ul><li>本地存根类似于 Dubbo 的静态代理</li><li>Dubbo 会在客户端生成一个代理，处理部分业务</li><li>Stub 必须有可传入 Proxy 的构造函数</li></ul><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/local-stub.html</a></p></blockquote><p>远程服务后，客户端通常只剩下接口，而实现全在服务器端，但提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 Stub，客户端生成 Proxy 实例，会把 Proxy 通过构造函数传给 Stub，然后把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。</p><p><img src="/2020/04/11/Dubbo/Dubbo微服务影院系列/9.Dubbo服务开发（支付模块开发）/Dubbo微服务影院系列（9）：Dubbo服务开发（支付模块开发）/stub.jpg" alt="Dubbo本地存根"></p><p>在 spring 配置文件中按以下方式配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">stub</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">stub</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarServiceStub<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提供 Stub 的实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BarServiceStub</span> <span class="token keyword">implements</span> <span class="token class-name">BarService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BarService barService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数传入真正的远程代理对象</span>    <span class="token keyword">public</span> <span class="token function">BarServiceStub</span><span class="token punctuation">(</span>BarService barService<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>barService <span class="token operator">=</span> barService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> barService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 你可以容错，可以做任何AOP拦截事项</span>            <span class="token keyword">return</span> <span class="token string">"容错数据"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Stub 必须有可传入 Proxy 的构造函数。</li><li>在 interface 旁边放一个 Stub 实现，它实现 BarService 接口，并有一个传入远程 BarService 实例的构造函数</li></ol><h1 id="Dubbo-本地伪装"><a href="#Dubbo-本地伪装" class="headerlink" title="Dubbo 本地伪装"></a>Dubbo 本地伪装</h1><ul><li>本地伪装是本地存根的一个子集</li><li>通常会使用本地伪装处理服务降级</li><li>建议本地伪装在客户端实现</li></ul><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/local-mock.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/local-mock.html</a></p></blockquote><p>本地伪装通常用于服务降级，比如某验权服务，当服务提供方全部挂掉后，客户端不抛出异常，而是通过 Mock 数据返回授权失败。</p><p>在 spring 配置文件中按以下方式配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarServiceMock<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在工程中提供 Mock 实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BarServiceMock</span> <span class="token keyword">implements</span> <span class="token class-name">BarService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 你可以伪造容错数据，此方法只在出现RpcException时被执行</span>        <span class="token keyword">return</span> <span class="token string">"容错数据"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果服务的消费方经常需要 try-catch 捕获异常，如：</p><pre class="line-numbers language-java"><code class="language-java">Offer offer <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    offer <span class="token operator">=</span> offerService<span class="token punctuation">.</span><span class="token function">findOffer</span><span class="token punctuation">(</span>offerId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RpcException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请考虑改为 Mock 实现，并在 Mock 实现中 return null。如果只是想简单的忽略异常，在 <code>2.0.11</code> 以上版本可用：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return null<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>使用 <code>return</code> 来返回一个字符串表示的对象，作为 Mock 的返回值。合法的字符串可以是：</p><ul><li><em>empty</em>: 代表空，基本类型的默认值，或者集合类的空值</li><li><em>null</em>: <code>null</code></li><li><em>true</em>: <code>true</code></li><li><em>false</em>: <code>false</code></li><li><em>JSON 格式</em>: 反序列化 JSON 所得到的对象</li></ul><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>使用 <code>throw</code> 来返回一个 Exception 对象，作为 Mock 的返回值。</p><p>当调用出错时，抛出一个默认的 RPCException:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>throw<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当调用出错时，抛出指定的 Exception：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>throw com.foo.MockException<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="force-和-fail"><a href="#force-和-fail" class="headerlink" title="force 和 fail"></a>force 和 fail</h3><p>在 <code>2.6.6</code> 以上的版本，可以开始在 Spring XML 配置文件中使用 <code>fail:</code> 和 <code>force:</code>。<code>force:</code> 代表强制使用 Mock 行为，在这种情况下不会走远程调用。<code>fail:</code> 与默认行为一致，只有当远程调用发生错误时才使用 Mock 行为。<code>force:</code> 和 <code>fail:</code> 都支持与 <code>throw</code> 或者 <code>return</code> 组合使用。</p><p>强制返回指定值：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>force:return fake<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制抛出指定异常：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">mock</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>force:throw com.foo.MockException<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在方法级别配置-Mock"><a href="#在方法级别配置-Mock" class="headerlink" title="在方法级别配置 Mock"></a>在方法级别配置 Mock</h3><p>Mock 可以在方法级别上指定，假定 <code>com.foo.BarService</code> 上有好几个方法，我们可以单独为 <code>sayHello()</code> 方法指定 Mock 行为。具体配置如下所示，在本例中，只要 <code>sayHello()</code> 被调用到时，强制返回 “fake”:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>parameter</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHello.mock<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>force:return fake<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>Mock 是 Stub 的一个子集，便于服务提供方在客户端执行容错逻辑，因经常需要在出现 RpcException (比如网络失败，超时等)时进行容错，而在出现业务异常(比如登录用户名密码错误)时不需要容错，如果用 Stub，可能就需要捕获并依赖 RpcException 类，而用 Mock 就可以不依赖 RpcException，因为它的约定就是只有出现 RpcException 时才执行。 </li><li>在 interface 旁放一个 Mock 实现，它实现 BarService 接口，并有一个无参构造函数。</li></ol><p>在使用 SpringBoot + Dubbo 的项目中，优先使用 Hystrix 提供的熔断降级，因为 <strong>Mock 只能捕获 RpcException (比如网络失败，超时等)</strong>，而不能捕获 Java 异常。</p><h1 id="Dubbo-隐式参数"><a href="#Dubbo-隐式参数" class="headerlink" title="Dubbo 隐式参数"></a>Dubbo 隐式参数</h1><ul><li>Dubbo 提供了参数的隐式传递</li><li>Dubbo 的隐式参数仅单次调用可用</li><li>注意隐式参数的保留字段</li></ul><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/attachment.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/attachment.html</a></p></blockquote><p>可以通过 <code>RpcContext</code> 上的 <code>setAttachment</code> 和 <code>getAttachment</code> 在服务消费方和提供方之间进行参数的隐式传递。</p><p><img src="/2020/04/11/Dubbo/Dubbo微服务影院系列/9.Dubbo服务开发（支付模块开发）/Dubbo微服务影院系列（9）：Dubbo服务开发（支付模块开发）/context.png" alt="/user-guide/images/context.png"></p><h2 id="在服务消费方端设置隐式参数"><a href="#在服务消费方端设置隐式参数" class="headerlink" title="在服务消费方端设置隐式参数"></a>在服务消费方端设置隐式参数</h2><p><code>setAttachment</code> 设置的 KV 对，在完成下面一次远程调用会被清空，即多次远程调用要多次设置。</p><pre class="line-numbers language-xml"><code class="language-xml">RpcContext.getContext().setAttachment("index", "1"); // 隐式传参，后面的远程调用都会隐式将这些参数发送到服务器端，类似cookie，用于框架集成，不建议常规业务使用xxxService.xxx(); // 远程调用// ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="在服务提供方端获取隐式参数"><a href="#在服务提供方端获取隐式参数" class="headerlink" title="在服务提供方端获取隐式参数"></a>在服务提供方端获取隐式参数</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">XxxService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取客户端隐式传入的参数，用于框架集成，不建议常规业务使用</span>        String index <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttachment</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>注意：path, group, version, dubbo, token, timeout 几个 key 是保留字段，请使用其它值。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Dubbo 特性之隐式参数</li><li>Dubbo 特性之本地存根和本地伪装（更常用）</li><li>支付宝当面付功能对接</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT考场 Dev C++ 5.10 配置</title>
      <link href="/2020/04/11/PAT/%E8%80%83%E8%AF%95%E6%94%BB%E7%95%A5/%E8%80%83%E5%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/11/PAT/%E8%80%83%E8%AF%95%E6%94%BB%E7%95%A5/%E8%80%83%E5%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>根据往年 (2019) 年浙大软件学院的考研复试公告，如果今年 (2020) 是线下复试，且考场没有变化的话，机试应该还是在 <code>浙大紫金港校区</code>（如下图）。</p><blockquote><p>浙大软院招生通知：<a href="http://www.cst.zju.edu.cn/2019/0307/c36207a1478348/page.htm" target="_blank" rel="noopener">http://www.cst.zju.edu.cn/2019/0307/c36207a1478348/page.htm</a></p></blockquote><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411162644696.png" alt="软件学院2019年统考研究生招生复试安排"></p><p>从 PAT 官网可以找到紫金港的机房配置：</p><blockquote><p>PAT 考点联盟：<a href="https://www.patest.cn/location" target="_blank" rel="noopener">https://www.patest.cn/location</a></p></blockquote><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/PAT紫金港配置.png" alt="PAT紫金港配置.png"></p><p>我本人选择使用 <code>Dev C++ 5.10</code> 版本，考试那天在考场需要先对其作以下配置（当然也许已经配置好了）：</p><h1 id="打开产生调试信息"><a href="#打开产生调试信息" class="headerlink" title="打开产生调试信息"></a>打开产生调试信息</h1><p>在 <code>“工具(Tools)”</code> -&gt; <code>“编译选项(Compiler Options)&quot;</code> 中：</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411163457056.png" alt="编译选项"></p><p>点击 <code>“代码生成/优化(Settings)”</code> 选项卡中的 <code>&quot;连接器(Linker)&quot;</code> 选项卡，将 <code>&quot;产生调试信息(Generate debugging information)&quot;</code> 选项改为 <code>“Yes”</code>。</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411163800036.png" alt="产生调试信息"></p><p>这样，就可以愉快的 Debug 了～</p><h1 id="添加-C-11-支持"><a href="#添加-C-11-支持" class="headerlink" title="添加 C++ 11 支持"></a>添加 C++ 11 支持</h1><p>由于 PAT 的 OJ 是支持 C++ 11 的，故最好打开 C++ 11 支持。</p><h2 id="方法一（推荐）"><a href="#方法一（推荐）" class="headerlink" title="方法一（推荐）"></a>方法一（推荐）</h2><p>在 <code>“工具(Tools)”</code> -&gt; <code>“编译选项(Compiler Options)&quot;</code> 中，<code>“代码生成/优化(Settings)”</code> 选项卡下的 <code>“代码生成(Code Generation)”</code> 选项卡中，将 <code>“语言标准(Language Standard)(-std)”</code> 设置为 <code>ISO C++11</code> 即可。</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411180355580.png" alt="语言标准"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>同样，也可以在<code>“工具(Tools)”</code> -&gt; <code>“编译选项(Compiler Options)&quot;</code>中，在<code>&quot;编译器(General)&quot;</code>选项卡中，勾选<code>&quot;编译时加入以下命令：(Add the following commands when calling the compiler:)&quot;</code>，并在下方加入 <code>-std=c++11</code>。</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411164259368.png" alt="C++ 11 支持"></p><h1 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h1><p>由于默认字体是 10，实在太小了不能接受，可以在 <code>“工具(Tools)”</code> -&gt; <code>“编译器选项(Editor Options)&quot;</code> 中的<code>&quot;显示(Fonts)&quot;</code>选项卡，修改字体<code>大小(Size)</code>。或者通过 <code>Ctrl + 滚轮</code> 修改字体大小（更方便）。</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411164704403.png" alt="字体大小"></p><h1 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h1><h2 id="打开代码补全"><a href="#打开代码补全" class="headerlink" title="打开代码补全"></a>打开代码补全</h2><p>Dev C++ 是有一定的代码补全功能的，在<code>“工具(Tools)”</code> -&gt; <code>“编译器选项(Editor Options)&quot;</code>中，在 <code>“代码补全(Completion)”</code> 选项卡下的 <code>Code Completion</code> 选项卡中，将所有勾勾上即可。</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411171339011.png" alt="代码补全"></p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411171544336.png" alt="代码补全效果"></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>同时，可以通过<code>“工具(Tools)”</code> -&gt; <code>“快捷键选项(Configure Shortcuts)”</code> 来配置 <code>Show Code Completion</code> 的快捷键以唤出代码补全（默认为 Ctrl + Space）：</p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411171955523.png" alt="代码补全快捷键"></p><p><img src="/2020/04/11/PAT/考试攻略/考场环境配置/image-20200411172339097.png" alt="代码补全快捷键效果"></p><p>然后，就可以愉快地考试了～</p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 考试相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1021 Deepest Root (25分)</title>
      <link href="/2020/04/10/PAT/Advanced_Level/A1021/"/>
      <url>/2020/04/10/PAT/Advanced_Level/A1021/</url>
      
        <content type="html"><![CDATA[<p>A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called <strong>the deepest root</strong>.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤10^4) which is the number of nodes, and hence the nodes are numbered from 1 to <em>N</em>. Then <em>N</em>−1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print <code>Error: K components</code> where <code>K</code> is the number of connected components in the graph.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">51 21 31 42 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">51 31 42 53 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">Error: 2 components<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>以每个未访问的结点为根结点进行 DFS，可以求出该图的连通分量，若不为 1，则表示不为树。同时，将以第一个结点作为树的根结点进行 DFS 时所得到的最高高度的相应叶子结点插入 set 集合 ans 中，此为第一个结点集合。在第一个集合中随机选取一个结点作为根结点（这里选取了 ans 集合中的第一个元素），再次进行一遍 DFS，得到第二个结点集合。这两个结点集合的并集，即为题目所求最深根结点。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vis<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">></span> maxLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxLevel <span class="token operator">=</span> level<span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> maxLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %d components"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1013 Battle Over Cities (25分)</title>
      <link href="/2020/04/09/PAT/Advanced_Level/A1013/"/>
      <url>/2020/04/09/PAT/Advanced_Level/A1013/</url>
      
        <content type="html"><![CDATA[<p>It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly.</p><p>For example, if we have 3 cities and 2 highways connecting city1-city2 and city1-city3. Then if city1 is occupied by the enemy, we must have 1 highway repaired, that is the highway city2-city3.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case starts with a line containing 3 numbers <em>N</em> (&lt;1000), <em>M</em> and <em>K</em>, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then <em>M</em> lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to <em>N</em>. Finally there is a line containing <em>K</em> numbers, which represent the cities we concern.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each of the <em>K</em> cities, output in a line the number of highways need to be repaired if that city is lost.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">3 2 31 21 31 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>可能原图就是不连通的，所以需要对每个顶点进行 DFS</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> q<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vis<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> q <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">[</span>G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> q <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1032 Sharing (25分)</title>
      <link href="/2020/04/07/PAT/Advanced_Level/A1032/"/>
      <url>/2020/04/07/PAT/Advanced_Level/A1032/</url>
      
        <content type="html"><![CDATA[<p>To store English words, one method is to use linked lists and store a word letter by letter. To save some space, we may let the words share the same sublist if they share the same suffix. For example, <code>loading</code> and <code>being</code> are stored as showed in Figure 1.</p><p><img src="/2020/04/07/PAT/Advanced_Level/A1032/ef0a1fdf-3d9f-46dc-9a27-21f989270fd4.jpg" alt="Figure 1"></p><p>You are supposed to find the starting position of the common suffix (e.g. the position of <code>i</code> in Figure 1).</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains two addresses of nodes and a positive <em>N</em> (≤ 10^5), where the two addresses are the addresses of the first nodes of the two words, and <em>N</em> is the total number of nodes. The address of a node is a 5-digit positive integer, and NULL is represented by −1.</p><p>Then <em>N</em> lines follow, each describes a node in the format:</p><pre><code>Address Data Next</code></pre><p>where<code>Address</code> is the position of the node, <code>Data</code> is the letter contained by this node which is an English letter chosen from { a-z, A-Z }, and <code>Next</code> is the position of the next node.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each case, simply output the 5-digit starting position of the common suffix. If the two words have no common suffix, output <code>-1</code> instead.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">11111 22222 967890 i 0000200010 a 1234500003 g -112345 D 6789000002 n 0000322222 B 2345611111 L 0000123456 e 6789000001 o 00010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">67890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">00001 00002 400001 a 1000110001 s -100002 a 1000210002 t -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">-1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>由于地址的范围较小，可以使用静态链表。并根据题意，为链表节点结构体增加一个 flag 变量，用于表示该节点是否在第一条链表中，默认为 false。先由第一条链表的首地址出发，遍历第一条链表，并将其节点的 flag 都设为 true。当遍历第二条链表时，只需输出第一个 flag 为true 的节点的地址即可。</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>使用 %05d 格式输出地址，使其高位补 0。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node <span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">int</span> next<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> nodes<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> root1<span class="token punctuation">,</span> root2<span class="token punctuation">,</span> n<span class="token punctuation">,</span> address<span class="token punctuation">,</span> next<span class="token punctuation">;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>root1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>root2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span>address<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> root1<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodes<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> nodes<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cur <span class="token operator">=</span> root2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> nodes<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1056 Mice and Rice (25分)</title>
      <link href="/2020/04/06/PAT/Advanced_Level/A1056/"/>
      <url>/2020/04/06/PAT/Advanced_Level/A1056/</url>
      
        <content type="html"><![CDATA[<p><strong>Mice and Rice</strong> is the name of a programming contest in which each programmer must write a piece of code to control the movements of a mouse in a given map. The goal of each mouse is to eat as much rice as possible in order to become a FatMouse.</p><p>First the playing order is randomly decided for N <sub>P</sub> programmers. Then every N <sub>G</sub> programmers are grouped in a match. The fattest mouse in a group wins and enters the next turn. All the losers in this turn are ranked the same. Every N <sub>G</sub> winners are then grouped in the next match until a final winner is determined.</p><p>For the sake of simplicity, assume that the weight of each mouse is fixed once the programmer submits his/her code. Given the weights of all the mice and the initial playing order, you are supposed to output the ranks for the programmers.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: N <sub>P</sub> and N <sub>G</sub> (≤1000), the number of programmers and the maximum number of mice in a group, respectively. If there are less than N <sub>G</sub> mice at the end of the player’s list, then all the mice left will be put into the last group. The second line contains N <sub>P</sub> distinct non-negative numbers W <sub>i</sub> (<em>i</em>=0,⋯,N <sub>P</sub> − 1) where each W <sub>i</sub> is the weight of the <em>i</em>-th mouse respectively. The third line gives the initial playing order which is a permutation of 0,⋯,N <sub>P</sub> − 1 (assume that the programmers are numbered from 0 to N <sub>P</sub> - 1). All the numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print the final ranks in a line. The <em>i</em>-th number is the rank of the <em>i</em>-th programmer, and all the numbers must be separated by a space, with no extra space at the end of the line.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">11 325 18 0 46 37 3 19 22 57 56 106 0 8 7 10 5 9 1 4 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">5 5 5 2 5 5 5 3 1 3 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>在计算当前循环所要确定的排名时，需要分为是否能整除两种情况：</p><ol><li>如果剩下还未确定排名的数量（len）不能整除每组的人数（ng），则该轮循环可以确定的排名是 len / ng + 2</li><li>否则，该轮循环可以确定的排名是 len / ng + 1</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> np<span class="token punctuation">,</span> ng<span class="token punctuation">,</span> index<span class="token punctuation">,</span> w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> rank<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>np<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ng<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> np<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> np<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nowRank<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">%</span> ng <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nowRank <span class="token operator">=</span> len <span class="token operator">/</span> ng <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            nowRank <span class="token operator">=</span> len <span class="token operator">/</span> ng <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> ng<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxW <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> maxI <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> ng <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tempI <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>tempI<span class="token punctuation">]</span> <span class="token operator">></span> maxW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxW <span class="token operator">=</span> w<span class="token punctuation">[</span>tempI<span class="token punctuation">]</span><span class="token punctuation">;</span>                    maxI <span class="token operator">=</span> tempI<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                rank<span class="token punctuation">[</span>tempI<span class="token punctuation">]</span> <span class="token operator">=</span> nowRank<span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>maxI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        len <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rank<span class="token punctuation">[</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> np<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> np <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1100 Mars Numbers (20分)</title>
      <link href="/2020/04/06/PAT/Advanced_Level/A1100/"/>
      <url>/2020/04/06/PAT/Advanced_Level/A1100/</url>
      
        <content type="html"><![CDATA[<p>People on Mars count their numbers with base 13:</p><ul><li>Zero on Earth is called “tret” on Mars.</li><li>The numbers 1 to 12 on Earth is called “jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec” on Mars, respectively.</li><li>For the next higher digit, Mars people name the 12 numbers as “tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou”, respectively.</li></ul><p>For examples, the number 29 on Earth is called “hel mar” on Mars; and “elo nov” on Mars corresponds to 115 on Earth. In order to help communication between people from these two planets, you are supposed to write a program for mutual translation between Earth and Mars number systems.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (&lt;100). Then <em>N</em> lines follow, each contains a number in [0, 169), given either in the form of an Earth number, or that of Mars.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each number, print in a line the corresponding number in the other language.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">4295elo novtam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">hel marmay11513<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>直接针对给出的输入进行模拟会相对复杂，考虑到数据范围最多不超过168，因此不妨将 [0, 168] 的所有数都预处理出来（即打表），然后查询一个输出一个即可。</p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>由于个位或十位为 0 时，不应该将其输出为 “tret”，所以在大表时，应该将个位或十位为 0 的数与其他数分开考虑。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string unitDigit<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tret"</span><span class="token punctuation">,</span> <span class="token string">"jan"</span><span class="token punctuation">,</span> <span class="token string">"feb"</span><span class="token punctuation">,</span> <span class="token string">"mar"</span><span class="token punctuation">,</span> <span class="token string">"apr"</span><span class="token punctuation">,</span> <span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token string">"jun"</span><span class="token punctuation">,</span> <span class="token string">"jly"</span><span class="token punctuation">,</span> <span class="token string">"aug"</span><span class="token punctuation">,</span> <span class="token string">"sep"</span><span class="token punctuation">,</span> <span class="token string">"oct"</span><span class="token punctuation">,</span> <span class="token string">"nov"</span><span class="token punctuation">,</span> <span class="token string">"dec"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string tenDigit<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tret"</span><span class="token punctuation">,</span> <span class="token string">"tam"</span><span class="token punctuation">,</span> <span class="token string">"hel"</span><span class="token punctuation">,</span> <span class="token string">"maa"</span><span class="token punctuation">,</span> <span class="token string">"huh"</span><span class="token punctuation">,</span> <span class="token string">"tou"</span><span class="token punctuation">,</span> <span class="token string">"kes"</span><span class="token punctuation">,</span> <span class="token string">"hei"</span><span class="token punctuation">,</span> <span class="token string">"elo"</span><span class="token punctuation">,</span> <span class="token string">"syy"</span><span class="token punctuation">,</span> <span class="token string">"lok"</span><span class="token punctuation">,</span> <span class="token string">"mer"</span><span class="token punctuation">,</span> <span class="token string">"jou"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> marsToNum<span class="token punctuation">;</span>string numToMars<span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        numToMars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> unitDigit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        marsToNum<span class="token punctuation">[</span>unitDigit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        numToMars<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> tenDigit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        marsToNum<span class="token punctuation">[</span>tenDigit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string mars <span class="token operator">=</span> tenDigit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> unitDigit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            numToMars<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">13</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> mars<span class="token punctuation">;</span>            marsToNum<span class="token punctuation">[</span>mars<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">13</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string str<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> numToMars<span class="token punctuation">[</span><span class="token function">stoi</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> marsToNum<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（8）：Dubbo服务开发（订单模块开发）</title>
      <link href="/2020/04/05/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/8.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/"/>
      <url>/2020/04/05/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/8.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>完成订单模块业务开发</li><li>完成限流和熔断、降级相关内容</li><li>Dubbo 特性之分组、聚合和版本控制</li></ul><h1 id="订单模块问题"><a href="#订单模块问题" class="headerlink" title="订单模块问题"></a>订单模块问题</h1><ul><li>订单模块的横向和纵向分表如何解决？</li><li>服务限流如何处理？</li><li>服务熔断和降级？</li><li>如何保证多版本的蓝绿上线？</li></ul><h1 id="横向拆分和纵向拆分"><a href="#横向拆分和纵向拆分" class="headerlink" title="横向拆分和纵向拆分"></a>横向拆分和纵向拆分</h1><p><img src="/2020/04/05/Dubbo/Dubbo微服务影院系列/8.Dubbo服务开发（订单模块开发）/Dubbo微服务影院系列（8）：Dubbo服务开发（订单模块开发）/image-20200408000355380.png" alt="横向拆分和纵向拆分"></p><h1 id="Dubbo-服务分组"><a href="#Dubbo-服务分组" class="headerlink" title="Dubbo 服务分组"></a>Dubbo 服务分组</h1><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/service-group.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/service-group.html</a></p></blockquote><p>当一个接口有多种实现时，可以用 group 区分。</p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feedback<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.IndexService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>member<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.IndexService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feedbackIndexService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feedback<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.IndexService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>memberIndexService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>member<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.IndexService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>任意组：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>barService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Dubbo-分组聚合"><a href="#Dubbo-分组聚合" class="headerlink" title="Dubbo 分组聚合"></a>Dubbo 分组聚合</h1><blockquote><p><a href="https://dubbo.apache.org/zh-cn/docs/user/demos/group-merger.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/group-merger.html</a></p></blockquote><p>按组合并返回结果，比如菜单服务，接口一样，但有多种实现，用 group 区分，现在消费方需从每种 group 中调用一次返回结果，合并结果返回，这样就可以实现聚合菜单项。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>搜索所有分组</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.MenuService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并指定分组</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.MenuService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa,bbb<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定方法合并结果，其它未指定的方法，将只调用一个 Group</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.MenuService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMenuItems<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>某个方法不合并结果，其它都合并结果</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.MenuService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMenuItems<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指定合并策略，缺省根据返回值类型自动匹配，如果同一类型有两个合并器时，需指定合并器的名称</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.MenuService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMenuItems<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mymerge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指定合并方法，将调用返回结果的指定方法进行合并，合并方法的参数类型必须是返回结果类型本身</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.MenuService<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMenuItems<span class="token punctuation">"</span></span> <span class="token attr-name">merger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.addAll<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Dubbo-多版本"><a href="#Dubbo-多版本" class="headerlink" title="Dubbo 多版本"></a>Dubbo 多版本</h1><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><ol><li>在低压力时间段，先升级一半提供者为新版本</li><li>再将所有消费者升级为新版本</li><li>然后将剩下的一半提供者升级为新版本</li></ol><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>老版本服务提供者配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新版本服务提供者配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>老版本服务消费者配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>barService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新版本服务消费者配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>barService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不需要区分版本，可以按照以下的方式配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>barService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="限流思路"><a href="#限流思路" class="headerlink" title="限流思路"></a>限流思路</h1><ul><li>限流措施是系统高可用的一种手段</li><li>使用并发与连接控制进行限流</li><li>使用<strong>漏桶算法（Leaky Bucket）</strong>和<strong>令牌桶算法（Token Bucket）</strong>算法进行限流</li></ul><h2 id="漏桶算法（Leaky-Bucket）"><a href="#漏桶算法（Leaky-Bucket）" class="headerlink" title="漏桶算法（Leaky Bucket）"></a>漏桶算法（Leaky Bucket）</h2><p><img src="/2020/04/05/Dubbo/Dubbo微服务影院系列/8.Dubbo服务开发（订单模块开发）/Dubbo微服务影院系列（8）：Dubbo服务开发（订单模块开发）/rate-limit1.png" alt="漏桶法"></p><h2 id="令牌桶算法（Token-Bucket）"><a href="#令牌桶算法（Token-Bucket）" class="headerlink" title="令牌桶算法（Token Bucket）"></a>令牌桶算法（Token Bucket）</h2><p><img src="/2020/04/05/Dubbo/Dubbo微服务影院系列/8.Dubbo服务开发（订单模块开发）/Dubbo微服务影院系列（8）：Dubbo服务开发（订单模块开发）/token_bucket.JPG" alt="令牌桶"></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>漏桶算法以均匀的速度处理请求，不需要承载较高的访问峰值</li><li>令牌桶算法则可能在短时间内处理大量请求，所以需要可以承载较高的访问峰值</li></ul><h2 id="令牌桶算法实现"><a href="#令牌桶算法实现" class="headerlink" title="令牌桶算法实现"></a>令牌桶算法实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 桶的容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bucketNums <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 流入速度     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前令牌数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nowTokens<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上次刷新当前令牌数的时间     */</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTime <span class="token operator">=</span> <span class="token function">getNowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getNowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录当前时间</span>        <span class="token keyword">long</span> nowTime <span class="token operator">=</span> <span class="token function">getNowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 刷新令牌</span>        nowTokens <span class="token operator">+=</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span> <span class="token operator">*</span> rate<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若令牌数比桶容量大，则改为桶容量</span>        nowTokens <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>bucketNums<span class="token punctuation">,</span> nowTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前令牌数："</span> <span class="token operator">+</span> nowTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改上次刷新令牌数的时间为当前时间</span>        lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断令牌是否足够</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTokens <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nowTokens<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Hystrix-熔断降级"><a href="#Hystrix-熔断降级" class="headerlink" title="Hystrix 熔断降级"></a>Hystrix 熔断降级</h1><p><img src="/2020/04/05/Dubbo/Dubbo微服务影院系列/8.Dubbo服务开发（订单模块开发）/Dubbo微服务影院系列（8）：Dubbo服务开发（订单模块开发）/hystrix-command-flow-chart.png" alt="Hystrix 熔断降级"></p><p>网关模块添加依赖：</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GatewayApplication 添加注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token annotation punctuation">@EnableHystrix</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>给需要熔断器的控制器方法添加注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">,</span>            commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.strategy"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"THREAD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"4000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"coreSize"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"maxQueueSize"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"keepAliveTimeMinutes"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"queueSizeRejectionThreshold"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.numBuckets"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"metrics.rollingStats.timeInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"1500"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义 fallbackMethod 方法，用于服务降级：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ResponseVO <span class="token function">error</span><span class="token punctuation">(</span>Integer fieldId<span class="token punctuation">,</span> String soldSeats<span class="token punctuation">,</span> String seatsName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ResponseVO<span class="token punctuation">.</span><span class="token function">serviceFail</span><span class="token punctuation">(</span><span class="token string">"抱歉，下单的人太多了，请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>学习了限流措施以及实现方法（在真实业务环境中，可能会根据请求的字节数大小分配 TokenBucket）</li><li>掌握了 Dubbo 的分组聚合、版本控制</li><li>留下一个思考，如何处理事务？假如，下订单时，将 1. 验证所购买的票是否为真和 2. 检查所购买的票是否已售出，这两个 service 接口改为异步调用（因为要连接 FTP 和读取文件，速度较慢），那么可能还没有调用结束，就已经生成了订单……但是如果异步调用的验证结果不为真，该怎么办？这时候就需要事务来保证 ACID 了。那么应该如何处理分布式事务呢？且看下回分解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1060 Are They Equal (25分)</title>
      <link href="/2020/04/04/PAT/Advanced_Level/A1060/"/>
      <url>/2020/04/04/PAT/Advanced_Level/A1060/</url>
      
        <content type="html"><![CDATA[<p>If a machine can save only 3 significant digits, the float numbers 12300 and 12358.9 are considered equal since they are both saved as 0.123×105 with simple chopping. Now given the number of significant digits on a machine and two float numbers, you are supposed to tell if they are treated equal in that machine.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case which gives three numbers <em>N</em>, <em>A</em> and <em>B</em>, where <em>N</em> (&lt;100) is the number of significant digits, and <em>A</em> and <em>B</em> are the two float numbers to be compared. Each float number is non-negative, no greater than 10100, and that its total digit number is less than 100.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in a line <code>YES</code> if the two numbers are treated equal, and then the number in the standard form <code>0.d[1]...d[N]*10^k</code> (<code>d[1]</code>&gt;0 unless the number is 0); or <code>NO</code> if they are not treated equal, and then the two numbers in their standard form. All the terms must be separated by a space, with no extra space at the end of a line.</p><p>Note: Simple chopping is assumed without rounding.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">3 12300 12358.9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">YES 0.123*10^5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">3 120 128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">NO 0.120*10^3 0.128*10^3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>按整数部分是否为 0 来分情况讨论，求出本体和指数，然后判断两者是否都相等：</p><ol><li>整数部分为 0：由于在小数点后面还可能跟着若干个 0，因此本体部分是从小数点后第一个非零位开始的部分（不足 n 位则补 0），指数则是小数点与该非零位之间的 0 的个数的相反数。</li><li>整数部分不为 0：本体部分是去掉小数点后的第一个非零位开始的 n 个字符（不足 n 位则补 0），指数则是小数点或最后一位（如没有小数点）之前的非零位数。</li></ol><p>不管是哪种情况，如果有小数点，都需要把小数点去掉，这样才能输出正确的本体。</p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>此题有一个陷阱：数据有可能出现前导 0，应该先去除前导零，然后再根据首位是否为小数点来判断是情况 1，还是情况2。</li><li>去除前导零后，若字符串长度为 0，则代表该数为 0，应将指数值为 0，否则有可能因小数点后全为 0 的情况，指数变为负数。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">chopping</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">==</span> string<span class="token operator">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> e1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> e2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">chopping</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chopping</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> e1 <span class="token operator">==</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" 0."</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"*10^"</span> <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" 0."</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"*10^"</span> <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" 0."</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">"*10^"</span> <span class="token operator">&lt;&lt;</span> e2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1039 Course List for Student (25分)</title>
      <link href="/2020/04/03/PAT/Advanced_Level/A1039/"/>
      <url>/2020/04/03/PAT/Advanced_Level/A1039/</url>
      
        <content type="html"><![CDATA[<p>Zhejiang University has 40000 students and provides 2500 courses. Now given the student name lists of all the courses, you are supposed to output the registered course list for each student who comes for a query.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: <em>N</em> (≤40,000), the number of students who look for their course lists, and <em>K</em> (≤2,500), the total number of courses. Then the student name lists are given for the courses (numbered from 1 to <em>K</em>) in the following format: for each course <em>i</em>, first the course index <em>i</em> and the number of registered students N <sub>i</sub> (≤200) are given in a line. Then in the next line, N <sub>i</sub> student names are given. A student name consists of 3 capital English letters plus a one-digit number. Finally the last line contains the <em>N</em> names of students who come for a query. All the names and numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print your results in <em>N</em> lines. Each line corresponds to one student, in the following format: first print the student’s name, then the total number of registered courses of that student, and finally the indices of the courses in increasing order. The query results must be printed in the same order as input. All the data in a line must be separated by a space, with no extra space at the end of the line.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">11 54 7BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE11 4ANN0 BOB5 JAY9 LOR62 7ANN0 BOB5 FRA8 JAY9 JOE4 KAT3 LOR63 1BOB55 9AMY7 ANN0 BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1ZOE1 ANN0 BOB5 JOE4 JAY9 FRA8 DON2 AMY7 KAT3 LOR6 NON9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">ZOE1 2 4 5ANN0 3 1 2 5BOB5 5 1 2 3 4 5JOE4 1 2JAY9 4 1 2 4 5FRA8 3 2 4 5DON2 2 4 5AMY7 1 5KAT3 3 2 4 5LOR6 4 1 2 4 5NON9 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>本题最后一个测试点数据量比较大，使用 map, string 会导致超时，因此只能使用字符串 hash 进行求解，使用 vector<int> 数组或 set<int> 数组（自动排序课程号）。</int></int></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">26</span> <span class="token operator">*</span> <span class="token number">26</span> <span class="token operator">*</span> <span class="token number">26</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> course<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> id <span class="token operator">*</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    id <span class="token operator">=</span> id <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> index<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">[</span><span class="token function">getID</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">getID</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> course<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> course<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> course<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"% d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1096 Consecutive Factors (20分)</title>
      <link href="/2020/04/02/PAT/Advanced_Level/A1096/"/>
      <url>/2020/04/02/PAT/Advanced_Level/A1096/</url>
      
        <content type="html"><![CDATA[<p>Among all the factors of a positive integer N, there may exist several consecutive numbers. For example, 630 can be factored as 3×5×6×7, where 5, 6, and 7 are the three consecutive numbers. Now given any positive N, you are supposed to find the maximum number of consecutive factors, and list the smallest sequence of the consecutive factors.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case, which gives the integer N (1&lt;N&lt;2^{31}).</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in the first line the maximum number of consecutive factors. Then in the second line, print the smallest sequence of the consecutive factors in the format <code>factor[1]*factor[2]*...*factor[k]</code>, where the factors are listed in increasing order, and 1 is NOT included.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">630<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">35*6*7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>N 不会被自己以为的大于 $\sqrt{N}$ 的多个连续整数整除，因此只需要从 2 ～ $\sqrt{N}$ 遍历连续整数的第一个。</li><li>如果遍历结束后 ansLen 依然为 0，说明不超过 $\sqrt{N}$ 的整数中不存在能整除 N 的连续整数，因此答案就是 N 本身。此时输出特例，即连续个数为 1，因数为 N 本身。</li><li>需要用 long long，防止中间乘积超过 int 导致溢出。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ansI<span class="token punctuation">,</span> ansLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sqr <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sqr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">*</span><span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> ansLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ansLen <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    ansI <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ansLen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n%lld"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ansLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ansLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> ansI <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> ansLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1078 Hashing (25分)</title>
      <link href="/2020/04/02/PAT/Advanced_Level/A1078/"/>
      <url>/2020/04/02/PAT/Advanced_Level/A1078/</url>
      
        <content type="html"><![CDATA[<p>The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers. The hash function is defined to be H(key)=key%TSize where TSize is the maximum size of the hash table. Quadratic probing (with positive increments only) is used to solve the collisions.</p><p>Note that the table size is better to be prime. If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains two positive numbers: <strong>MSize</strong> (≤ 10^4 ) and <strong>N</strong> (≤MSize) which are the user-defined table size and the number of input numbers, respectively. Then N distinct positive integers are given in the next line. All the numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line. All the numbers in a line are separated by a space, and there must be no extra space at the end of the line. In case it is impossible to insert the number, print “-“ instead.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">4 410 6 4 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">0 1 4 -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>进行二次探测时，当 step 自增达到 TSize 时如果还没有找到可用位置，则表明这个元素无法被插入。</li><li>创建哈希表时数组大小应该尽量比 10^4 大一些，因为当寻找大于 MSize 的最小质数时可能超过 10^4。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tSize<span class="token punctuation">,</span> n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>tSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> num <span class="token operator">%</span> tSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> tSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> j <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> tSize<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> tSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" -"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1081 Rational Sum (20分)</title>
      <link href="/2020/04/01/PAT/Advanced_Level/A1081/"/>
      <url>/2020/04/01/PAT/Advanced_Level/A1081/</url>
      
        <content type="html"><![CDATA[<p>Given <em>N</em> rational numbers in the form <code>numerator/denominator</code>, you are supposed to calculate their sum.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case starts with a positive integer <em>N</em> (≤100), followed in the next line <em>N</em> rational numbers <code>a1/b1 a2/b2 ...</code> where all the numerators and denominators are in the range of <strong>long int</strong>. If there is a negative number, then the sign must appear in front of the numerator.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, output the sum in the simplest form <code>integer numerator/denominator</code> where <code>integer</code> is the integer part of the sum, <code>numerator</code> &lt; <code>denominator</code>, and the numerator and the denominator have no common factor. You must output only the fractional part if the integer part is 0.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">52/5 4/15 1/30 -2/60 8/3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">3 1/3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">24/3 2/3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h1><pre class="line-numbers language-in"><code class="language-in">31/3 -1/6 1/8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h1><pre class="line-numbers language-out"><code class="language-out">7/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>数据范围为 int，但是两个分母相乘时，可能超出 int，最大可以达到 long long，所以如果使用 int，就会溢出，得到“答案错误”</li><li>必须在每一步加法后都进行约分，如果等全部加完后才约分，则会溢出</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Num <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span> temp<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">simplify</span><span class="token punctuation">(</span>Num <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        n<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span>a <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">;</span>        n<span class="token punctuation">.</span>b <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Num <span class="token function">add</span><span class="token punctuation">(</span>Num <span class="token operator">&amp;</span>n1<span class="token punctuation">,</span> Num <span class="token operator">&amp;</span>n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Num ret<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span>a <span class="token operator">=</span> n1<span class="token punctuation">.</span>a <span class="token operator">*</span> n2<span class="token punctuation">.</span>b <span class="token operator">+</span> n2<span class="token punctuation">.</span>a <span class="token operator">*</span> n1<span class="token punctuation">.</span>b<span class="token punctuation">;</span>    ret<span class="token punctuation">.</span>b <span class="token operator">=</span> n1<span class="token punctuation">.</span>b <span class="token operator">*</span> n2<span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token function">simplify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %lld/%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ans<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ans<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">simplify</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld/%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>a <span class="token operator">></span> ans<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld/%lld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>a <span class="token operator">/</span> ans<span class="token punctuation">.</span>b<span class="token punctuation">,</span> ans<span class="token punctuation">.</span>a <span class="token operator">%</span> ans<span class="token punctuation">.</span>b<span class="token punctuation">,</span> ans<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld/%lld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>a<span class="token punctuation">,</span> ans<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1008 数组元素循环右移问题 (20分)</title>
      <link href="/2020/03/31/PAT/Basic_Level/B1008/"/>
      <url>/2020/03/31/PAT/Basic_Level/B1008/</url>
      
        <content type="html"><![CDATA[<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（A<sub>0</sub> A<sub>1</sub> ⋯A <sub>N−1</sub> ）变换为（A <sub>N−M</sub> ⋯A <sub>N−1</sub> A <sub>0</sub> A <sub>1</sub>⋯A  <sub>N−M−1</sub> ）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><pre class="line-numbers language-in"><code class="language-in">6 21 2 3 4 5 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><pre class="line-numbers language-out"><code class="language-out">5 6 1 2 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>如何让移动的次数最少：将序列中一个元素先拿出至临时变量，然后将空出的位置用将要移动到这个位置的元素代替，再把新空出的位置用将要移动到这个新空出的位置的元素代替，以此类推，知道所有元素移动完毕。</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>有可能经过一轮循环之后 N-M 号位之后有多个位置已经得到了最终结果，这样当继续枚举起始位时就会产生重复，最后导致错误。例如 N = 8，M = 3，这种情况下只需要枚举一次起始位。为了解决这个问题，要计算得到 N 和 M 的最大公约数，计为 d，那么 d 就表示需要循环轮数。那么从 N - M 号位开始枚举起始位，直到 N - M + d - 1 位结束即可。</li><li>当 M 经过 M % N 修正后，若 M == 0，则直接输出数组即可，否则会产生错误，超时。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">%</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m <span class="token operator">+</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> curIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curIndex <span class="token operator">-</span> m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> preIndex <span class="token operator">=</span> <span class="token punctuation">(</span>curIndex <span class="token operator">-</span> m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                curIndex <span class="token operator">=</span> preIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（7）：Dubbo服务开发（影院模块开发）</title>
      <link href="/2020/03/30/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/7.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E9%99%A2%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E9%99%A2%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/"/>
      <url>/2020/03/30/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/7.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E9%99%A2%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E9%99%A2%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>完成影院模块业务开发</li><li>修改全局异常返回</li><li>学习 Dubbo 特性：结果缓存，连接和并发控制</li></ul><h1 id="Dubbo-结果缓存"><a href="#Dubbo-结果缓存" class="headerlink" title="Dubbo 结果缓存"></a>Dubbo 结果缓存</h1><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/result-cache.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/result-cache.html</a></p></blockquote><p>用于加速热门数据的访问速度，Dubbo 提供声明式缓存，以减少用户加缓存的工作量。</p><h2 id="缓存类型"><a href="#缓存类型" class="headerlink" title="缓存类型"></a>缓存类型</h2><ul><li><code>lru</code> 基于最近最少使用原则删除多余缓存，保持最热的数据被缓存。</li><li><code>threadlocal</code> 当前线程缓存，比如一个页面渲染，用到很多 portal，每个 portal 都要去查用户信息，通过线程缓存，可以减少这种多余访问。</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">cache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lru<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findBar<span class="token punctuation">"</span></span> <span class="token attr-name">cache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lru<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>了解 Dubbo 结果缓存与 Redis 缓存等的区别：</p><ul><li>Dubbo 结果缓存是本地缓存，保存在当前 JVM 中，多台机器存储多份缓存。适合数据量小的数据，存储在本地占用资源少，而且速度较快。</li><li>Redis 缓存则是分布式缓存，多台机器共享缓存。</li><li>小数据量的可以放在 Dubbo 结果缓存中，需要计算和共享的缓存数据可以放在 Redis 中。</li></ul><h1 id="Dubbo-连接、并发控制"><a href="#Dubbo-连接、并发控制" class="headerlink" title="Dubbo 连接、并发控制"></a>Dubbo 连接、并发控制</h1><ul><li>Dubbo 可以对连接、并发数量进行控制</li><li>超出部分以错误形式返回</li></ul><h2 id="Dubbo-连接控制"><a href="#Dubbo-连接控制" class="headerlink" title="Dubbo 连接控制"></a>Dubbo 连接控制</h2><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/config-connections.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/config-connections.html</a></p></blockquote><h3 id="服务端连接控制"><a href="#服务端连接控制" class="headerlink" title="服务端连接控制"></a>服务端连接控制</h3><p>限制服务器端接受的连接不能超过 10 个：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">accepts</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">accepts</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="客户端连接控制"><a href="#客户端连接控制" class="headerlink" title="客户端连接控制"></a>客户端连接控制</h3><p>限制客户端服务使用连接不能超过 10 个（如果是长连接，比如 Dubbo 协议，connections 表示该服务对每个提供者建立的长连接数）：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">connections</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">connections</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 dubbo:service 和 dubbo:reference 都配了 connections，dubbo:reference 优先。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="服务端连接控制-1"><a href="#服务端连接控制-1" class="headerlink" title="服务端连接控制"></a>服务端连接控制</h4><p>服务端只能接受来自客户端的 10 个请求：</p><p><img src="/2020/03/30/Dubbo/Dubbo微服务影院系列/7.Dubbo服务开发（影院模块开发）/Dubbo微服务影院系列（7）：Dubbo服务开发（影院模块开发）/image-20200405000110013.png" alt="服务端连接控制"></p><h4 id="客户端连接控制-1"><a href="#客户端连接控制-1" class="headerlink" title="客户端连接控制"></a>客户端连接控制</h4><p>服务端可以接受任意个请求，但是客户端只能接受 10 个请求。</p><p><img src="/2020/03/30/Dubbo/Dubbo微服务影院系列/7.Dubbo服务开发（影院模块开发）/Dubbo微服务影院系列（7）：Dubbo服务开发（影院模块开发）/image-20200405000145642.png" alt="客户端连接控制"></p><p>如果超出了限制，则会报和没有启动服务类似的异常：</p><pre><code>Caused by: java.lang.IllegalStateException: Failed to check the status of the service com.zjut.zjxjwxk.dubbo.ServiceAPI. No provider available for the service com.zjut.zjxjwxk.dubbo.ServiceAPI ...</code></pre><h2 id="Dubbo-并发控制"><a href="#Dubbo-并发控制" class="headerlink" title="Dubbo 并发控制"></a>Dubbo 并发控制</h2><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/concurrency-control.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/concurrency-control.html</a></p></blockquote><h3 id="服务端服务级别"><a href="#服务端服务级别" class="headerlink" title="服务端服务级别"></a>服务端服务级别</h3><p>限制 <code>com.foo.BarService</code> 的每个方法，服务器端并发执行（或占用线程池线程数）不能超过 10 个：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">executes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="服务端方法级别"><a href="#服务端方法级别" class="headerlink" title="服务端方法级别"></a>服务端方法级别</h3><p>限制 <code>com.foo.BarService</code> 的 <code>sayHello</code> 方法，服务器端并发执行（或占用线程池线程数）不能超过 10 个：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHello<span class="token punctuation">"</span></span> <span class="token attr-name">executes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="客户端服务界别"><a href="#客户端服务界别" class="headerlink" title="客户端服务界别"></a>客户端服务界别</h3><p>限制 <code>com.foo.BarService</code> 的每个方法，每客户端并发执行（或占用连接的请求数）不能超过 10 个：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">actives</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">actives</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="客户端方法级别"><a href="#客户端方法级别" class="headerlink" title="客户端方法级别"></a>客户端方法级别</h3><p>限制 <code>com.foo.BarService</code> 的 <code>sayHello</code> 方法，每客户端并发执行（或占用连接的请求数）不能超过 10 个：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHello<span class="token punctuation">"</span></span> <span class="token attr-name">actives</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHello<span class="token punctuation">"</span></span> <span class="token attr-name">actives</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果 dubbo:service 和 dubbo:reference 都配了actives，dubbo:reference 优先</p><h3 id="Load-Balance-均衡"><a href="#Load-Balance-均衡" class="headerlink" title="Load Balance 均衡"></a>Load Balance 均衡</h3><p>配置服务的客户端的 <code>loadbalance</code> 属性为 <code>leastactive</code>，此 Loadbalance 会调用并发数最小的 Provider（Consumer端并发数）。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leastactive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.foo.BarService<span class="token punctuation">"</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leastactive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1049 Counting Ones (30分)</title>
      <link href="/2020/03/30/PAT/Advanced_Level/A1049/"/>
      <url>/2020/03/30/PAT/Advanced_Level/A1049/</url>
      
        <content type="html"><![CDATA[<p>The task is simple: given any positive integer <em>N</em>, you are supposed to count the total number of 1’s in the decimal form of the integers from 1 to <em>N</em>. For example, given <em>N</em> being 12, there are five 1’s in 1, 10, 11, and 12.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case which gives the positive <em>N</em> (≤230).</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print the number of 1’s in one line.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从低位到高位考虑每一位为 1 的个数，设当前位的数为 i，该位左边的数为 leftNum，右边的数为 rightNum，e 从 1 开始每次遍历乘 10。通过数字举例，可以总结出这样的公式：</p><ol><li>i &gt; 1 时，个数为 (leftNum + 1) * e</li><li>i == 1 时，个数为 leftNum * e + rightNum + 1</li><li>i == 0 时，个数为 leftNum * e</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> leftNum <span class="token operator">=</span> n<span class="token punctuation">,</span> rightNum<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftNum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> n <span class="token operator">/</span> e <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        leftNum <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        rightNum <span class="token operator">=</span> n <span class="token operator">%</span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>leftNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> leftNum <span class="token operator">*</span> e <span class="token operator">+</span> rightNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> leftNum <span class="token operator">*</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        e <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1104 Sum of Number Segments (20分)</title>
      <link href="/2020/03/30/PAT/Advanced_Level/A1104/"/>
      <url>/2020/03/30/PAT/Advanced_Level/A1104/</url>
      
        <content type="html"><![CDATA[<p>Given a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence { 0.1, 0.2, 0.3, 0.4 }, we have 10 segments: (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) and (0.4).</p><p>Now given a sequence, you are supposed to find the sum of all the numbers in all the segments. For the previous example, the sum of all the 10 segments is 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em>, the size of the sequence which is no more than 10^5. The next line contains <em>N</em> positive numbers in the sequence, each no more than 1.0, separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in one line the sum of all the numbers in all the segments, accurate up to 2 decimal places.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">40.1 0.2 0.3 0.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">5.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>包含第 i 个数的片段，其首指针有 i 中选择：1, 2, 3, … i，其尾指针有 n - i + 1 中选择：i, i + 1, … n。所以包含第 i 个数的片段有 i * (n - i + 1) 种。将 i 从 1 到 n 遍历，将包含每个数的片段数相加即可。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> temp<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> temp <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1003 我要通过！ (20分)</title>
      <link href="/2020/03/30/PAT/Basic_Level/B1003/"/>
      <url>/2020/03/30/PAT/Basic_Level/B1003/</url>
      
        <content type="html"><![CDATA[<p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h1 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h1><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h1 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h1><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h1 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h1><pre class="line-numbers language-in"><code class="language-in">8PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h1><pre class="line-numbers language-out"><code class="language-out">YESYESYESYESNONONONO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>可以找到这样的规律：正确的字符串应该遵循 P 左侧的 A 个数乘 P 与 T 中间的 A 个数等于 T 右侧的 A 个数。且 P 和 T 的个数必须为1，中间 A 的个数不能为 0，除了 P，A，T 的其他的字符个数必须为 0。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> PNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> TNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> otherNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> PIndex<span class="token punctuation">,</span> TIndex<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                PNum<span class="token operator">++</span><span class="token punctuation">;</span>                PIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'T'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TNum<span class="token operator">++</span><span class="token punctuation">;</span>                TIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                otherNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PNum <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> TNum <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> otherNum <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>TIndex <span class="token operator">-</span> PIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> leftA <span class="token operator">=</span> PIndex<span class="token punctuation">,</span> midA <span class="token operator">=</span> TIndex <span class="token operator">-</span> PIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rightA <span class="token operator">=</span> len <span class="token operator">-</span> TIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftA <span class="token operator">*</span> midA <span class="token operator">==</span> rightA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 数学问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1101 Quick Sort (25分)</title>
      <link href="/2020/03/29/PAT/Advanced_Level/A1101/"/>
      <url>/2020/03/29/PAT/Advanced_Level/A1101/</url>
      
        <content type="html"><![CDATA[<p>There is a classical process named <strong>partition</strong> in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given <em>N</em> distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?</p><p>For example, given <em>N</em>=5 and the numbers 1, 3, 2, 4, and 5. We have:</p><ul><li>1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;</li><li>3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;</li><li>2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;</li><li>and for the similar reason, 4 and 5 could also be the pivot.</li></ul><p>Hence in total there are 3 pivot candidates.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤10^5). Then the next line contains <em>N</em> distinct positive integers no larger than 10^9. The numbers in a line are separated by spaces.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">51 3 2 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">31 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>定义两个数组 leftMax[maxn] 和 leftMax[maxn]，leftMax[maxn] 用于记录序列中每一位左边的最大值，leftMax[maxn] 用于记录序列中每一位右边的最小值。如果 nums[i] 大于左边的最大值 leftMax[i] 且小于右边的最小值 rightMin[i]，那么 nums[i] 一定可以作为主元。</li><li>其中，leftMax[0] 应设为0，这样就假设了 nums[0] 左边没有比它大的元素；rightMin[n - 1] 应设为最大值 1 &lt;&lt; 31 - 1，这样就假设了 nums[n - 1] 右边没有比它小的元素。这样在给这两个数组赋值的过程中，相当于把初始最大值设为了 nums[0] 即 0，把初始最小值设为了 nums[n - 1] 即 1 &lt;&lt; 31 - 1。同时在判断主元时方便了边界元素的判断，</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>直接暴力判断的做法会超时</li><li>当主元个数为0时，第二行虽然没有输出主元，但必须输出一个换行（否则会有一个点格式错误…）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> leftMax<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> rightMin<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    leftMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rightMin<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> leftMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                leftMax<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                leftMax<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rightMin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rightMin<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            rightMin<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rightMin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> leftMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rightMin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1010 Radix (25分)</title>
      <link href="/2020/03/29/PAT/Advanced_Level/A1010/"/>
      <url>/2020/03/29/PAT/Advanced_Level/A1010/</url>
      
        <content type="html"><![CDATA[<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p><p>Now for any pair of positive integers <em>N</em>1 and <em>N</em>2, your task is to find the radix of one number while that of the other is given.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p><pre><code>N1 N2 tag radix</code></pre><p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">6 110 1 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">1 ab 1 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">Impossible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>二分：对一个确定的数字串来说，它的进制越大，该数字串转换为十进制的结果也就越大。</li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>使用遍历进制的暴力法会超时，因使用二分法。</li><li>本题的变量尽量使用 long long 类型。另外，经测试得到，本题中 radix 的范围最大为 INT_MAX ，即2^{31}-1，因此必须在在计算过程中判断是否溢出。</li><li>N2 进制的<strong>下界</strong>为所有数位中最大的那个+1，<strong>上界</strong>为 N1 的十进制（num1）与下界（lower）的较大值+1（即 max(num1, lower) + 1）。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> n1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n2<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tag<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> radix<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> inf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">strToNum</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> radix<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> digit<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            digit <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            digit <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> num <span class="token operator">*</span> radix <span class="token operator">+</span> digit<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">></span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">findLower</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> maxDigit <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> digit<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            digit <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            digit <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">></span> maxDigit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxDigit <span class="token operator">=</span> digit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxDigit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> left<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> right<span class="token punctuation">,</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> mid<span class="token punctuation">,</span> num2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num2 <span class="token operator">=</span> <span class="token function">strToNum</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">==</span> num1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">></span> num1 <span class="token operator">||</span> num2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s %d %d"</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tag<span class="token punctuation">,</span> <span class="token operator">&amp;</span>radix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> lower <span class="token operator">=</span> <span class="token function">findLower</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    num1 <span class="token operator">=</span> <span class="token function">strToNum</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> radix<span class="token punctuation">,</span> inf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> radix2 <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>lower<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> lower<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>radix2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> radix2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 二分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1085 Perfect Sequence (25分)</title>
      <link href="/2020/03/28/PAT/Advanced_Level/A1085/"/>
      <url>/2020/03/28/PAT/Advanced_Level/A1085/</url>
      
        <content type="html"><![CDATA[<p>Given a sequence of positive integers and another positive integer <em>p</em>. The sequence is said to be a <strong>perfect sequence</strong> if <em>M</em>≤<em>m</em>×<em>p</em> where <em>M</em> and <em>m</em> are the maximum and minimum numbers in the sequence, respectively.</p><p>Now given a sequence and a parameter <em>p</em>, you are supposed to find from the sequence as many numbers as possible to form a perfect subsequence.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains two positive integers <em>N</em> and <em>p</em>, where <em>N</em> (≤10^5) is the number of integers in the sequence, and <em>p</em> (≤ 10^9 ) is the parameter. In the second line there are <em>N</em> positive integers, each is no greater than 10^9.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in one line the maximum number of integers that can be chosen to form a perfect subsequence.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">10 82 3 20 4 5 1 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>能使选出的数个数最大的方案，一定是在该递增序列中选择连续的若干个数的方案</li><li>如果强行进行O(n^2)的二重循环遍历，那么根据题目的数据范围，肯定是会超时的。这里有两种方法解决这个问题：二分查找和 two pointers。</li><li>本人利用 upper_bound() 函数来二分寻找第一个大于 m * p 的数的位置，那么 M 的最大数的位置即为该位置 -1。</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>nums[i] * p 可能达到 10^{18}，可以使用 long long 来定义数组。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>nums <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums <span class="token operator">+</span> n<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> nums <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 二分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1038 Recover the Smallest Number (30分)</title>
      <link href="/2020/03/28/PAT/Advanced_Level/A1038/"/>
      <url>/2020/03/28/PAT/Advanced_Level/A1038/</url>
      
        <content type="html"><![CDATA[<p>Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given { 32, 321, 3214, 0229, 87 }, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case gives a positive integer <em>N</em> (≤10^4) followed by <em>N</em> number segments. Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print the smallest number in one line. Notice that the first digit must not be zero.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">5 32 321 3214 0229 87<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">22932132143287<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>贪心：对字符串 s1 与 s2，如果 s1 + s2 &lt; s2 + s1，那么把 s1 放在 s2 的前面。</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>结果串的所有前导零需要去掉。由于每个字符串都是非负的整数（non-negative），是有可能为 0 的，所以如果去除前导零后串的长度变为0，则输出0。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s1 <span class="token operator">+</span> s2 <span class="token operator">&lt;</span> s2 <span class="token operator">+</span> s1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    string str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> str <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    string ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1067 Sort with Swap(0, i) (25分)</title>
      <link href="/2020/03/27/PAT/Advanced_Level/A1067/"/>
      <url>/2020/03/27/PAT/Advanced_Level/A1067/</url>
      
        <content type="html"><![CDATA[<p>Given any permutation of the numbers {0, 1, 2,…, <em>N</em>−1}, it is easy to sort them in increasing order. But what if <code>Swap(0, *)</code> is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:</p><pre><code>Swap(0, 1) =&gt; {4, 1, 2, 0, 3}Swap(0, 3) =&gt; {4, 1, 2, 3, 0}Swap(0, 4) =&gt; {0, 1, 2, 3, 4}</code></pre><p>Now you are asked to find the minimum number of swaps need to sort the given permutation of the first <em>N</em> nonnegative integers.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case, which gives a positive <em>N</em> (≤10^5) followed by a permutation sequence of {0, 1, …, <em>N</em>−1}. All the numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each case, simply print in a line the minimum number of swaps need to sort the given permutation.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">103 5 7 2 6 4 9 0 8 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>如果在交换过程中出现数字0在0号位的情况，就随意选择一个还没有回到“本位”的数字，让其与数字0交换位置</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>在循环中寻找一个不在本位上的数时，如果每次都从头开始遍历序列中的数，则会有两组数据超时（因为复杂度是二次方级别的）。合适的做法是从整体上定义一个变量 k，用来保存目前序列中不在本位上的最小数（初试为1），当交换过程中出现0回归本位的情况时，总是从当前的 k 开始继续增大寻找不在本位上的数，这样能保证复杂度从整体上是线性级别（k 从 1 增长到 n）</li><li>该题用一个 index[] 数组表示下标值所在的位置即可，无需原始数组</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span> num <span class="token operator">&amp;&amp;</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1033 旧键盘打字 (20分)</title>
      <link href="/2020/03/26/PAT/Basic_Level/B1033/"/>
      <url>/2020/03/26/PAT/Basic_Level/B1033/</url>
      
        <content type="html"><![CDATA[<p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p><h1 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h1><p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5 个字符的串。可用的字符包括字母 [<code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>]、数字 <code>0</code>-<code>9</code>、以及下划线 <code>_</code>（代表空格）、<code>,</code>、<code>.</code>、<code>-</code>、<code>+</code>（代表上档键）。题目保证第 2 行输入的文字串非空。</p><p>注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p><h1 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h1><p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p><h1 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h1><pre class="line-numbers language-in"><code class="language-in">7+IE.7_This_is_a_test.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h1><pre class="line-numbers language-out"><code class="language-out">_hs_s_a_tst<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>读入失效键位的时候要注意，可能没有失效的键位，即第一行为空行的情况。这时候不能用 scanf 输入，而要用 cin.getline(str, maxn) 输入字符串。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100001</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> hash_table<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> wrong<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>wrong<span class="token punctuation">,</span> <span class="token number">257</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>wrong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wrong<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> wrong<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wrong<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> wrong<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hash_table<span class="token punctuation">[</span>wrong<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> low <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash_table<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> hash_table<span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash_table<span class="token punctuation">[</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 散列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（6）：Dubbo服务开发（影片模块开发）</title>
      <link href="/2020/03/22/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/6.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E7%89%87%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E7%89%87%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/"/>
      <url>/2020/03/22/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/6.Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E7%89%87%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%EF%BC%9ADubbo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E5%BD%B1%E7%89%87%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>掌握 API 网关服务聚合功能的实现</li><li>掌握 Mybatis-plus 自定义 SQL 实现</li><li>掌握 Dubbo 异步调用</li></ul><h2 id="服务聚合"><a href="#服务聚合" class="headerlink" title="服务聚合"></a>服务聚合</h2><ul><li>服务聚合就是将多个服务调用封装</li><li>服务聚合可以简化前端调用方式</li><li>服务聚合提供更好的安全性、可扩展性</li></ul><h2 id="业务功能开发流程"><a href="#业务功能开发流程" class="headerlink" title="业务功能开发流程"></a>业务功能开发流程</h2><ul><li>根据接口文档思考功能列表</li><li>实现 API 接口和实体</li><li>服务提供者实现</li></ul><h1 id="影片模块创建"><a href="#影片模块创建" class="headerlink" title="影片模块创建"></a>影片模块创建</h1><p>从 guns-user 拷贝一份重命名为 guns-film，修改相关配置</p><h1 id="API-网关功能聚合"><a href="#API-网关功能聚合" class="headerlink" title="API 网关功能聚合"></a>API 网关功能聚合</h1><ul><li>优点<ol><li>六个接口，一次请求，同一时刻节省了5次HTTP请求</li><li>同一个接口对外暴露，降低了前后端分离开发的难度和复杂度</li></ol></li><li>缺点：<ol><li>一次获取数据过多，容易出现问题</li></ol></li></ul><p>如 gateway 中的影片模块的获取首页信息接口，将 filmServiceApi 的多个方法所获得的对象聚合为 FilmIndexVO 对象返回给前端，将原本需要的多个接口聚合为一个 /film/getIndex 接口，避免了前端对不同接口的多次调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getIndex"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseVO <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FilmIndexVO filmIndexVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilmIndexVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取banner信息</span>        filmIndexVO<span class="token punctuation">.</span><span class="token function">setBanners</span><span class="token punctuation">(</span>filmServiceApi<span class="token punctuation">.</span><span class="token function">getBanners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取热映的影片</span>        filmIndexVO<span class="token punctuation">.</span><span class="token function">setHotFilms</span><span class="token punctuation">(</span>filmServiceApi<span class="token punctuation">.</span><span class="token function">getHotFilms</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取即将上映的影片</span>        filmIndexVO<span class="token punctuation">.</span><span class="token function">setSoonFilms</span><span class="token punctuation">(</span>filmServiceApi<span class="token punctuation">.</span><span class="token function">getSoonFilms</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取票房排行榜</span>        filmIndexVO<span class="token punctuation">.</span><span class="token function">setBoxRanking</span><span class="token punctuation">(</span>filmServiceApi<span class="token punctuation">.</span><span class="token function">getBoxRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取人气榜单</span>        filmIndexVO<span class="token punctuation">.</span><span class="token function">setExpectRanking</span><span class="token punctuation">(</span>filmServiceApi<span class="token punctuation">.</span><span class="token function">getExpectRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取排行前100影片</span>        filmIndexVO<span class="token punctuation">.</span><span class="token function">setTop100</span><span class="token punctuation">(</span>filmServiceApi<span class="token punctuation">.</span><span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseVO<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>IMG_PRE<span class="token punctuation">,</span> filmIndexVO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Mybatis-plus-自定义-SQL-实现"><a href="#Mybatis-plus-自定义-SQL-实现" class="headerlink" title="Mybatis-plus 自定义 SQL 实现"></a>Mybatis-plus 自定义 SQL 实现</h1><p>在相应的 Mapper 接口中添加方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActorTMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>ActorT<span class="token operator">></span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>ActorVO<span class="token operator">></span> <span class="token function">getActors</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"filmId"</span><span class="token punctuation">)</span> String filmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在相应的 Mapper xml 配置文件中添加 select 语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.stylefeng.guns.rest.common.persistence.dao.ActorTMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通用查询映射结果 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"BaseResultMap"</span> type<span class="token operator">=</span><span class="token string">"com.stylefeng.guns.rest.common.persistence.model.ActorT"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"UUID"</span> property<span class="token operator">=</span><span class="token string">"uuid"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"actor_name"</span> property<span class="token operator">=</span><span class="token string">"actorName"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"actor_img"</span> property<span class="token operator">=</span><span class="token string">"actorImg"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getActors"</span> parameterType<span class="token operator">=</span><span class="token string">"java.lang.String"</span> resultType<span class="token operator">=</span><span class="token string">"com.stylefeng.guns.api.film.vo.ActorVO"</span><span class="token operator">></span>        SELECT actor_img AS imgAddress<span class="token punctuation">,</span> actor_name AS directorName<span class="token punctuation">,</span> role_name AS roleName        FROM actor_t<span class="token punctuation">,</span> film_actor_t        WHERE actor_t<span class="token punctuation">.</span>UUID <span class="token operator">=</span> film_actor_t<span class="token punctuation">.</span>actor_id          AND film_actor_t<span class="token punctuation">.</span>film_id <span class="token operator">=</span> $<span class="token punctuation">{</span>filmId<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，就能执行自定义 SQL 语句了，其实就是普通版 Mybatis 的正常使用而已…</p><h1 id="Dubbo-异步调用"><a href="#Dubbo-异步调用" class="headerlink" title="Dubbo 异步调用"></a>Dubbo 异步调用</h1><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/async-call.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/async-call.html</a></p></blockquote><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><p>异步调用利用 NIO 的非阻塞特性实现服务调用并行。</p><p><img src="/2020/03/22/Dubbo/Dubbo微服务影院系列/6.Dubbo服务开发（影片模块开发）/Dubbo微服务影院系列（6）：Dubbo服务开发（影片模块开发）/image-20200329212040586.png" alt="Dubbo异步调用"></p><h2 id="使用RpcContext"><a href="#使用RpcContext" class="headerlink" title="使用RpcContext"></a>使用RpcContext</h2><h3 id="配置（Spring）"><a href="#配置（Spring）" class="headerlink" title="配置（Spring）"></a>配置（Spring）</h3><h4 id="服务端服务级别"><a href="#服务端服务级别" class="headerlink" title="服务端服务级别"></a>服务端服务级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客户端服务级别"><a href="#客户端服务级别" class="headerlink" title="客户端服务级别"></a>客户端服务级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="服务端方法级别"><a href="#服务端方法级别" class="headerlink" title="服务端方法级别"></a>服务端方法级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="客户端方法级别"><a href="#客户端方法级别" class="headerlink" title="客户端方法级别"></a>客户端方法级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置（SpringBoot）"><a href="#配置（SpringBoot）" class="headerlink" title="配置（SpringBoot）"></a>配置（SpringBoot）</h3><p>SpringBoot 的配置放在注解中，但只有服务级别，并没有方法级别。</p><h4 id="服务端服务级别-1"><a href="#服务端服务级别-1" class="headerlink" title="服务端服务级别"></a>服务端服务级别</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> xxx<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客户端服务级别-1"><a href="#客户端服务级别-1" class="headerlink" title="客户端服务级别"></a>客户端服务级别</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> xxx<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用RpcContext-1"><a href="#使用RpcContext-1" class="headerlink" title="使用RpcContext"></a>使用RpcContext</h3><p>在 consumer.xml 中配置方法级别的异步调用：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asyncService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.dubbo.samples.governance.api.AsyncService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHello<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 此调用会立即返回null</span>asyncService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拿到调用的Future引用，当结果返回后，会被通知和设置到此Future</span>CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> helloFuture <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCompletableFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为Future添加回调</span>helloFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>retValue<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，你也可以这样做异步调用:</p><pre class="line-numbers language-java"><code class="language-java">CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncCall</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        asyncService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"oneway call request1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，这里 asyncService.sayHello(“world”) 返回的是 null，不能通过该返回值获取结果，所有 asyncService 接口的 sayHello() 方法调用都需要通过 future 来获取结果。</p><h4 id="SpringBoot中"><a href="#SpringBoot中" class="headerlink" title="SpringBoot中"></a>SpringBoot中</h4><p>由于 SpringBoot 没有方法级别的注解可以配置 async 参数，但如果加在服务级别，即客户端的 <code>@Reference</code> 或者服务端的 <code>@Service</code> 上，又会影响不需要使用异步调用的地方。</p><p>所以，可以通过在 api 中再创建一个专门用于异步调用的接口来声明需要异步调用的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FilmAsyncServiceApi</span> <span class="token punctuation">{</span>    FilmDescVO <span class="token function">getFilmDesc</span><span class="token punctuation">(</span>String filmId<span class="token punctuation">)</span><span class="token punctuation">;</span>    ActorVO <span class="token function">getDirectorInfo</span><span class="token punctuation">(</span>String filmId<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ActorVO<span class="token operator">></span> <span class="token function">getActors</span><span class="token punctuation">(</span>String filmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在服务端中再创建一个用于异步调用的实现类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> FilmAsyncServiceApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFilmAsyncServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FilmAsyncServiceApi</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> FilmDescVO <span class="token function">getFilmDesc</span><span class="token punctuation">(</span>String filmId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ActorVO <span class="token function">getDirectorInfo</span><span class="token punctuation">(</span>String filmId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>ActorVO<span class="token operator">></span> <span class="token function">getActors</span><span class="token punctuation">(</span>String filmId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，在 API 网关的 Controller 中声明异步调用的接口，并使用 RpcContext 实现异步调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"films/{searchParam}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseVO <span class="token function">films</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"searchParam"</span><span class="token punctuation">)</span> String searchParam<span class="token punctuation">,</span> <span class="token keyword">int</span> searchType<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            filmAsyncServiceApi<span class="token punctuation">.</span><span class="token function">getFilmDesc</span><span class="token punctuation">(</span>filmId<span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span>FilmDescVO<span class="token operator">></span> filmDescVOFuture <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filmAsyncServiceApi<span class="token punctuation">.</span><span class="token function">getDirectorInfo</span><span class="token punctuation">(</span>filmId<span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span>ActorVO<span class="token operator">></span> directorVOFuture <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filmAsyncServiceApi<span class="token punctuation">.</span><span class="token function">getActors</span><span class="token punctuation">(</span>filmId<span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>ActorVO<span class="token operator">>></span> actorsFuture <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            省略无关代码...            */</span>            actorRequestVO<span class="token punctuation">.</span><span class="token function">setDirector</span><span class="token punctuation">(</span>directorVOFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            actorRequestVO<span class="token punctuation">.</span><span class="token function">setActors</span><span class="token punctuation">(</span>actorsFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          infoRequestVO<span class="token punctuation">.</span><span class="token function">setBiography</span><span class="token punctuation">(</span>filmDescVOFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBiography</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            省略无关代码...            */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，SpringBoot 还需要在 Application 上添加 <code>@EnableAsync</code> 注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.stylefeng.guns"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDubboConfiguration</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GatewayApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>API 网关的服务聚合</li><li>Dubbo 特性：异步调用</li><li>Mybatis-plus 自定义 SQL 实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1033 To Fill or Not to Fill (25分)</title>
      <link href="/2020/03/22/PAT/Advanced_Level/A1033/"/>
      <url>/2020/03/22/PAT/Advanced_Level/A1033/</url>
      
        <content type="html"><![CDATA[<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: <em>Cmax</em> (≤ 100), the maximum capacity of the tank; <em>D</em> (≤30000), the distance between Hangzhou and the destination city; <em>Davg</em> (≤20), the average distance per unit gas that the car can run; and <em>N</em> (≤ 500), the total number of gas stations. Then <em>N</em> lines follow, each contains a pair of non-negative numbers: <em>Pi</em>, the unit gas price, and <em>Di</em> (≤<em>D</em>), the distance between this station and Hangzhou, for <em>i</em>=1,⋯,<em>N</em>. All the numbers in a line are separated by a space.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print <code>The maximum travel distance = X</code> where <code>X</code> is the maximum possible distance the car can run, accurate up to 2 decimal places.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">50 1300 12 86.00 12507.00 6007.00 1507.10 07.20 2007.50 4007.30 10006.85 300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">749.17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre><code>50 1300 12 27.10 07.00 600</code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre><code>The maximum travel distance = 1200.00</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>把终点视为单位油价为0，离起点距离为 destD 的加油站（以便在最后选择下一站时，能够直接选到终点）</li><li>贪心：寻找距离当前加油站<strong>最近的</strong>油价低于当前油价的加油站，加恰好能够到达该加油站的油，然后前往该加油站；如果找不到油价低于当前油价的加油站，则寻找油价最低的加油站，在当前加油站加满油，然后前往该加油站</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>在距离为0处必须有加油站，否则无法出发，一定无法到达终点</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Station <span class="token punctuation">{</span>    <span class="token keyword">double</span> P<span class="token punctuation">;</span>    <span class="token keyword">double</span> D<span class="token punctuation">;</span><span class="token punctuation">}</span> stations<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Station s1<span class="token punctuation">,</span> Station s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s1<span class="token punctuation">.</span>D <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>D<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> capacity<span class="token punctuation">,</span> destD<span class="token punctuation">,</span> avgD<span class="token punctuation">,</span> nowC <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nowD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> nowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf %lf %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>capacity<span class="token punctuation">,</span> <span class="token operator">&amp;</span>destD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>avgD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stations<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>P <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stations<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">=</span> destD<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>stations<span class="token punctuation">,</span> stations <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum travel distance = 0.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nowD <span class="token operator">&lt;</span> destD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nowIndex <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>capacity <span class="token operator">*</span> avgD <span class="token operator">&lt;</span> <span class="token punctuation">(</span>destD <span class="token operator">-</span> nowD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nowIndex <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>capacity <span class="token operator">*</span> avgD <span class="token operator">&lt;</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>nowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">-</span> nowD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                nowD <span class="token operator">+</span><span class="token operator">=</span> capacity <span class="token operator">*</span> avgD<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">double</span> minP <span class="token operator">=</span> stations<span class="token punctuation">[</span>nowIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">,</span> secondP <span class="token operator">=</span> stations<span class="token punctuation">[</span>nowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">;</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> secondIndex <span class="token operator">=</span> nowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">*</span> avgD <span class="token operator">>=</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">-</span> nowD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>P <span class="token operator">&lt;</span> minP<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        minP <span class="token operator">=</span> stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">;</span>                        minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>P <span class="token operator">&lt;</span> secondP<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        secondP <span class="token operator">=</span> stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">;</span>                        secondIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nowC <span class="token operator">*</span> avgD <span class="token operator">&lt;</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">-</span> nowD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cost <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stations<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">-</span> nowD<span class="token punctuation">)</span> <span class="token operator">/</span> avgD <span class="token operator">-</span> nowC<span class="token punctuation">)</span> <span class="token operator">*</span> stations<span class="token punctuation">[</span>nowIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">;</span>                    nowC <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    nowC <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">-</span> nowD<span class="token punctuation">)</span> <span class="token operator">/</span> avgD<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                nowD <span class="token operator">=</span> stations<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>D<span class="token punctuation">;</span>                nowIndex <span class="token operator">=</span> minIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cost <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>capacity <span class="token operator">-</span> nowC<span class="token punctuation">)</span> <span class="token operator">*</span> stations<span class="token punctuation">[</span>nowIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>P<span class="token punctuation">;</span>                nowC <span class="token operator">=</span> capacity <span class="token operator">-</span> <span class="token punctuation">(</span>stations<span class="token punctuation">[</span>secondIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">-</span> nowD<span class="token punctuation">)</span> <span class="token operator">/</span> avgD<span class="token punctuation">;</span>                nowD <span class="token operator">=</span> stations<span class="token punctuation">[</span>secondIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>D<span class="token punctuation">;</span>                nowIndex <span class="token operator">=</span> secondIndex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nowD <span class="token operator">&lt;</span> destD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum travel distance = %.2f"</span><span class="token punctuation">,</span> nowD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1095 Cars on Campus (30分)</title>
      <link href="/2020/03/22/PAT/Advanced_Level/A1095/"/>
      <url>/2020/03/22/PAT/Advanced_Level/A1095/</url>
      
        <content type="html"><![CDATA[<p>Zhejiang University has 8 campuses and a lot of gates. From each gate we can collect the in/out times and the plate numbers of the cars crossing the gate. Now with all the information available, you are supposed to tell, at any specific time point, the number of cars parking on campus, and at the end of the day find the cars that have parked for the longest time period.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case starts with two positive integers <em>N</em> (≤ {10^4}), the number of records, and <em>K</em> (≤ 8×10^4) the number of queries. Then <em>N</em> lines follow, each gives a record in the format:</p><pre><code>plate_number hh:mm:ss status</code></pre><p>where <code>plate_number</code> is a string of 7 English capital letters or 1-digit numbers; <code>hh:mm:ss</code> represents the time point in a day by hour:minute:second, with the earliest time being <code>00:00:00</code> and the latest <code>23:59:59</code>; and <code>status</code> is either <code>in</code> or <code>out</code>.</p><p>Note that all times will be within a single day. Each <code>in</code> record is paired with the chronologically next record for the same car provided it is an <code>out</code> record. Any <code>in</code> records that are not paired with an <code>out</code> record are ignored, as are <code>out</code> records not paired with an <code>in</code> record. It is guaranteed that at least one car is well paired in the input, and no car is both <code>in</code> and <code>out</code> at the same moment. Times are recorded using a 24-hour clock.</p><p>Then <em>K</em> lines of queries follow, each gives a time point in the format <code>hh:mm:ss</code>. Note: the queries are given in <strong>ascending</strong> order of the times.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each query, output in a line the total number of cars parking on campus. The last line of output is supposed to give the plate number of the car that has parked for the longest time period, and the corresponding time length. If such a car is not unique, then output all of their plate numbers in a line in alphabetical order, separated by a space.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">16 7JH007BD 18:00:01 inZD00001 11:30:08 outDB8888A 13:00:00 outZA3Q625 23:59:50 outZA133CH 10:23:00 inZD00001 04:09:59 inJH007BD 05:09:59 inZA3Q625 11:42:01 outJH007BD 05:10:33 inZA3Q625 06:30:50 inJH007BD 12:23:42 outZA3Q625 23:55:00 inJH007BD 12:24:23 outZA133CH 17:11:22 outJH007BD 18:07:01 outDB8888A 06:30:50 in05:10:0006:30:5011:00:0012:23:4214:00:0018:00:0023:59:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">1452101JH007BD ZD00001 07:20:09<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>将时间统一转换为秒，方便比较；将 “in” 状态表示为1，“out” 状态表示为-1，方便停车数 cnt 的计算（即 cnt += status）</li><li>将记录的结构体数组，根据先 id，后 time 的顺序进行排序。然后从中找出合法的记录，加入 vector，顺便用 map&lt;string, int&gt; 存储各个车辆的总停车时长，并记录最大中停车时长</li><li>然后输入查询时间，每输入一个查询 id，就接着上次遍历这个 vector，一边遍历，一边计算当前停车数 cnt，直到当前时间大于查询时间，即可输出 cnt</li><li>最后，再遍历一遍 map，输出所有等于 maxLen 的车辆 id（map 已根据 id 的字母顺序自动排序）</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>最长停车时长（parked for the longest time period），指的是一辆车在一天中的总停车时长，而不是指某一次停车的时长</li><li>如果一辆车多次 in，应该取最后一个 in 记录；如果一辆车多次 out，应该取第一个 out 记录</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Record <span class="token punctuation">{</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> time<span class="token punctuation">,</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span> records<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Record<span class="token operator">></span> vec<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> lenMap<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmpByIdAndTime</span><span class="token punctuation">(</span>Record r1<span class="token punctuation">,</span> Record r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> strCmp <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>id<span class="token punctuation">,</span> r2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strCmp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> strCmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r1<span class="token punctuation">.</span>time <span class="token operator">&lt;</span> r2<span class="token punctuation">.</span>time<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">cmpByTime</span><span class="token punctuation">(</span>Record r1<span class="token punctuation">,</span> Record r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> r1<span class="token punctuation">.</span>time <span class="token operator">&lt;</span> r2<span class="token punctuation">.</span>time<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">,</span> sec<span class="token punctuation">,</span> time<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLen <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> status<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d:%d:%d %s"</span><span class="token punctuation">,</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hour<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sec<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> hour <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">+</span> min <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> sec<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> records <span class="token operator">+</span> n<span class="token punctuation">,</span> cmpByIdAndTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lenMap<span class="token punctuation">[</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">-</span> records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lenMap<span class="token punctuation">[</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">></span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxLen <span class="token operator">=</span> lenMap<span class="token punctuation">[</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmpByTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hour<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span>        time <span class="token operator">=</span> hour <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> min <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> sec<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">&lt;=</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt <span class="token operator">+</span><span class="token operator">=</span> vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> lenMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>second <span class="token operator">==</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d"</span><span class="token punctuation">,</span> maxLen <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">,</span> maxLen <span class="token operator">%</span> <span class="token number">3600</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> maxLen <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1016 Phone Bills (25分)</title>
      <link href="/2020/03/20/PAT/Advanced_Level/A1016/"/>
      <url>/2020/03/20/PAT/Advanced_Level/A1016/</url>
      
        <content type="html"><![CDATA[<p>A long-distance telephone company charges its customers by the following rules:</p><p>Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p><p>The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p><p>The next line contains a positive number <em>N</em> (≤1000), followed by <em>N</em> lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (<code>mm:dd:hh:mm</code>), and the word <code>on-line</code> or <code>off-line</code>.</p><p>For each test case, all dates will be within a single month. Each <code>on-line</code> record is paired with the chronologically next record for the same customer provided it is an <code>off-line</code> record. Any <code>on-line</code> records that are not paired with an <code>off-line</code> record are ignored, as are <code>off-line</code> records not paired with an <code>on-line</code> record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, you must print a phone bill for each customer.</p><p>Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (<code>dd:hh:mm</code>), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 1010CYLL 01:01:06:01 on-lineCYLL 01:28:16:05 off-lineCYJJ 01:01:07:00 off-lineCYLL 01:01:08:03 off-lineCYJJ 01:01:05:59 on-lineaaa 01:01:01:03 on-lineaaa 01:02:00:01 on-lineCYLL 01:28:15:41 on-lineaaa 01:05:02:24 on-lineaaa 01:04:23:59 off-line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">CYJJ 0101:05:59 01:07:00 61 $12.10Total amount: $12.10CYLL 0101:06:01 01:08:03 122 $24.4028:15:41 28:16:05 24 $3.85Total amount: $28.25aaa 0102:00:01 04:23:59 4318 $638.80Total amount: $638.80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>将通话记录，先根据姓名，再根据时间先后，进行排序。这样相同名字的记录就会排在一起，且其中的数据也是按照时间顺序的。</li><li>为了方便计算某一组通话的时长，可以把记录的时间都换算为相对于 00:00:00 的分钟数，则挂电话时间减去接电话时间，即为通话时长</li><li>为了方便计算某一组通话的费用，可以把挂电话相对于 00:00:00 的费用减去接电话相对于 00:00:00 的费用，即为该通话的费用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> rate<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Record <span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">,</span> time<span class="token punctuation">,</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span> records<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">getCostFromZero</span><span class="token punctuation">(</span>Record <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cost <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>day <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> rate<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>min <span class="token operator">*</span> rate<span class="token punctuation">[</span>r<span class="token punctuation">.</span>hour<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">.</span>hour <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cost <span class="token operator">+</span><span class="token operator">=</span> rate<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Record r1<span class="token punctuation">,</span> Record r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>name <span class="token operator">!=</span> r2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r1<span class="token punctuation">.</span>name <span class="token operator">&lt;</span> r2<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r1<span class="token punctuation">.</span>time <span class="token operator">&lt;</span> r2<span class="token punctuation">.</span>time<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rate<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> rate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    string status<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d:%d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>month<span class="token punctuation">,</span> <span class="token operator">&amp;</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span> <span class="token operator">&amp;</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hour<span class="token punctuation">,</span> <span class="token operator">&amp;</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>day <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hour <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">;</span>        cin <span class="token operator">>></span> status<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">"on-line"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> records <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Record<span class="token operator">></span> <span class="token operator">></span> nameRecords<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">==</span> records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nameRecords<span class="token punctuation">[</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nameRecords<span class="token punctuation">[</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> nameRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>Record<span class="token operator">></span> temp <span class="token operator">=</span> it<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %02d\n"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> totalCost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> cost <span class="token operator">=</span> <span class="token function">getCostFromZero</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getCostFromZero</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d:%02d %02d:%02d:%02d %d $%.2f\n"</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hour<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hour<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">-</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span> cost <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            totalCost <span class="token operator">+</span><span class="token operator">=</span> cost<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total amount: $%.2f\n"</span><span class="token punctuation">,</span> totalCost <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1012 The Best Rank (25分)</title>
      <link href="/2020/03/20/PAT/Advanced_Level/A1012/"/>
      <url>/2020/03/20/PAT/Advanced_Level/A1012/</url>
      
        <content type="html"><![CDATA[<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p><pre><code>StudentID  C  M  E  A310101     98 85 88 90310102     70 95 88 84310103     82 87 94 88310104     91 91 91 91</code></pre><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output <code>N/A</code>.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">5 6310101 98 85 88310102 70 95 88310103 82 87 94310104 91 91 91310105 85 90 90310101310102310103310104310105999999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">1 C1 M1 E1 A3 AN/A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>本题主要在于数据的存取方式，先用 Stu 结构体数组来存储每个考生的 id 和用来存储其各科分数的数组，并对该结构体数组根据各科分数进行排序，每排序一次就将其排序结果写入排名数组 ranks，最后根据查询 id，输出最高排名信息即可</li><li>以结构体 Stu 存放 id 和 score[4] 数组，score[0] ~ score[3] 分别代表 A，C，M，E</li><li>由于 id 是 6 位的整数（6 digits），不妨设置 ranks [1000000] [4] 数组，其中 ranks [id] [0] ~ ranks [id] [4] 分别代表编号为 id 的考生的 A，C，M，E 分别的排名</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>由于优先级是 A &gt; C &gt; M &gt; E，为了方便枚举，设置数组时，尽量把 A 放在 C、M、E 前面</li><li>本题 id 是整数（digits 即数字），不会是字符型</li><li>本题没有说明平均分是向下取整还是四舍五入（向下取整也能通过），但为了更方便，平均分也可以用总分来代替</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Stu <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> stus<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> ranks<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> index<span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Stu s1<span class="token punctuation">,</span> Stu s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s1<span class="token punctuation">.</span>score<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> s2<span class="token punctuation">.</span>score<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> stus <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        ranks<span class="token punctuation">[</span>stus<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> stus<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ranks<span class="token punctuation">[</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> ranks<span class="token punctuation">[</span>stus<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ranks<span class="token punctuation">[</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N/A\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minRank <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> minIndex<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minRank<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minRank <span class="token operator">=</span> ranks<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span> minRank<span class="token punctuation">,</span> ch<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1082 Read Number in Chinese (25分)</title>
      <link href="/2020/03/19/PAT/Advanced_Level/A1082/"/>
      <url>/2020/03/19/PAT/Advanced_Level/A1082/</url>
      
        <content type="html"><![CDATA[<p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way. Output <code>Fu</code> first if it is negative. For example, -123456789 is read as <code>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</code>. Note: zero (<code>ling</code>) must be handled correctly according to the Chinese tradition. For example, 100800 is <code>yi Shi Wan ling ba Bai</code>.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print in a line the Chinese way of reading the number. The characters are separated by a space and there must be no extra space at the end of the line.</p><h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h1><pre class="line-numbers language-in"><code class="language-in">-123456789<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h1><pre class="line-numbers language-out"><code class="language-out">Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h1><pre class="line-numbers language-in"><code class="language-in">100800<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h1><pre class="line-numbers language-out"><code class="language-out">yi Shi Wan ling ba Bai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将数字按字符串处理，设置下标 left 和 right 来处理数字的一个节（个节、万节、亿节）的输出，left 指向当前需要输出的位，right 指向与 left 同节的个位。</p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>边界数据 0 的输出应该为 “0“。可以在判断当前位是否是 0 时，加上不为首位这一条件（即若为首位的 0，照常输出）。当然也可以特殊判断输出。</li><li>如果万节所有位都为 0，则不能输出多余的万。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">char</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ling"</span><span class="token punctuation">,</span> <span class="token string">"yi"</span><span class="token punctuation">,</span> <span class="token string">"er"</span><span class="token punctuation">,</span> <span class="token string">"san"</span><span class="token punctuation">,</span> <span class="token string">"si"</span><span class="token punctuation">,</span> <span class="token string">"wu"</span><span class="token punctuation">,</span> <span class="token string">"liu"</span><span class="token punctuation">,</span> <span class="token string">"qi"</span><span class="token punctuation">,</span> <span class="token string">"ba"</span><span class="token punctuation">,</span> <span class="token string">"jiu"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> wei<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Shi"</span><span class="token punctuation">,</span> <span class="token string">"Bai"</span><span class="token punctuation">,</span> <span class="token string">"Qian"</span><span class="token punctuation">,</span> <span class="token string">"Wan"</span><span class="token punctuation">,</span> <span class="token string">"Yi"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">>=</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        right <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> isPrint <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ling"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isPrint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %s"</span><span class="token punctuation">,</span> wei<span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrint <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %s"</span><span class="token punctuation">,</span> wei<span class="token punctuation">[</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        right <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1061 Dating (20分)</title>
      <link href="/2020/03/18/PAT/Advanced_Level/A1061/"/>
      <url>/2020/03/18/PAT/Advanced_Level/A1061/</url>
      
        <content type="html"><![CDATA[<p>Sherlock Holmes received a note with some strange strings: <code>Let&#39;s date! 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>. It took him only a minute to figure out that those strange strings are actually referring to the coded time <code>Thursday 14:04</code> – since the first common capital English letter (case sensitive) shared by the first two strings is the 4th capital letter <code>D</code>, representing the 4th day in a week; the second common character is the 5th capital letter <code>E</code>, representing the 14th hour (hence the hours from 0 to 23 in a day are represented by the numbers from 0 to 9 and the capital letters from <code>A</code> to <code>N</code>, respectively); and the English letter shared by the last two strings is <code>s</code> at the 4th position, representing the 4th minute. Now given two pairs of strings, you are supposed to help Sherlock decode the dating time.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case gives 4 non-empty strings of no more than 60 characters without white space in 4 lines.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, print the decoded time in one line, in the format <code>DAY HH:MM</code>, where <code>DAY</code> is a 3-character abbreviation for the days in a week – that is, <code>MON</code> for Monday, <code>TUE</code> for Tuesday, <code>WED</code> for Wednesday, <code>THU</code> for Thursday, <code>FRI</code> for Friday, <code>SAT</code> for Saturday, and <code>SUN</code> for Sunday. It is guaranteed that the result is unique for each case.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">3485djDkxh4hhGE 2984akDfkkkkggEdsb s&hgsfdk d&Hyscvnm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">THU 14:04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>三对相同的字符都需要在对应相同的位置上（在各自的字符串中所在的位置相同），这一点题目没有说清楚（我刚开始以为可以在不同位置</li><li>第 2 对相同的字符，其实是在第一对字符位置之后的下一对满足条件的字符，而不是从头扫描碰到的第 2 对，这一点题目也没有说清楚</li><li>前两对字符需要限定到具体范围，如 A～G 与 A～N，而不是 A～Z，否则会“答案错误”</li><li>总之，这题很模糊，能做对靠猜</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> week<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"MON"</span><span class="token punctuation">,</span> <span class="token string">"TUE"</span><span class="token punctuation">,</span> <span class="token string">"WED"</span><span class="token punctuation">,</span> <span class="token string">"THU"</span><span class="token punctuation">,</span> <span class="token string">"FRI"</span><span class="token punctuation">,</span> <span class="token string">"SAT"</span><span class="token punctuation">,</span> <span class="token string">"SUN"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len4 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'G'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> week<span class="token punctuation">[</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len3 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> len4<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1010 一元多项式求导 (25分)</title>
      <link href="/2020/03/17/PAT/Basic_Level/B1010/"/>
      <url>/2020/03/17/PAT/Basic_Level/B1010/</url>
      
        <content type="html"><![CDATA[<p>设计函数求一元多项式的导数。（注：x^n（<em>n</em>为整数）的一阶导数为nx^{n−1}。）</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h1><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><pre class="line-numbers language-in"><code class="language-in">3 4 -5 2 6 1 -2 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><pre class="line-numbers language-out"><code class="language-out">12 3 -10 1 6 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>用 while……EOF 的格式来读入系数和指数（黑框中触发 EOF 要按 <code>ctrl + Z</code>，并回车）</li><li>经测试，该题的指数都是非负整数</li><li>求导必须从低次项枚举到高次项，否则结果可能为出错</li><li>在求导后，当前系数必须清空为0，否则当前无法被后面覆盖</li><li>如果求导之后没有任何非零项，需要输出 <code>0 0</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> e<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1065 A+B and C (64bit) (20分)</title>
      <link href="/2020/03/15/PAT/Advanced_Level/A1065/"/>
      <url>/2020/03/15/PAT/Advanced_Level/A1065/</url>
      
        <content type="html"><![CDATA[<p>Given three integers <em>A</em>, <em>B</em> and <em>C</em> in [−2^63,2^63], you are supposed to tell whether <em>A</em>+<em>B</em>&gt;<em>C</em>.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>The first line of the input gives the positive number of test cases, <em>T</em> (≤10). Then <em>T</em> test cases follow, each consists of a single line containing three integers <em>A</em>, <em>B</em> and <em>C</em>, separated by single spaces.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each test case, output in one line <code>Case #X: true</code> if <em>A</em>+<em>B</em>&gt;<em>C</em>, or <code>Case #X: false</code> otherwise, where <em>X</em> is the case number (starting from 1).</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">31 2 32 3 49223372036854775807 -9223372036854775808 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">Case #1: falseCase #2: trueCase #3: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>当正溢出时，A + B 大小的范围区间为 [2^63, 2^64 - 2]，所以溢出后的区间为 [-2^63, -2]。所以，当 A &gt; 0, B &gt; 0, A + B &lt; 0 时，为正溢出，输入 true。</li><li>当负溢出时，A + B 大小的范围区间为 [-2^64, -2^63 - 1]，所以溢出后的区间为 [0, 2^63 - 1]。所以，当 A &lt; 0, B &lt; 0, A + B &gt;= 0 时为，为负溢出，输出 false。</li><li>在没有溢出的情况下，正常比较。</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>A + B 必须存放到 long long 型变量中才可与 C 进行比较，而不可以在 if 的条件中直接相加与 C 比较，否则会造成后两组数据错误。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> flag <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（5）：Dubbo基本特性（用户模块开发）</title>
      <link href="/2020/03/11/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/5.Dubbo%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7%EF%BC%88%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%EF%BC%9ADubbo%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7%EF%BC%88%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/"/>
      <url>/2020/03/11/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/5.Dubbo%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7%EF%BC%88%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%EF%BC%9ADubbo%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7%EF%BC%88%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>学会 API 网关权限验证和其他服务交互</li><li>学会开发 SpringBoot 的自定义配置</li><li>学会 Dubbo 负载均衡策略选择和使用</li></ul><h2 id="修改-Guns-中的-JWT-模块"><a href="#修改-Guns-中的-JWT-模块" class="headerlink" title="修改 Guns 中的 JWT 模块"></a>修改 Guns 中的 JWT 模块</h2><ul><li>增加忽略验证 URL 配置</li><li>修改返回内容匹配业务</li><li>增加 Threadlocal 的用户信息保存</li></ul><h2 id="业务功能开发"><a href="#业务功能开发" class="headerlink" title="业务功能开发"></a>业务功能开发</h2><ul><li>增加用户服务并提供接口</li><li>初步了解 API 网关与服务之间交互的过程</li><li>根据接口文档开发用户接口</li></ul><h1 id="创建用户表"><a href="#创建用户表" class="headerlink" title="创建用户表"></a>创建用户表</h1><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>   UUID <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键编号'</span><span class="token punctuation">,</span>   user_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户账号'</span><span class="token punctuation">,</span>   user_pwd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户密码'</span><span class="token punctuation">,</span>   nick_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户昵称'</span><span class="token punctuation">,</span>   user_sex <span class="token keyword">INT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户性别 0-男，1-女'</span><span class="token punctuation">,</span>   birthday <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span>   email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户邮箱'</span><span class="token punctuation">,</span>   user_phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户手机号'</span><span class="token punctuation">,</span>   address <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户住址'</span><span class="token punctuation">,</span>   head_url <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'头像URL'</span><span class="token punctuation">,</span>   biography <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'个人介绍'</span><span class="token punctuation">,</span>   life_state <span class="token keyword">INT</span> <span class="token keyword">COMMENT</span> <span class="token string">'生活状态 0-单身，1-热恋中，2-已婚，3-为人父母'</span><span class="token punctuation">,</span>   begin_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>   update_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户表'</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> DYNAMIC<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>user_name<span class="token punctuation">,</span>user_pwd<span class="token punctuation">,</span>nick_name<span class="token punctuation">,</span>user_sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>email<span class="token punctuation">,</span>user_phone<span class="token punctuation">,</span>address<span class="token punctuation">,</span>head_url<span class="token punctuation">,</span>life_state<span class="token punctuation">,</span>biography<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'0192023a7bbd73250516f069df18b500'</span><span class="token punctuation">,</span><span class="token string">'管理员'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2018-07-31'</span><span class="token punctuation">,</span><span class="token string">'admin@gmail.com'</span><span class="token punctuation">,</span><span class="token string">'13888888888'</span><span class="token punctuation">,</span><span class="token string">'浙江省杭州市西湖区某路某号'</span><span class="token punctuation">,</span><span class="token string">'cinema/img/head-img.jpg'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'我是苦逼的管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>user_name<span class="token punctuation">,</span>user_pwd<span class="token punctuation">,</span>nick_name<span class="token punctuation">,</span>user_sex<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>email<span class="token punctuation">,</span>user_phone<span class="token punctuation">,</span>address<span class="token punctuation">,</span>head_url<span class="token punctuation">,</span>life_state<span class="token punctuation">,</span>biography<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'5e2de6bd1c9b50f6e27d4e55da43b917'</span><span class="token punctuation">,</span><span class="token string">'测试用户'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2018-08-20'</span><span class="token punctuation">,</span><span class="token string">'test@gmail.com'</span><span class="token punctuation">,</span><span class="token string">'13866666666'</span><span class="token punctuation">,</span><span class="token string">'测试地址'</span><span class="token punctuation">,</span><span class="token string">'cinema/img/head-img.jpg'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'我是测试用户'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用户服务与网关交互"><a href="#用户服务与网关交互" class="headerlink" title="用户服务与网关交互"></a>用户服务与网关交互</h1><p>在 guns 项目中复制一份 guns-gateway 模块并重命名为 guns-user（修改相应子模块和主模块的 pom.xml 等），并在 application.yml 中将其鉴权机制等关闭（网关才需要）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">rest</span><span class="token punctuation">:</span>  <span class="token key atrule">auth-open</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#jwt鉴权机制是否开启(true或者false)</span>  <span class="token key atrule">sign-open</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#签名机制是否开启(true或false)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>端口设为8083</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083 </span><span class="token comment" spellcheck="true">#项目端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 spring:dubbo: 下添加 Dubbo 协议和端口（UserApplication 需要向外部暴露接口，先向注册中心注册，然后通过 Dubbo 协议被远程调用）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cinema<span class="token punctuation">-</span>user  <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">registry</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> dubbo      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20881</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 guns-user 中编写 UserAPI 的实现类，其中 UserAPI 接口是来自于 guns-api 的（在前一章已经做了业务 API 抽离），并通过 @Service 向外部暴露</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> UserAPI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is user service! "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在 guns-gateway 中就可以远程调用 UserAPI 接口了</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> UserAPI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserAPI userAPI<span class="token punctuation">;</span>    userAPI<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基于-SpringBoot-配置忽略列表"><a href="#基于-SpringBoot-配置忽略列表" class="headerlink" title="基于 SpringBoot 配置忽略列表"></a>基于 SpringBoot 配置忽略列表</h1><p>配置 guns-gateway 网关模块中的 application.yml，在 jwt 下添加 ignore-url 配置，用逗号分隔 url（<strong>注意不能有空格！</strong>），这些接口将不通过 jwt 验证过滤器</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">jwt</span><span class="token punctuation">:</span>  <span class="token key atrule">header</span><span class="token punctuation">:</span> Authorization   <span class="token comment" spellcheck="true">#http请求头所需要的字段</span>  <span class="token key atrule">secret</span><span class="token punctuation">:</span> mySecret        <span class="token comment" spellcheck="true">#jwt秘钥</span>  <span class="token key atrule">expiration</span><span class="token punctuation">:</span> <span class="token number">604800      </span><span class="token comment" spellcheck="true">#7天 单位:秒</span>  <span class="token key atrule">auth-path</span><span class="token punctuation">:</span> auth         <span class="token comment" spellcheck="true">#认证请求的路径</span>  <span class="token key atrule">md5-key</span><span class="token punctuation">:</span> randomKey      <span class="token comment" spellcheck="true">#md5加密混淆key</span>  <span class="token key atrule">ignore-url</span><span class="token punctuation">:</span> /user/<span class="token punctuation">,</span>/film/  <span class="token comment" spellcheck="true">#忽略列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JwtProperties 中添加一项成员变量，并添加 get、set 函数，这个类是配置类，<code>@ConfigurationProperties(prefix = JwtProperties.JWT_PREFIX)</code> 表示用于从配置文件 application.yml 中获取 jwt 开头的配置变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> JwtProperties<span class="token punctuation">.</span>JWT_PREFIX<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JWT_PREFIX <span class="token operator">=</span> <span class="token string">"jwt"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String header <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String secret <span class="token operator">=</span> <span class="token string">"defaultSecret"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long expiration <span class="token operator">=</span> 604800L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String authPath <span class="token operator">=</span> <span class="token string">"auth"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String md5Key <span class="token operator">=</span> <span class="token string">"randomKey"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String ignoreUrl <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 AuthFilter 的 doFilterInternal 方法中添加以下代码，用于忽略配置列表</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 配置忽略列表</span>        String ignoreUrl <span class="token operator">=</span> jwtProperties<span class="token punctuation">.</span><span class="token function">getIgnoreUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> ignoreUrls <span class="token operator">=</span> ignoreUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ignoreUrls<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ignoreUrls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改-JWT-申请的返回报文"><a href="#修改-JWT-申请的返回报文" class="headerlink" title="修改 JWT 申请的返回报文"></a>修改 JWT 申请的返回报文</h1><p>在 guns-gateway 模块中的 modular.vo 下，创建 ResponseVO 类作为响应VO类，其中包含了三种状态 Status ：0-成功，1-业务失败，999-系统异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseVO</span><span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回状态 [0-成功，1-业务失败，999-系统异常]     */</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回信息     */</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回数据实体     */</span>    <span class="token keyword">private</span> M data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">ResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>M<span class="token operator">></span> ResponseVO <span class="token function">success</span><span class="token punctuation">(</span>M m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseVO responseVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseVO <span class="token function">serviceFail</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseVO responseVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseVO <span class="token function">appFail</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseVO responseVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后在 AuthController 中就可以用该类作为返回对象了</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"${jwt.auth-path}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseVO <span class="token function">createAuthenticationToken</span><span class="token punctuation">(</span>AuthRequest authRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> validate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 去掉guns自身携带的用户名密码验证机制，使用自己的</span>        <span class="token keyword">int</span> userId <span class="token operator">=</span> userAPI<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authRequest<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            validate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// randomKey和token已经生成完毕</span>            <span class="token keyword">final</span> String randomKey <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getRandomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> String token <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> randomKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回值</span>            <span class="token keyword">return</span> ResponseVO<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthResponse</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> randomKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ResponseVO<span class="token punctuation">.</span><span class="token function">serviceFail</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="增加-Threadlocal-的用户信息保存"><a href="#增加-Threadlocal-的用户信息保存" class="headerlink" title="增加 Threadlocal 的用户信息保存"></a>增加 Threadlocal 的用户信息保存</h1><p>在 guns-gateway 中的 common 下创建 CurrentUser 类用于保存 userId（不直接保存 userInfoModel 是因为更省空间，避免用户量大时出现内存溢出），该 userId 存在 ThreadLocal 中和线程绑定，同一线程内共享</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 线程绑定的存储空间     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveUserId</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后，在 AuthFilter 验证 token 时，就可以通过 token 获取 userID，并且将之存入 ThreadLocal，以便后续业务调用了</p><pre class="line-numbers language-java"><code class="language-java">            String userId <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUsernameFromToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                CurrentUser<span class="token punctuation">.</span><span class="token function">saveUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在用户后续访问时，就可以取出 userId，并从数据库或 redis 中获取用户信息了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CurrentUser<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里将以userId为key，userInfo为value存在redis中，TTL为30分钟</span>        <span class="token comment" spellcheck="true">// 或以userId为条件去数据库取出（和redis只有快慢的区别）</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"请求成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用户模块开发"><a href="#用户模块开发" class="headerlink" title="用户模块开发"></a>用户模块开发</h1><h2 id="业务功能开发流程"><a href="#业务功能开发流程" class="headerlink" title="业务功能开发流程"></a>业务功能开发流程</h2><h3 id="使用代码生成器生成数据项"><a href="#使用代码生成器生成数据项" class="headerlink" title="使用代码生成器生成数据项"></a>使用代码生成器生成数据项</h3><p>在每个 guns 模块的 test 下，都有 enerator.EntityGenerator 这个用于实体生成的类，只需根据需要稍微修改一下方法的参数即可。在 guns-user 模块中生成即可得到：UserT, UserTMapper, UserTMapper.xml</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 生成代码的绝对目录</span>gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"/Users/zjxjwxk/Documents/GitHub/Cinema-Dubbo/guns-user/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 作者信息</span>gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"zjxjwxk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 数据库连接配置</span>dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"19981018"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/guns_rest?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 数据库表前缀</span>strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"user_t"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 生成 Entity、Mapper、XML 的包的相对目录</span>pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"com.stylefeng.guns.rest.common.persistence.model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"com.stylefeng.guns.rest.common.persistence.dao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pc<span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span><span class="token string">"com.stylefeng.guns.rest.common.persistence.dao.mapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处生成的实体类属于 guns-user 模块，用于和数据库打交道。以下是 guns-gateway 模块和 guns-user 模块不同的三种 user 类，UserModel 和 UserInfoModel 属于 BO，而 MoocUserT （即UserT） 属于 DO。</p><p><img src="/2020/03/11/Dubbo/Dubbo微服务影院系列/5.Dubbo基本特性（用户模块开发）/Dubbo微服务影院系列（5）：Dubbo基本特性（用户模块开发）/image-20200317202533906.png" alt="不同模块中的User类"></p><h3 id="实现相应的接口功能"><a href="#实现相应的接口功能" class="headerlink" title="实现相应的接口功能"></a>实现相应的接口功能</h3><p>在 guns-user 模块的 UserServiceImpl 中实现 UserAPI （在 guns-api 中）的接口，如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> UserAPI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserTMapper userTMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 guns-gateway 模块的 UserController 中实现编写相应 url 和控制层代码，如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> UserAPI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserAPI userAPI<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"register"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseVO <span class="token function">register</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Dubbo-特性"><a href="#Dubbo-特性" class="headerlink" title="Dubbo 特性"></a>Dubbo 特性</h1><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ul><li>必须先启动服务提供者，否则会报错（如下）。如果有两个服务互相依赖，那么两个服务都无法启动成功。（Dubbo 启动检查）</li></ul><pre class="line-numbers language-text"><code class="language-text">Caused by: java.lang.IllegalStateException: Failed to check the status of the service com.stylefeng.guns.api.user.UserAPI. No provider available for the service com.stylefeng.guns.api.user.UserAPI from the url zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=cinema-gateway&dubbo=2.6.0&interface=com.stylefeng.guns.api.user.UserAPI&methods=updateUserInfo,checkUserName,getUserInfo,login,register&pid=10451&register.ip=192.168.6.102&side=consumer&timestamp=1584633672918 to the consumer 192.168.6.102 use dubbo version 2.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果我们将用户模块部署多台，消费者会如何访问？（Dubbo 负载均衡）</li><li>spring: dubbo: 中的 protocol 属性是做什么的？（Dubbo 多协议支持）</li></ul><h2 id="Dubbo-启动检查"><a href="#Dubbo-启动检查" class="headerlink" title="Dubbo 启动检查"></a>Dubbo 启动检查</h2><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/preflight-check.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/preflight-check.html</a></p></blockquote><ul><li>服务启动过程中验证服务提供者的可用性</li><li>验证过程出现问题，则阻止整个 Spring 容器初始化</li><li>服务启动检查可以尽可能早的发现服务问题</li></ul><p>Dubbo 默认打开了启动检查，每个接口的 @Reference 注解都默认 check = true，如果确实想取消启动检查，只需在每个消费者所引用的接口的 @Reference 注解后手动设置 check = false 即可（但是并不推荐）。关闭启动检查后，无论所调用接口的服务有没有启动，都能够正常启动。但如果其调用没有启动的服务，将会报以下错误：</p><pre class="line-numbers language-text"><code class="language-text">com.alibaba.dubbo.rpc.RpcException: No provider available from registry localhost:2181 for service com.stylefeng.guns.api.user.UserAPI on consumer 192.168.6.102 use dubbo version 2.6.0, may be providers disabled or not registered ?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Dubbo-负载均衡"><a href="#Dubbo-负载均衡" class="headerlink" title="Dubbo 负载均衡"></a>Dubbo 负载均衡</h2><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html</a></p></blockquote><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><table><thead><tr><th>策略名称</th><th>策略描述</th></tr></thead><tbody><tr><td>Random</td><td><strong>随机</strong>，按权重设置随机概率</td></tr><tr><td>RoundRobin</td><td><strong>轮询</strong>，按公约后的权重设置轮询比率</td></tr><tr><td>LeastActive</td><td><strong>最少活跃调用数</strong>，相同活跃数的随机，活跃数指调用前后计数差</td></tr><tr><td>ConsistentHash</td><td><strong>一致性 Hash</strong>，相同参数的请求总是发到同一提供者</td></tr></tbody></table><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="服务端服务级别"><a href="#服务端服务级别" class="headerlink" title="服务端服务级别"></a>服务端服务级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span>  <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roundrobin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客户端服务级别"><a href="#客户端服务级别" class="headerlink" title="客户端服务级别"></a>客户端服务级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roundrobin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="服务端方法级别"><a href="#服务端方法级别" class="headerlink" title="服务端方法级别"></a>服务端方法级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roundrobin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="客户端方法级别"><a href="#客户端方法级别" class="headerlink" title="客户端方法级别"></a>客户端方法级别</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">loadbalance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roundrobin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Dubbo-多协议支持"><a href="#Dubbo-多协议支持" class="headerlink" title="Dubbo 多协议支持"></a>Dubbo 多协议支持</h2><blockquote><p>官方文档：<a href="https://dubbo.apache.org/zh-cn/docs/user/demos/multi-protocols.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/demos/multi-protocols.html</a></p></blockquote><h3 id="多协议支撑"><a href="#多协议支撑" class="headerlink" title="多协议支撑"></a>多协议支撑</h3><ul><li>Dubbo 支持多种协议</li><li>最常见的协议是 dubbo</li><li>RMI、Hessian、HTTP、Redis、Memcached 等多种协议</li></ul><h3 id="协议对比"><a href="#协议对比" class="headerlink" title="协议对比"></a>协议对比</h3><table><thead><tr><th>特性对比</th><th>dubbo</th><th>RMI</th><th>Hessian</th></tr></thead><tbody><tr><td>连接数</td><td>单连接</td><td>多连接</td><td>多连接</td></tr><tr><td>连接方式</td><td>长连接</td><td>短连接</td><td>短连接</td></tr><tr><td>传输协议</td><td>TCP 传输</td><td>同步传输</td><td>同步传输</td></tr><tr><td>传输方式</td><td>NIO 异步传输</td><td>同步传输</td><td>同步传输</td></tr><tr><td>适用场景</td><td>1. 数据包较小<br>2. 消费者个数多<br>3. 常规方式</td><td>1. 数据包大小不一<br>2. 消费者和提供者数量相差不大</td><td>1. 数据包大小不一<br>2. 消费者和提供者数量相差不大</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>API 网关与服务模块调用方式（API 网关相当于服务消费者，服务模块相当于服务提供者）</li><li>Dubbo 特性：负载均衡、启动检查、Dubbo 协议</li><li>JWT 的业务应用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（4）：业务基础环境构建</title>
      <link href="/2020/03/09/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/4.%E4%B8%9A%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%EF%BC%9A%E4%B8%9A%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/"/>
      <url>/2020/03/09/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/4.%E4%B8%9A%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%EF%BC%9A%E4%B8%9A%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ul><li>构建基于 Guns + SpringBoot + Dubbo 的框架</li><li>学会抽离业务接口</li><li>学会 API 网关变形应用</li></ul><h1 id="API-网关介绍"><a href="#API-网关介绍" class="headerlink" title="API 网关介绍"></a>API 网关介绍</h1><ul><li>API 网关有点类似于设计模式中的 Facade 模式</li><li>API 网关一般都是微服务系统中的门面</li><li><strong>API  网关是微服务的重要组成部分</strong></li></ul><p><img src="/2020/03/09/Dubbo/Dubbo微服务影院系列/4.业务基础环境构建/Dubbo微服务影院系列（4）：业务基础环境构建/image-20200309195624129.png" alt="API网关示意图"></p><h2 id="API-网关的常见作用"><a href="#API-网关的常见作用" class="headerlink" title="API 网关的常见作用"></a>API 网关的常见作用</h2><ul><li>身份验证和安全</li><li>审查和检测</li><li>动态路由</li><li>压力测试</li><li>负载均衡（Dubbo 自带）</li><li>静态相应处理</li></ul><p><img src="/2020/03/09/Dubbo/Dubbo微服务影院系列/4.业务基础环境构建/Dubbo微服务影院系列（4）：业务基础环境构建/image-20200309200432132.png" alt="API网关作用"></p><h1 id="Guns-环境构建"><a href="#Guns-环境构建" class="headerlink" title="Guns 环境构建"></a>Guns 环境构建</h1><h2 id="导入-guns-项目"><a href="#导入-guns-项目" class="headerlink" title="导入 guns 项目"></a>导入 guns 项目</h2><p><img src="/2020/03/09/Dubbo/Dubbo微服务影院系列/4.业务基础环境构建/Dubbo微服务影院系列（4）：业务基础环境构建/image-20200309203515871.png" alt="guns项目结构"></p><h2 id="创建-guns-rest-数据库"><a href="#创建-guns-rest-数据库" class="headerlink" title="创建 guns_rest 数据库"></a>创建 guns_rest 数据库</h2><p><img src="/2020/03/09/Dubbo/Dubbo微服务影院系列/4.业务基础环境构建/Dubbo微服务影院系列（4）：业务基础环境构建/image-20200309203649262.png" alt="guns_rest数据库"></p><h2 id="创建-user-表"><a href="#创建-user-表" class="headerlink" title="创建 user 表"></a>创建 user 表</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for user</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userName<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Records of user</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加-log4j-依赖"><a href="#添加-log4j-依赖" class="headerlink" title="添加 log4j 依赖"></a>添加 log4j 依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改-datasource-的-url"><a href="#修改-datasource-的-url" class="headerlink" title="修改 datasource 的 url"></a>修改 datasource 的 url</h2><p>修改 application.yml 中 spring 的 datasource 的 url 为</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/guns_rest<span class="token punctuation">?</span>autoReconnect=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;serverTimezone</span>=GMT%2B8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h2><p>启动 GunsRestApplication，访问 url <a href="http://localhost/auth?userName=admin&amp;password=admin，若返回如下" target="_blank" rel="noopener">http://localhost/auth?userName=admin&amp;password=admin，若返回如下</a> token 则环境搭建成功。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"randomKey"</span><span class="token operator">:</span> <span class="token string">"zd8rb8"</span><span class="token punctuation">,</span>  <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJIUzUxMiJ9.eyJyYW5kb21LZXkiOiJ6ZDhyYjgiLCJzdWIiOiJhZG1pbiIsImV4cCI6MTU4NDM2MjkxOCwiaWF0IjoxNTgzNzU4MTE4fQ.mR7Elro8oK8T2Rx6FE02FWTvORJnUAcFfPka4-KbQYsSpoMQQl5iUgd-wd9wYIw_5wbXpn3TFoii72suPn0b4A"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="API-网关模块构建测试"><a href="#API-网关模块构建测试" class="headerlink" title="API 网关模块构建测试"></a>API 网关模块构建测试</h1><p>在 guns 项目中复制一份 guns-rest 模块并重命名为 guns-gateway，在主模块 pom.xml 中添加 <module>guns-gateway</module></p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>guns-admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>guns-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>guns-rest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>guns-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>guns-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改其 pom.xml 中有关名称为 guns-gateway，并在 Project Structure 中将该模块重命名为 guns-gateway，同时删除原来 guns-rest 中多余的 Content Root（从 guns-gateway 加入的）</p><p><img src="/2020/03/09/Dubbo/Dubbo微服务影院系列/4.业务基础环境构建/Dubbo微服务影院系列（4）：业务基础环境构建/image-20200309210548081.png" alt="需删除的Content Root"></p><p>这样 guns-gateway 就构建好了（测试同 guns-rest）。</p><h1 id="API-网关集成-Dubbo"><a href="#API-网关集成-Dubbo" class="headerlink" title="API 网关集成 Dubbo"></a>API 网关集成 Dubbo</h1><p>在 guns-gateway 项目的 pom.xml 文件中添加 Dubbo 和 ZooKeeper 的依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 application.yml 中添加</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cinema<span class="token punctuation">-</span>gateway  <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">registry</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 Application 类上添加注解 @EnableDubboConfiguration</li><li>在 Service 实现类上添加注解 @Component 和 @Service(interfaceClass = UserAPI.class)，其中 @Service 来自Dubbo</li></ul><h1 id="抽离业务-API"><a href="#抽离业务-API" class="headerlink" title="抽离业务 API"></a>抽离业务 API</h1><ul><li>在 guns 项目中复制一份 guns-core 模块并重命名为 guns-api</li><li>修改其 pom.xml 中各名称后，删除其所有依赖</li><li>删除所有 java 下所有包，创建 api 包，其中可创建公用接口类</li><li>使用 Maven 的 install 指令将其放入库中</li></ul><p><img src="/2020/03/09/Dubbo/Dubbo微服务影院系列/4.业务基础环境构建/Dubbo微服务影院系列（4）：业务基础环境构建/image-20200309215810417.png" alt="maven install"></p><ul><li>在主模块的 pom.xml 中添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.stylefeng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guns-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${guns.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 guns-gateway 的 pom.xml 中添加依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.stylefeng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guns-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后，就可以在 guns-gateway 模块中，引入 guns-api 中的接口来使用了。这样接口类只需要在 guns-api 中写一份就够了，避免了冗余，达到了抽离业务 API 的效果。</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（3）：环境搭建</title>
      <link href="/2020/03/08/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/3.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/03/08/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/3.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h1><h2 id="基于Guns-SpringBoot-Dubbo构建影院平台"><a href="#基于Guns-SpringBoot-Dubbo构建影院平台" class="headerlink" title="基于Guns + SpringBoot + Dubbo构建影院平台"></a>基于Guns + SpringBoot + Dubbo构建影院平台</h2><ul><li>Spring + Dubbo</li><li>SpringBoot + Dubbo</li></ul><h2 id="微服务基本概念"><a href="#微服务基本概念" class="headerlink" title="微服务基本概念"></a>微服务基本概念</h2><ul><li>Provider：服务提供者</li><li>Consumer：服务调用者，调用 Provider 提供的服务实现</li><li>同一个服务可以即是 Provider，又是 Consumer</li></ul><p>以下可以选用 Spring 或 SpringBoot</p><h2 id="Spring基础环境构建"><a href="#Spring基础环境构建" class="headerlink" title="Spring基础环境构建"></a>Spring基础环境构建</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/2020/03/08/Dubbo/Dubbo微服务影院系列/3.环境搭建/Dubbo微服务影院系列（3）：环境搭建/image-20200306232618900.png" alt="Spring基础环境项目结构"></p><h3 id="主模块（Spring-Dubbo-Demo）"><a href="#主模块（Spring-Dubbo-Demo）" class="headerlink" title="主模块（Spring-Dubbo-Demo）"></a>主模块（Spring-Dubbo-Demo）</h3><p>在 pom.xml 中添加 dependencies</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.6.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.21.0-GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring相关jar --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子模块（provider、consumer）"><a href="#子模块（provider、consumer）" class="headerlink" title="子模块（provider、consumer）"></a>子模块（provider、consumer）</h3><p>在 resources 中添加 applicationContext.xml（可更改后缀）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd    <span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring的直连提供者"><a href="#Spring的直连提供者" class="headerlink" title="Spring的直连提供者"></a>Spring的直连提供者</h2><h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><p>applicationContext-hello-provider.xml 配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello-world-app<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20880<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>quickStartService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjut.zjxjwxk.dubbo.quickstart.QuickStartServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span>    <span class="token attr-name">registry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>N/A<span class="token punctuation">"</span></span>    <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjut.zjxjwxk.dubbo.ServiceAPI<span class="token punctuation">"</span></span>    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>quickStartService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 provider</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext-hello-provider.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h3><p>consumer 的 applicationContext-hello-consumer.xml 配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consumer-of-hello-world-app<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consumerService<span class="token punctuation">"</span></span>    <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjut.zjxjwxk.dubbo.ServiceAPI<span class="token punctuation">"</span></span>    <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo://localhost:20880<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 consumer 即可获取和调用 provider 提供的接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext-hello-consumer.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            String message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取接口</span>            ServiceAPI serviceAPI <span class="token operator">=</span> <span class="token punctuation">(</span>ServiceAPI<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"consumerService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serviceAPI<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBoot基础环境构建"><a href="#SpringBoot基础环境构建" class="headerlink" title="SpringBoot基础环境构建"></a>SpringBoot基础环境构建</h2><h3 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/2020/03/08/Dubbo/Dubbo微服务影院系列/3.环境搭建/Dubbo微服务影院系列（3）：环境搭建/image-20200306233743772.png" alt="SpringBoot基础环境项目结构"></p><h3 id="主模块（SpringBoot-Dubbo-Demo）"><a href="#主模块（SpringBoot-Dubbo-Demo）" class="headerlink" title="主模块（SpringBoot-Dubbo-Demo）"></a>主模块（SpringBoot-Dubbo-Demo）</h3><h3 id="子模块（consumer、provider）"><a href="#子模块（consumer、provider）" class="headerlink" title="子模块（consumer、provider）"></a>子模块（consumer、provider）</h3><h4 id="provider-1"><a href="#provider-1" class="headerlink" title="provider"></a>provider</h4><ul><li>配置 application.properties</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml">spring.application.name=dubbo<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starterspring.dubbo.server=truespring.dubbo.registry=N/A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="consumer-1"><a href="#consumer-1" class="headerlink" title="consumer"></a>consumer</h4><ul><li>配置 application.properties</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml">spring.application.name=dubbo<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SpringBoot的直连提供者"><a href="#SpringBoot的直连提供者" class="headerlink" title="SpringBoot的直连提供者"></a>SpringBoot的直连提供者</h2><p>给 provider 和 consumer 的 Application 都添加 @EnableDubboConfiguration 注解。</p><h3 id="provider-2"><a href="#provider-2" class="headerlink" title="provider"></a>provider</h3><ul><li>给实现类添加     @Component 和 @Service 注解（来自dubbo的）</li><li>@Service 指明实现接口的     Class</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> ServiceAPI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ServiceAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"quickstart-provider-message="</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="consumer-2"><a href="#consumer-2" class="headerlink" title="consumer"></a>consumer</h3><ul><li>consumer 即可注入并调用接口</li><li>声明的接口添加 @Reference 注解并注明 url （dubbo默认在20880端口）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">"dubbo://localhost:20880"</span><span class="token punctuation">)</span>    ServiceAPI serviceAPI<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serviceAPI<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>项目结构</li></ul><p><img src="/2020/03/08/Dubbo/Dubbo微服务影院系列/3.环境搭建/Dubbo微服务影院系列（3）：环境搭建/image-20200306234410548.png" alt="SpringBoot的直连提供者项目结构"></p><h1 id="注册中心概念"><a href="#注册中心概念" class="headerlink" title="注册中心概念"></a>注册中心概念</h1><h2 id="直连提供者"><a href="#直连提供者" class="headerlink" title="直连提供者"></a>直连提供者</h2><ul><li>消费端知道服务提供者的地址，直接进行连接</li><li>该种方式一般只在测试环境中使用</li><li>直连提供者限制了分布式的易扩展性</li></ul><h2 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h2><p><img src="/2020/03/08/Dubbo/Dubbo微服务影院系列/3.环境搭建/Dubbo微服务影院系列（3）：环境搭建/image-20200306234710428.png" alt="Dubbo架构"></p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心，通常使用 ZooKeeper</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><h1 id="ZooKeeper安装和启动"><a href="#ZooKeeper安装和启动" class="headerlink" title="ZooKeeper安装和启动"></a>ZooKeeper安装和启动</h1><ul><li>从 Apache ZooKeeper 官网下载 <a href="https://www.apache.org/dyn/closer.cgi/zookeeper" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi/zookeeper</a></li><li>在 conf 目录下将 zoo-sample.cfg 改为 zoo.cfg</li><li>在 bin 目录下启动 zkServer.sh<pre class="line-numbers language-shell"><code class="language-shell">sh zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="Spring集成注册中心"><a href="#Spring集成注册中心" class="headerlink" title="Spring集成注册中心"></a>Spring集成注册中心</h1><h2 id="provider-3"><a href="#provider-3" class="headerlink" title="provider"></a>provider</h2><p>在 applicationContext-hello-provider.xml 中添加注册中心配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper://localhost:2181<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>去除 service 中的 registry 属性</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span>    <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjut.zjxjwxk.dubbo.ServiceAPI<span class="token punctuation">"</span></span>    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>quickStartService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--registry="N/A"--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="consumer-3"><a href="#consumer-3" class="headerlink" title="consumer"></a>consumer</h2><p>在 applicationContext-hello-consumer.xml 中添加注册中心配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper://localhost:2181<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>去除 reference 中的 url 属性（非直连，而是通过 zookeeper 注册中心）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consumerService<span class="token punctuation">"</span></span>    <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjut.zjxjwxk.dubbo.ServiceAPI<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--url="dubbo://localhost:20880"--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SpringBoot集成注册中心"><a href="#SpringBoot集成注册中心" class="headerlink" title="SpringBoot集成注册中心"></a>SpringBoot集成注册中心</h1><h2 id="provider-4"><a href="#provider-4" class="headerlink" title="provider"></a>provider</h2><p>在 pom.xml 中添加 ZooKeeper 依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 application.properties 中添加注册中心</p><pre class="line-numbers language-yaml"><code class="language-yaml">spring.dubbo.registry=zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="consumer-4"><a href="#consumer-4" class="headerlink" title="consumer"></a>consumer</h2><p>在 pom.xml 中添加 ZooKeeper 依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 application.properties 中添加注册中心</p><pre class="line-numbers language-yaml"><code class="language-yaml">spring.dubbo.registry=zookeeper<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>去掉 @Reference 括号中的 url （非直连，而是通过 zookeeper 注册中心）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Reference</span>    ServiceAPI serviceAPI<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1014 Waiting in Line (30分)</title>
      <link href="/2020/03/08/PAT/Advanced_Level/A1014/"/>
      <url>/2020/03/08/PAT/Advanced_Level/A1014/</url>
      
        <content type="html"><![CDATA[<p>Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p><ul><li>The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.</li><li>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.</li><li>Customer[i] will take T[i] minutes to have his/her transaction processed.</li><li>The first N customers are assumed to be served at 8:00am.</li></ul><p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p><p>For example, suppose that a bank has 2 windows and each window may have 2 customers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer[1] is served at window[1] while customer[2] is served at window[2]. Customer[3] will wait in front of window[1] and customer[4] will wait in front of window[2]. Customer[5] will wait behind the yellow line.</p><p>At 08:01, customer[1] is done and customer[5] enters the line in front of window[1] since that line seems shorter now. Customer[2] will leave at 08:02, customer[4] at 08:06, customer[3] at 08:07, and finally customer[5] at 08:10.</p><h1 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h1><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: <em>N</em> (≤20, number of windows), <em>M</em> (≤10, the maximum capacity of each line inside the yellow line), <em>K</em> (≤1000, number of customers), and <em>Q</em> (≤1000, number of customer queries).</p><p>The next line contains <em>K</em> positive integers, which are the processing time of the <em>K</em> customers.</p><p>The last line contains <em>Q</em> positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to <em>K</em>.</p><h1 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h1><p>For each of the <em>Q</em> customers, print in one line the time at which his/her transaction is finished, in the format <code>HH:MM</code> where <code>HH</code> is in [08, 17] and <code>MM</code> is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output <code>Sorry</code> instead.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h1><pre class="line-numbers language-in"><code class="language-in">2 2 7 51 2 6 4 3 534 23 4 5 6 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h1><pre class="line-numbers language-out"><code class="language-out">08:0708:0608:1017:00Sorry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>如果⼀个客户在17:00以及以后还没有开始服务（<strong>此处不是结束服务是开始服务</strong>）就不再服务输出sorry；如果这个服务已经开始了了，无论时间多长都要等他服务完毕。如果当成结束服务，则测试点2，4，5不能通过。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxk <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">,</span> maxn <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">,</span> maxTime <span class="token operator">=</span> <span class="token number">540</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> q<span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>maxk<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> query<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            que<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>time <span class="token operator">!=</span> maxTime <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>que<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> front <span class="token operator">=</span> que<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        que<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ans<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            que<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 额外处理到17:00还没有服务完的客户</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>que<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> front <span class="token operator">=</span> que<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> time <span class="token operator">+</span> t<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>query<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d\n"</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">+</span> ans<span class="token punctuation">[</span>query<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>query<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sorry\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（2）：微服务入门</title>
      <link href="/2020/03/06/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/2.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/06/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/2.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="传统业务应用"><a href="#传统业务应用" class="headerlink" title="传统业务应用"></a>传统业务应用</h1><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/2.微服务入门/Dubbo微服务影院系列（2）：微服务入门/image-20200306231434458.png" alt="传统业务应用"></p><h1 id="传统应用带来的问题"><a href="#传统应用带来的问题" class="headerlink" title="传统应用带来的问题"></a>传统应用带来的问题</h1><ul><li>单一业务开发和迭代困难</li><li>扩容困难</li><li>部署和回滚困难</li></ul><h1 id="微服务发展历程"><a href="#微服务发展历程" class="headerlink" title="微服务发展历程"></a>微服务发展历程</h1><h2 id="面向服务开发-SOA"><a href="#面向服务开发-SOA" class="headerlink" title="面向服务开发 - SOA"></a>面向服务开发 - SOA</h2><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/2.微服务入门/Dubbo微服务影院系列（2）：微服务入门/image-20200306231555431.png" alt="SOA"></p><h2 id="微服务开发"><a href="#微服务开发" class="headerlink" title="微服务开发"></a>微服务开发</h2><h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><ul><li>微服务是一种将业务系统进一步拆分的架构风格</li><li>微服务强调每个单一业务都独立运行</li><li>每个单一服务都应该使用更轻量的机制保持通信</li><li>服务不强调环境，可以不同语言或数据源</li></ul><h1 id="微服务选择"><a href="#微服务选择" class="headerlink" title="微服务选择"></a>微服务选择</h1><ul><li>Dubbo</li><li>Spring Cloud</li><li>Zero ICE</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo微服务影院系列（1）：课程导学</title>
      <link href="/2020/03/06/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/1.%E8%AF%BE%E7%A8%8B%E5%AF%BC%E5%AD%A6/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E5%AF%BC%E5%AD%A6/"/>
      <url>/2020/03/06/Dubbo/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97/1.%E8%AF%BE%E7%A8%8B%E5%AF%BC%E5%AD%A6/Dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BD%B1%E9%99%A2%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E5%AF%BC%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么使用Dubbo"><a href="#为什么使用Dubbo" class="headerlink" title="为什么使用Dubbo"></a>为什么使用Dubbo</h1><h2 id="Dubbo-是基于-RPC-通信协议，速度更快"><a href="#Dubbo-是基于-RPC-通信协议，速度更快" class="headerlink" title="Dubbo 是基于 RPC 通信协议，速度更快"></a>Dubbo 是基于 RPC 通信协议，速度更快</h2><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/1.课程导学/Dubbo微服务影院系列（1）：课程导学/image-20200306225758803.png" alt="千万次调用"></p><h2 id="Dubbo-的多中心配置更灵活"><a href="#Dubbo-的多中心配置更灵活" class="headerlink" title="Dubbo 的多中心配置更灵活"></a>Dubbo 的多中心配置更灵活</h2><ul><li>ZooKeeper</li><li>Redis</li></ul><h2 id="Dubbo-可以按需集成其他组件，完成微服务生态环境构建"><a href="#Dubbo-可以按需集成其他组件，完成微服务生态环境构建" class="headerlink" title="Dubbo 可以按需集成其他组件，完成微服务生态环境构建"></a>Dubbo 可以按需集成其他组件，完成微服务生态环境构建</h2><ul><li>Hystrix</li><li>Zipkin</li></ul><h2 id="包括阿里、小米、京东等多家互联网公司都有使用"><a href="#包括阿里、小米、京东等多家互联网公司都有使用" class="headerlink" title="包括阿里、小米、京东等多家互联网公司都有使用"></a>包括阿里、小米、京东等多家互联网公司都有使用</h2><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>构建业务完整的商业化项目</li><li>掌握以 Dubbo 为底的各项微服务套件的应用</li><li>掌握基于 Dubbo 的微服务常见面试问题</li></ul><h1 id="业务结构图"><a href="#业务结构图" class="headerlink" title="业务结构图"></a>业务结构图</h1><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/1.课程导学/Dubbo微服务影院系列（1）：课程导学/image-20200306230144862.png" alt="业务结构图"></p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/1.课程导学/Dubbo微服务影院系列（1）：课程导学/image-20200306230227966.png" alt="核心功能"></p><h1 id="主要知识点"><a href="#主要知识点" class="headerlink" title="主要知识点"></a>主要知识点</h1><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/1.课程导学/Dubbo微服务影院系列（1）：课程导学/image-20200306230255648.png" alt="主要知识点"></p><h1 id="技术架构图"><a href="#技术架构图" class="headerlink" title="技术架构图"></a>技术架构图</h1><p><img src="/2020/03/06/Dubbo/Dubbo微服务影院系列/1.课程导学/Dubbo微服务影院系列（1）：课程导学/image-20200306230335981.png" alt="技术架构图"></p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务架构 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Outsourcing</title>
      <link href="/2019/06/21/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Outsourcing/Outsourcing/"/>
      <url>/2019/06/21/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Outsourcing/Outsourcing/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-GSE"><a href="#What-is-GSE" class="headerlink" title="What is GSE?"></a>What is GSE?</h1><p>GSE is a complex phenomenon that unites many different collaboration models and project organization models.</p><h1 id="Reason-for-GSE"><a href="#Reason-for-GSE" class="headerlink" title="Reason for GSE?"></a>Reason for GSE?</h1><ul><li>Reduce overheads, free up resources</li><li>Improve efficiency</li><li>Offload non-core functions</li><li>Get access to specialized skills</li><li>Get access to a specific market</li></ul><h1 id="Differences-between-co-located-team-and-global-team"><a href="#Differences-between-co-located-team-and-global-team" class="headerlink" title="Differences between co-located team and global team"></a>Differences between co-located team and global team</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190623152437638.png" alt="Differences between co-located team and global team"> </p><h1 id="According-to-What-When-Where-to-determine-whether-the-supplier-is-suitable"><a href="#According-to-What-When-Where-to-determine-whether-the-supplier-is-suitable" class="headerlink" title="According to What, When, Where to determine whether the supplier is suitable"></a>According to What, When, Where to determine whether the supplier is suitable</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190622103720847.png" alt="Each combination is unique"> </p><h1 id="Alternative"><a href="#Alternative" class="headerlink" title="Alternative"></a>Alternative</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190622110154177.png" alt="Alternative">  </p><h1 id="Different-transfers"><a href="#Different-transfers" class="headerlink" title="Different transfers"></a>Different transfers</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190623164656509.png" alt="Different transfers">  </p><h1 id="Different-transfers-can-result-in"><a href="#Different-transfers-can-result-in" class="headerlink" title="Different transfers can result in"></a>Different transfers can result in</h1><ul><li>Full relocation of a product to the receiving site</li><li>Relocation of a component / task / phase which overall is developed jointly</li></ul><h1 id="18P-There-are-several-ways-or-models-to-transfer-GSE-project-globally-Please-tell-at-least-three-models-that-you-would-apply-in-your-GSE-project-and-give-your-comments-about-their-advantages-and-disadvantages-in-applying-them-respectively"><a href="#18P-There-are-several-ways-or-models-to-transfer-GSE-project-globally-Please-tell-at-least-three-models-that-you-would-apply-in-your-GSE-project-and-give-your-comments-about-their-advantages-and-disadvantages-in-applying-them-respectively" class="headerlink" title="(18P) There are several ways or models to transfer GSE project globally. Please tell at least three models that you would apply in your GSE project, and give your comments about their advantages and disadvantages in applying them respectively."></a>(18P) There are several ways or models to transfer GSE project globally. Please tell at least three models that you would apply in your GSE project, and give your comments about their advantages and disadvantages in applying them respectively.</h1><h2 id="Customization-model"><a href="#Customization-model" class="headerlink" title="Customization model"></a>Customization model</h2><p><strong>advantages</strong>: customization can satisfy customers according to their special requirements</p><p><strong>disadvantages</strong>: customization will use more resource, such as, human resources, time and money.</p><h2 id="Follow-the-sun-model"><a href="#Follow-the-sun-model" class="headerlink" title="Follow-the-sun model"></a>Follow-the-sun model</h2><p><strong>advantages</strong>: It works for defect resolution and support</p><p><strong>disadvantages</strong>: Not good for development</p><h2 id="Modularized-model"><a href="#Modularized-model" class="headerlink" title="Modularized model"></a>Modularized model</h2><p><strong>advantage</strong>: This reduce the need for inter-site coordination and communication; good for decoupled and clear tasks.</p><p><strong>disadvantage</strong>: Increase the cost of whole project.</p><h1 id="Critical-factors-that-alleviate-transfers"><a href="#Critical-factors-that-alleviate-transfers" class="headerlink" title="Critical factors that alleviate transfers"></a>Critical factors that alleviate transfers</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190621221551428.png" alt="Critical factors"> </p><h1 id="Describe-6-reasons-for-applying-Global-Software-Engineering-GSE-and-3-reasons-for-not-good-to-do-GSE"><a href="#Describe-6-reasons-for-applying-Global-Software-Engineering-GSE-and-3-reasons-for-not-good-to-do-GSE" class="headerlink" title="Describe 6 reasons for applying Global Software Engineering(GSE) and 3 reasons for not good to do GSE."></a>Describe 6 reasons for applying Global Software Engineering(GSE) and 3 reasons for not good to do GSE.</h1><h2 id="Good"><a href="#Good" class="headerlink" title="Good:"></a>Good:</h2><ol><li>Reduce development costs</li><li>Leveraging time zone effectiveness</li><li>Access to large skilled labor pool</li><li>Closer proximity to market and customer</li><li>Innovation and shared best practice</li><li>Improved resource allocation</li></ol><h2 id="Not-good"><a href="#Not-good" class="headerlink" title="Not good:"></a>Not good:</h2><ol><li>Loss of knowledge within the product</li><li>Temporary productivity decrease</li><li>Temporal decrease in quality</li></ol><h1 id="Causes-of-failure-of-global-projects"><a href="#Causes-of-failure-of-global-projects" class="headerlink" title="Causes of failure of global projects"></a>Causes of failure of global projects</h1><p>Many specific problems, but mainly because managers are unaware of these problems and fail to properly coordinate work in a distributed environment</p><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190622140556011.png" alt="Major challenges"> </p><h1 id="16P-The-course-discussed-quite-lot-about-3C-in-GSE-since-they-are-important-factors-for-successful-project-in-GES-The-3C-are-6P-1-C-2-C-3-C-Please-tell-the-main-contents-or-activities-that-involved-in-each-C-10P"><a href="#16P-The-course-discussed-quite-lot-about-3C-in-GSE-since-they-are-important-factors-for-successful-project-in-GES-The-3C-are-6P-1-C-2-C-3-C-Please-tell-the-main-contents-or-activities-that-involved-in-each-C-10P" class="headerlink" title="(16P) The course discussed quite lot about 3C in GSE, since they are important factors for successful project in GES The 3C are (6P) (1) C_____________ (2) C_________________ (3) C__________________ Please tell the main contents or activities that involved in each C (10P)"></a>(16P) The course discussed quite lot about 3C in GSE, since they are important factors for successful project in GES The 3C are (6P) (1) C_____________ (2) C_________________ (3) C__________________ Please tell the main contents or activities that involved in each C (10P)</h1><h2 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h2><ul><li>Cohesiveness, teamness, mutual trust</li><li>Common background, language and culture</li></ul><h2 id="Coordination"><a href="#Coordination" class="headerlink" title="Coordination"></a>Coordination</h2><ul><li>Joint processes and tools</li><li>Plan-driven standardized approach</li></ul><h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><ul><li>Process transparency and visibility</li><li>Managers directly supervise team performance</li></ul><h1 id="What-is-a-project"><a href="#What-is-a-project" class="headerlink" title="What is a project?"></a>What is a project?</h1><h2 id="A-project-is-a-temporary-endeavour-undertaken-to-create-a-unique-product-or-service"><a href="#A-project-is-a-temporary-endeavour-undertaken-to-create-a-unique-product-or-service" class="headerlink" title="A project is a temporary endeavour undertaken to create a unique product or service."></a>A project is a temporary endeavour undertaken to create a unique product or service.</h2><ul><li>Temporary means that every project has a definite beginning and a definite end.</li><li>Unique means that the product or service is different in some distinguishing way from all similar products or services.</li></ul><h1 id="15P-Both-development-models-of-agile-method-and-waterfall-method-can-be-applied-in-GSE-project-Briefly-describe-the-two-methods-just-some-basic-idea-or-steps-without-details-and-why-you-would-choose-which-method-in-your-project-development"><a href="#15P-Both-development-models-of-agile-method-and-waterfall-method-can-be-applied-in-GSE-project-Briefly-describe-the-two-methods-just-some-basic-idea-or-steps-without-details-and-why-you-would-choose-which-method-in-your-project-development" class="headerlink" title="(15P) Both development models of agile method and waterfall method can be applied in GSE project. Briefly describe the two methods (just some basic idea or steps without details) and why you would choose which method in your project development."></a>(15P) Both development models of agile method and waterfall method can be applied in GSE project. Briefly describe the two methods (just some basic idea or steps without details) and why you would choose which method in your project development.</h1><p>The <strong>waterfall model</strong> is a sequential (non-iterative) design process, used in software development processes, in which progress is flowing steadily downwards (like a waterfall). Steps can be described in following picture:</p><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190621192336747.png" alt="Waterfall"> </p><p><strong>Agile method</strong> is a group of software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement, and encourages rapid and flexible response to change. Steps can be described in following picture: </p><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190621192533027.png" alt="Agile"></p><h2 id="Advantage-of-Agile"><a href="#Advantage-of-Agile" class="headerlink" title="Advantage of Agile"></a>Advantage of Agile</h2><ul><li>Focus on the question of how to address key problems in software development: too long, too costly, poor quality</li><li>Have the potential to improve communication and, as a result, reduce coordination and control overhead</li><li>Small co-located teams, so it is easily for coordination.</li><li>Scrum Agile method is a simple and effective way to have control over your development process, make sure things go according to plan</li></ul><h1 id="The-Difference-Agility-vs-Waterfall"><a href="#The-Difference-Agility-vs-Waterfall" class="headerlink" title="The Difference: Agility vs. Waterfall"></a>The Difference: Agility vs. Waterfall</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190623193652637.png" alt="Agility vs. Waterfall"> </p><h1 id="20P-Culture-does-matter-in-GSE-then-what-is-culture-can-be-examples-5P-What-are-building-blocks-elements-for-a-culture-5P-And-describe-Hofstede’s-5-dimensions-of-culture-10P"><a href="#20P-Culture-does-matter-in-GSE-then-what-is-culture-can-be-examples-5P-What-are-building-blocks-elements-for-a-culture-5P-And-describe-Hofstede’s-5-dimensions-of-culture-10P" class="headerlink" title="(20P) Culture does matter in GSE, then what is culture (can be examples) (5P)? What are building blocks (elements) for a culture (5P)? And describe Hofstede’s 5 dimensions of culture (10P)."></a>(20P) Culture does matter in GSE, then what is culture (can be examples) (5P)? What are building blocks (elements) for a culture (5P)? And describe Hofstede’s 5 dimensions of culture (10P).</h1><h2 id="What-is-culture"><a href="#What-is-culture" class="headerlink" title="What is culture?"></a>What is culture?</h2><p>Culture is a set of shared experiences, understandings, and meanings among members of a group, an organization, a community, or a nation.</p><p>Culture provides members with images of:</p><ul><li>the basic concerns, principles, ethics</li><li>bodies of manners</li><li>Rituals(礼仪）, ideologies</li><li>strategies, tactics of self-survival</li><li>notions of good acts and bad</li><li>various forms of folklore and legends</li></ul><h2 id="What-are-building-blocks-elements-for-a-culture"><a href="#What-are-building-blocks-elements-for-a-culture" class="headerlink" title="What are building blocks (elements) for a culture?"></a>What are building blocks (elements) for a culture?</h2><p><strong>values</strong>, including preferences people use to make work related and communication related decisions in projects.</p><p><strong>practices</strong>, including cultural norms for adopting specific project management styles and organization structures.</p><h2 id="Hofstede’s-5-dimensions-of-culture"><a href="#Hofstede’s-5-dimensions-of-culture" class="headerlink" title="Hofstede’s 5 dimensions of culture?"></a>Hofstede’s 5 dimensions of culture?</h2><ul><li><strong>Power distance</strong> - how a society handles inequalities; A higher degree of the Index indicates that hierarchy is clearly established and executed in society, without doubt or reason. A lower degree of the Index signifies that people question authority and attempt to distribute power.</li><li><strong>Individualism/collectivism</strong> - behavior towards the group; individualism has loose ties that often only relates an individual. Collectivism emphasizes on building skills and has tightly-integrated relations into group.</li><li><strong>Masculinity/femininity</strong> - behavior according to gender; besides distinction of gender, masculinity is defined as a preference in society for achievement, heroism, assertiveness and material rewards for success. Femininity represents a preference for cooperation, modesty, caring for the weak and quality of life.</li><li><strong>Uncertainty avoidance</strong> - the need for structure; a high degree in this index strictly follows laws, guidelines, behaviors and etc. a low degree in this index shows more acceptance of differing thoughts or ideas.</li><li><strong>Long term orientation(LTO)</strong> - value of long-standing traditions; a high degree in this index indicates the factors of family, elders, strong work ethic and high value. A low degree in this index emphasizes creativity, individualism, equality and selfactualization.</li></ul><h1 id="The-effect-of-culture-in-software-development-organizations"><a href="#The-effect-of-culture-in-software-development-organizations" class="headerlink" title="The effect of culture in software development organizations"></a>The effect of culture in software development organizations</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190622140811067.png" alt="The effect of culture in software development organizations"> </p><h1 id="5P-You-are-a-project-leader-for-GSE-project-and-you-know-it-is-important-to-build-up-to-the-team-work-What-would-you-do-to-build-up-your-team-to-trust-each-other-Provide-at-least-5-ways-or-kinds-of-activities-to-this-team-building"><a href="#5P-You-are-a-project-leader-for-GSE-project-and-you-know-it-is-important-to-build-up-to-the-team-work-What-would-you-do-to-build-up-your-team-to-trust-each-other-Provide-at-least-5-ways-or-kinds-of-activities-to-this-team-building" class="headerlink" title="(5P) You are a project leader for GSE project, and you know it is important to build up to the team work. What would you do to build up your team to trust each other? Provide at least 5 ways or kinds of activities to this team building."></a>(5P) You are a project leader for GSE project, and you know it is important to build up to the team work. What would you do to build up your team to trust each other? Provide at least 5 ways or kinds of activities to this team building.</h1><ul><li>kick-off meetings</li><li>regular traveling</li><li>team-building activities</li><li>cultural training</li><li>regular video-conferences</li></ul><h1 id="Phase-in-forming-a-team"><a href="#Phase-in-forming-a-team" class="headerlink" title="Phase in forming a team"></a>Phase in forming a team</h1><p><img src="/2019/06/21/期末复习/Outsourcing/Outsourcing/image-20190623191253458.png" alt="Phase in forming a team"> </p><p><strong>Forming:</strong> the team gets together and gets to know each other. It clarifies roles, figures out the tasks and objectives</p><p><strong>Storming:</strong> conflicts break out over roles, objectives, and task allocations. Different leaders, official or otherwise, are pursuing different goals</p><p><strong>Norming:</strong> the team begins to form norms, roles, and protocols for working together. Some team cohesion may begin.</p><p><strong>Performing:</strong> the team begins to perform well, working together toward a common goal. Conflicts are handled constructively</p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTH </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己编译JDK</title>
      <link href="/2019/03/11/Java/JVM/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91JDK/"/>
      <url>/2019/03/11/Java/JVM/%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91JDK/</url>
      
        <content type="html"><![CDATA[<p>想要一探 JDK 内部的实现机制，最便捷的捷径之一就是自己编译一套 JDK，通过阅读和跟踪调试 JDK 源码去了解 Java 技术体系的原理。本人选择了 OpenJDK 进行编译。</p><h2 id="1-获取-JDK-源码"><a href="#1-获取-JDK-源码" class="headerlink" title="1. 获取 JDK 源码"></a>1. 获取 JDK 源码</h2><p>获取 JDK 源码有两种方式：</p><h3 id="1-通过-Mercurial-代码版本管理工具从-Repository-中直接取得源码"><a href="#1-通过-Mercurial-代码版本管理工具从-Repository-中直接取得源码" class="headerlink" title="(1). 通过 Mercurial 代码版本管理工具从 Repository 中直接取得源码"></a>(1). 通过 Mercurial 代码版本管理工具从 Repository 中直接取得源码</h3><p>Repository 地址：<a href="http://hg.openjdk.java.net/jdk7u/jdk7u" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk7u/jdk7u</a></p><p>获取过程如以下代码所示</p><pre class="line-numbers language-shell"><code class="language-shell">hg clone http://hg.openjdk.java.net/jdk7u/jdk7u-devcd jdk7u-devchmod 755 get_source.sh./get_source.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从版本管理中看变更轨迹效果较好，但不足之处是速度太慢，而且 Mercurial 不如 Git、SVN 等版本控制工具那样普及。</p><h3 id="2-通过-OpenJDK™-Source-Releases-页面取得打包好的源码"><a href="#2-通过-OpenJDK™-Source-Releases-页面取得打包好的源码" class="headerlink" title="(2). 通过 OpenJDK™ Source Releases 页面取得打包好的源码"></a>(2). 通过 OpenJDK™ Source Releases 页面取得打包好的源码</h3><p>页面地址：<a href="https://download.java.net/openjdk/jdk7/" target="_blank" rel="noopener">https://download.java.net/openjdk/jdk7/</a></p><h2 id="2-系统需求"><a href="#2-系统需求" class="headerlink" title="2. 系统需求"></a>2. 系统需求</h2><p>建议在 Linux、MacOS 或 Solaris 上构建 OpenJDK</p><p>本人采用的是 64 位操作系统，编译的也是 64 位的 OpenJDK</p><h2 id="3-构建编译环境"><a href="#3-构建编译环境" class="headerlink" title="3. 构建编译环境"></a>3. 构建编译环境</h2><p>本人使用的是 MacOS ，需要安装最新版本的 XCode 和 Command Line Tools for Xcode，另外还要准备一个 6u14 以上版本的 JDK，官方称这个 JDK 为 “Bootstrap JDK” 。最后，需要下载一个 1.7.1 以上版本的 Apache Ant，用于执行 Java 编译代码中的 Ant 脚本。</p><h2 id="4-进行编译"><a href="#4-进行编译" class="headerlink" title="4. 进行编译"></a>4. 进行编译</h2><p>最后我们还需要对系统的环境变量做一些简单设置以便编译能够顺利通过，这里给出使用的编译 Shell 脚本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#语言选项,这个必须设置,否则编译好后会出现一个HashTable的NPE错</span><span class="token function">export</span> LANG<span class="token operator">=</span>C<span class="token comment" spellcheck="true">#Bootstrap JDK的安装路径。必须设置</span><span class="token function">export</span> ALT_BOOTDIR<span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home<span class="token comment" spellcheck="true">#允许自动下载依赖</span><span class="token function">export</span> ALLOW_DOWNLOADS<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#并行编译的线程数,设置为和CPU内核数量一致即可</span><span class="token function">export</span> HOTSPOT_BUILD_J0BS<span class="token operator">=</span>8<span class="token function">export</span> ALT_PARALLEL_COMPILE_JOBS<span class="token operator">=</span>8<span class="token comment" spellcheck="true">#比较本次build出来的映像与先前版本的差异。这对我们来说没有意义, </span><span class="token comment" spellcheck="true">#必须设置为false,香则sanity检查会报缺少先前版本JDK的映像的错误提示。 </span><span class="token comment" spellcheck="true">#如桌已经设置dev或者DEV_ONLY=true,这个不显式设置也行</span><span class="token function">export</span> SKIP_COMPARE_IMAGES<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#使用预编译头文件,不加这个编译会更慢一些</span><span class="token function">export</span> USE_PRECOMPILED_HEADER<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#要编译的内容</span><span class="token function">export</span> BUILD_LANGTOOLS<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#export BUILD_JAXP=false</span><span class="token comment" spellcheck="true">#export BUILD_JAXWS=fa1se</span><span class="token comment" spellcheck="true">#export BUILD_CORBA=false</span><span class="token function">export</span> BUILD_HOTSPOT<span class="token operator">=</span>true<span class="token function">export</span> BUILD_JDK<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#要编译的版本</span><span class="token comment" spellcheck="true">#export SKIP_DEBUG_BUILD=false</span><span class="token comment" spellcheck="true">#export SKIP_FASTDEBUG_BUILD=true</span><span class="token comment" spellcheck="true">#export DEBUG_NAME=debug</span><span class="token comment" spellcheck="true">#把它设置为false可以避开java111`ws和浏览器Java插件之类的部分的build</span>BUILD_DEPLOY<span class="token operator">=</span>false<span class="token comment" spellcheck="true">#把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖, </span><span class="token comment" spellcheck="true">#但即便不build出它也已经能得到完整的JDK映像,所以还是别build它好了</span>BUILD_INSTALL<span class="token operator">=</span>false<span class="token comment" spellcheck="true">#编译结果所存放的路径</span><span class="token function">export</span> ALT_OUTPUTDIR<span class="token operator">=</span>/Users/zjxjwxk/Documents/JVM/JDK-Build/build<span class="token comment" spellcheck="true">#这两个环境变量必须去掉,不然会有很诡异的事情发生（我没有具体查过这些 "诡异的</span><span class="token comment" spellcheck="true">#事情” ,Makefile脚本裣查到有这2个变量就会提示警告)</span>unset JAVA_HOMEunset CLASSPATH<span class="token function">make</span> 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">|</span> <span class="token function">tee</span> <span class="token variable">$ALT_OUTPUTDIR</span>/build.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-检查"><a href="#5-检查" class="headerlink" title="5. 检查"></a>5. 检查</h2><p>全部设置结束之后，可以输入 <code>make sanity</code> 来检查我们所做的设置是否全部正确。如果一切顺利，那么几秒钟之后会有类似代码清单1-2所示的输出。</p><pre class="line-numbers language-bash"><code class="language-bash">~/Develop/JVM/jdkBuild/openjdk_7u4$ <span class="token function">make</span> sanity  Build Machine Information:     build machine <span class="token operator">=</span> IcyFenix-RMBP.local  Build Directory Structure:     CWD <span class="token operator">=</span> /Users/IcyFenix/Develop/JVM/jdkBuild/openjdk_7u4     TOPDIR <span class="token operator">=</span> <span class="token keyword">.</span>     LANGTOOLS_TOPDIR <span class="token operator">=</span> ./langtools     JAXP_TOPDIR <span class="token operator">=</span> ./jaxp     JAXWS_TOPDIR <span class="token operator">=</span> ./jaxws     CORBA_TOPDIR <span class="token operator">=</span> ./corba     HOTSPOT_TOPDIR <span class="token operator">=</span> ./hotspot     JDK_TOPDIR <span class="token operator">=</span> ./jdk  Build Directives:     BUILD_LANGTOOLS <span class="token operator">=</span> <span class="token boolean">true</span>      BUILD_JAXP <span class="token operator">=</span> <span class="token boolean">true</span>      BUILD_JAXWS <span class="token operator">=</span> <span class="token boolean">true</span>      BUILD_CORBA <span class="token operator">=</span> <span class="token boolean">true</span>      BUILD_HOTSPOT <span class="token operator">=</span> <span class="token boolean">true</span>      BUILD_JDK    <span class="token operator">=</span> <span class="token boolean">true</span>      DEBUG_CLASSFILES <span class="token operator">=</span>       DEBUG_BINARIES <span class="token operator">=</span>    ……因篇幅关系，中间省略了大量的输出内容……  OpenJDK-specific settings:    FREETYPE_HEADERS_PATH <span class="token operator">=</span> /usr/X11R6/include      ALT_FREETYPE_HEADERS_PATH <span class="token operator">=</span>     FREETYPE_LIB_PATH <span class="token operator">=</span> /usr/X11R6/lib      ALT_FREETYPE_LIB_PATH <span class="token operator">=</span>   Previous JDK Settings:    PREVIOUS_RELEASE_PATH <span class="token operator">=</span> USING-PREVIOUS_RELEASE_IMAGE      ALT_PREVIOUS_RELEASE_PATH <span class="token operator">=</span>     PREVIOUS_JDK_VERSION <span class="token operator">=</span> 1.6.0      ALT_PREVIOUS_JDK_VERSION <span class="token operator">=</span>     PREVIOUS_JDK_FILE <span class="token operator">=</span>       ALT_PREVIOUS_JDK_FILE <span class="token operator">=</span>     PREVIOUS_JRE_FILE <span class="token operator">=</span>       ALT_PREVIOUS_JRE_FILE <span class="token operator">=</span>     PREVIOUS_RELEASE_IMAGE <span class="token operator">=</span> /Library/Java/JavaVirtualMachines/jdk1.7.0_04.jdk/Contents/Home      ALT_PREVIOUS_RELEASE_IMAGE <span class="token operator">=</span>   Sanity check passed.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Makefile 的 Sanity 检查过程输出了编译所需的所有环境变量，如果看到 “Sanity check passed” 说明检查过程通过了，可以输入 <code>make</code> 执行整个 OpenJDK 编译 (make 不加参数，默认编译 make all)。</p><p>编译完成后，进入 OpenJDK 源码下的 build/j2sdk-image 目录，这是整个 JDK 的完整编译结果，复制到 JAVA_HOME 目录，就可以作为一个完整的 JDK 使用，编译出来的虚拟机，在 <code>-version</code> 命令中带有用户的机器名。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span> ./java -version  openjdk version <span class="token string">"1.7.0-internal-fastdebug"</span>  OpenJDK Runtime Environment <span class="token punctuation">(</span>build 1.7.0-internal-fastdebug-icyfenix_2012_12_24_15_57-b00<span class="token punctuation">)</span>  OpenJDK 64-Bit Server VM <span class="token punctuation">(</span>build 23.0-b21-fastdebug, mixed mode<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-单独编译-HotSpot-虚拟机"><a href="#6-单独编译-HotSpot-虚拟机" class="headerlink" title="6. 单独编译 HotSpot 虚拟机"></a>6. 单独编译 HotSpot 虚拟机</h2><p>在大多数时候，如果我们不关心 JDK 中 HotSpot 虚拟机以外的内容，只想单独编译 HotSpot 虚拟机的话（例如调试虚拟机时，每次改动程序都执行整个 OpenJDK 的Makefile，速度肯定受不了），那么使用 hotspot/make 目录 下的 Makefile 进行替换即可，其他参数设置与前面是一致的，这时候虚拟机的输出结果存放在 build/hotspot/outputdir/bsd_amd64_compiler2 目录中，进入后可以见到以下几个目录。</p><pre class="line-numbers language-bash"><code class="language-bash">0 drwxr-xr-x   15 IcyFenix  staff   510B 12 13 17:24 debug  0 drwxr-xr-x   15 IcyFenix  staff   510B 12 13 17:24 fastdebug  0 drwxr-xr-x   15 IcyFenix  staff   510B 12 13 17:25 generated  0 drwxr-xr-x   15 IcyFenix  staff   510B 12 13 17:24 jvmg  0 drwxr-xr-x   15 IcyFenix  staff   510B 12 13 17:24 optimized  0 drwxr-xr-x  584 IcyFenix  staff    19K 12 13 17:25 product  0 drwxr-xr-x   15 IcyFenix  staff   510B 12 13 17:24 profiled <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些目录对应了不同的优化级别，优化级别越高，性能自然越好，但是输出代码与源码的差别就越大，难于调试，具体哪个目录有内容，取决于 <code>make</code> 命令后面的参数。</p><p>在编译结束之后、运行虚拟机之前，还要手工编辑目录下的 env.sh 文件，这个文件由编译脚本自动产生，用于设置虚拟机的环境变量，里面已经发布了 “JAVA_HOME、CLASSPATH、HOTSPOT_BUILD_USER” 3个环境变量，还需要增加一个“LD_LIBRARY_PATH”，内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash">LD_LIBRARY_PATH<span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/jre/lib/amd64/native_threads:<span class="token variable">${JAVA_HOME}</span>/jre/lib/amd64:  <span class="token function">export</span> LD_LIBRARY_PATH <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后执行以下命令启动虚拟机（这时的启动器名为gamma），输出版本号。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span> ./env.sh  ./gamma -version  Using java runtime at: /Library/Java/JavaVirtualMachines/jdk1.7.0_04.jdk/Contents/Home/jre  java version <span class="token string">"1.7.0_04"</span>  Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.7.0_04-b21<span class="token punctuation">)</span>  OpenJDK 64-Bit Server VM <span class="token punctuation">(</span>build 23.0-b21, mixed mode<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到自己编译的虚拟机成功运行起来，很有成就感吧!</p><blockquote><p>来源：《深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》</p><p>作者：周志明</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 简化分页查询Page接口的JSON响应</title>
      <link href="/2019/02/02/Spring%20Boot/Spring-Boot-%E7%AE%80%E5%8C%96%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2Page%E6%8E%A5%E5%8F%A3%E7%9A%84JSON%E5%93%8D%E5%BA%94/"/>
      <url>/2019/02/02/Spring%20Boot/Spring-Boot-%E7%AE%80%E5%8C%96%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2Page%E6%8E%A5%E5%8F%A3%E7%9A%84JSON%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h3 id="多余的分页信息"><a href="#多余的分页信息" class="headerlink" title="多余的分页信息"></a>多余的分页信息</h3><p>Spring Data 的 Page 接口进行数据分页返回了很多很多垃圾信息：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"producerId"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"categoryId"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"耐克sb滑板鞋"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>                <span class="token property">"stock"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>                <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"正常"</span><span class="token punctuation">,</span>                <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token string">"2019-02-02T03:48:33.000+0000"</span><span class="token punctuation">,</span>                <span class="token property">"updateTime"</span><span class="token operator">:</span> <span class="token null">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token property">"producerId"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"categoryId"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"阿迪达斯小白鞋"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>                <span class="token property">"stock"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>                <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"正常"</span><span class="token punctuation">,</span>                <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token string">"2019-02-02T03:48:59.000+0000"</span><span class="token punctuation">,</span>                <span class="token property">"updateTime"</span><span class="token operator">:</span> <span class="token null">null</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"pageable"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"sorted"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"unsorted"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"empty"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"offset"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token property">"pageNumber"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"paged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"unpaged"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"last"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"totalPages"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"totalElements"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"numberOfElements"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"sorted"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"unsorted"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"empty"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"first"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"empty"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际需要的分页信息"><a href="#实际需要的分页信息" class="headerlink" title="实际需要的分页信息"></a>实际需要的分页信息</h3><p>实际上我只需要下面这些分页信息：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"totalPages"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"totalElements"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token property">"pageNumber"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"numberOfElements"</span><span class="token operator">:</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建-PageChunk-类进行封装"><a href="#创建-PageChunk-类进行封装" class="headerlink" title="创建 PageChunk 类进行封装"></a>创建 PageChunk 类进行封装</h3><p>我的 GoodsRepository 接口为：</p><pre class="line-numbers language-java"><code class="language-java">Page<span class="token operator">&lt;</span>Goods<span class="token operator">></span> <span class="token function">findByCategoryId</span><span class="token punctuation">(</span>Integer categoryId<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们看到返回了很多多余的，重复的数据。为了解决这个问题，创建一个Pagination DTO(<code>PageChunk</code>)来包装一下分页数据。这个类的作用很简单就是包含每一次分页的内容和分页元数据（<strong>总页数</strong>，<strong>搜索结果总数</strong>，<strong>当前页号</strong>， <strong>当前页包含多少项</strong>）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author zjxjwxk */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageChunk</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> totalPages<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> totalElements<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numberOfElements<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，我根据业务需求对商品信息进行了DTO的包装，（只需要商品id，名称和价格即可）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author zjxjwxk */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsDTO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer goodsId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer price<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用-PageChunk-替代-Page"><a href="#用-PageChunk-替代-Page" class="headerlink" title="用 PageChunk 替代 Page"></a>用 PageChunk 替代 Page</h3><p>编写以下 getPageChunk 方法用于将 Page<goods> 对象转化为 PageChunk<goodsdto> 对象，仅仅提取 Page 对象中所需要的Content 和一些分页信息，将 PageChunk 对象封装并返回。编写 getGoodsDTO 方法用于简化商品信息。</goodsdto></goods></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"GoodsService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> GoodsRepository goodsRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">GoodsServiceImpl</span><span class="token punctuation">(</span>GoodsRepository goodsRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>goodsRepository <span class="token operator">=</span> goodsRepository<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServerResponse <span class="token function">getList</span><span class="token punctuation">(</span>String keyword<span class="token punctuation">,</span> Integer categoryId<span class="token punctuation">,</span>                                               Integer pageNum<span class="token punctuation">,</span> Integer pageSize<span class="token punctuation">,</span>                                               String orderBy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PageRequest pageRequest <span class="token operator">=</span> PageRequest<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pageNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        Page<span class="token operator">&lt;</span>Goods<span class="token operator">></span> goodsPage <span class="token operator">=</span> goodsRepository<span class="token punctuation">.</span><span class="token function">findByCategoryId</span><span class="token punctuation">(</span>categoryId<span class="token punctuation">,</span> pageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">createBySuccess</span><span class="token punctuation">(</span><span class="token function">getPageChunk</span><span class="token punctuation">(</span>goodsPage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> PageChunk<span class="token operator">&lt;</span>GoodsDTO<span class="token operator">></span> <span class="token function">getPageChunk</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span>Goods<span class="token operator">></span> goodsPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PageChunk<span class="token operator">&lt;</span>GoodsDTO<span class="token operator">></span> pageChunk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageChunk</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageChunk<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token function">getGoodsDTO</span><span class="token punctuation">(</span>goodsPage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageChunk<span class="token punctuation">.</span><span class="token function">setTotalPages</span><span class="token punctuation">(</span>goodsPage<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageChunk<span class="token punctuation">.</span><span class="token function">setTotalElements</span><span class="token punctuation">(</span>goodsPage<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageChunk<span class="token punctuation">.</span><span class="token function">setPageNumber</span><span class="token punctuation">(</span>goodsPage<span class="token punctuation">.</span><span class="token function">getPageable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageChunk<span class="token punctuation">.</span><span class="token function">setNumberOfElements</span><span class="token punctuation">(</span>goodsPage<span class="token punctuation">.</span><span class="token function">getNumberOfElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pageChunk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>GoodsDTO<span class="token operator">></span> <span class="token function">getGoodsDTO</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Goods<span class="token operator">></span> goodsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>GoodsDTO<span class="token operator">></span> goodsDTOList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Goods goods <span class="token operator">:</span>                goodsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            GoodsDTO goodsDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goodsDTO<span class="token punctuation">.</span><span class="token function">setGoodsId</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goodsDTO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goodsDTO<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goodsDTOList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>goodsDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> goodsDTOList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为了返回 JSON 数据，我自定义了一个 ServerResponse 服务响应对象，它的作用是让我们返回的 JSON 有一个通用的格式</p></blockquote><h3 id="简化后的结果"><a href="#简化后的结果" class="headerlink" title="简化后的结果"></a>简化后的结果</h3><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Clarks 男 Tri Spark生活休闲鞋26135668"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">459</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Adidas三叶草 男 休闲跑步鞋 STAN SMITH M20324"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">415</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Skechers 斯凯奇 SKECHERS SPORT系列 男 绑带运动鞋 999732-NVOR"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">355</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Saucony 圣康尼 RSP 男 休闲跑步鞋 KINETA RELAY S2524465"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">479</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Mustang 男 帆布鞋休闲运动 4058-305（亚马逊进口直采,德国品牌）"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">324</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Clarks 男 Tri Spark生活休闲鞋26135655"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">123425</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"goodsId"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"New Balance 574系列 男 休闲跑步鞋 ML574EG-D"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">324</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"totalPages"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"totalElements"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token property">"pageNumber"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"numberOfElements"</span><span class="token operator">:</span> <span class="token number">7</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring-Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring-Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Eureka</title>
      <link href="/2019/01/31/Spring%20Cloud/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/Spring-Cloud-Eureka/"/>
      <url>/2019/01/31/Spring%20Cloud/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/Spring-Cloud-Eureka/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h1><ul><li>基于 Netflix Eureka 做了二次封装</li><li>两个组件组成：<ul><li>Eureka Server 注册中心<ul><li>作为具有服务注册功能的服务器，是服务注册中心，系统中的其他微服务使用 Eureka Client 连接到Eureka Server ，并维持心跳连接以监控各个微服务是否正常运行。</li></ul></li><li>Eureka Client 服务注册<ul><li>用于简化与服务器的交互，作为轮询负载均衡器，并提供服务的故障切换支持。</li></ul></li></ul></li></ul><h1 id="启动-Eureka-Server"><a href="#启动-Eureka-Server" class="headerlink" title="启动 Eureka Server"></a>启动 Eureka Server</h1><h2 id="1-创建Spring项目"><a href="#1-创建Spring项目" class="headerlink" title="1. 创建Spring项目"></a>1. 创建Spring项目</h2><p><img src="/2019/01/31/Spring Cloud/服务注册与发现/Spring-Cloud-Eureka/image-20190131155138441.png" alt="创建Spring项目"></p><h2 id="2-填充项目信息"><a href="#2-填充项目信息" class="headerlink" title="2. 填充项目信息"></a>2. 填充项目信息</h2><p><img src="/2019/01/31/Spring Cloud/服务注册与发现/Spring-Cloud-Eureka/image-20190131155241197.png" alt="填充项目信息"></p><h2 id="3-选择项目类型为-Cloud-Discovery-中的-Eureka-Server"><a href="#3-选择项目类型为-Cloud-Discovery-中的-Eureka-Server" class="headerlink" title="3. 选择项目类型为 Cloud Discovery 中的 Eureka Server"></a>3. 选择项目类型为 Cloud Discovery 中的 Eureka Server</h2><p><img src="/2019/01/31/Spring Cloud/服务注册与发现/Spring-Cloud-Eureka/image-20190131155453826.png" alt="选择Eureka Server"></p><h2 id="4-完成创建"><a href="#4-完成创建" class="headerlink" title="4. 完成创建"></a>4. 完成创建</h2><p><img src="/2019/01/31/Spring Cloud/服务注册与发现/Spring-Cloud-Eureka/image-20190131160337079.png" alt="完成创建"></p><h2 id="5-添加注解-EnableEurekaServer"><a href="#5-添加注解-EnableEurekaServer" class="headerlink" title="5. 添加注解 @EnableEurekaServer"></a>5. 添加注解 @EnableEurekaServer</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-配置-application-yml"><a href="#6-配置-application-yml" class="headerlink" title="6. 配置 application.yml"></a>6. 配置 application.yml</h2><pre class="line-numbers language-yml"><code class="language-yml">eureka:  client:    service-url:      defaultZone: http://localhost:8761/eureka/    register-with-eureka: falsespring:  application:    name: eurekaserver:  port: 8761<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-启动-Eureka-Server"><a href="#7-启动-Eureka-Server" class="headerlink" title="7. 启动 Eureka Server"></a>7. 启动 Eureka Server</h2><p><img src="/2019/01/31/Spring Cloud/服务注册与发现/Spring-Cloud-Eureka/image-20190131172458551.png" alt="Eureka Server信息"></p><p>这样，一个简单的Eureka Server就启动完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring-Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring-Cloud </tag>
            
            <tag> 微服务架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务简介</title>
      <link href="/2019/01/31/Spring%20Cloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/01/31/Spring%20Cloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务简介"><a href="#微服务简介" class="headerlink" title="微服务简介"></a>微服务简介</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>The microservice architectural style is an approach to developing a single application running as <strong>a suite of small services</strong>, each <strong>running its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is <strong>a bare minimum of centralized management of these services</strong>, which may be written in different programming languages and use different data storage technologies.</p><ul><li>一系列微小的服务共同组成</li><li>跑在自己的进程里</li><li>每个服务为独立的业务开发</li><li>独立部署</li><li>分布式的管理</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg" alt="单一应用架构-&gt;垂直应用架构-&gt;分布式服务架构-&gt;流动计算架构"></p><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>容易测试</li><li>容易部署</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>开发效率低</li><li>代码维护难</li><li>部署不灵活</li><li>稳定性不高</li><li>扩展性不够</li></ul><h2 id="分布式定义"><a href="#分布式定义" class="headerlink" title="分布式定义"></a>分布式定义</h2><p>旨在支持应用程序和服务的开发，可以利用物理架构，由多个自治的处理元素，不共享主内存，但通过网络发送消息合作。——Leslie Lamport</p><h2 id="简单的微服务"><a href="#简单的微服务" class="headerlink" title="简单的微服务"></a>简单的微服务</h2><p><img src="/2019/01/31/Spring Cloud/微服务架构/微服务简介/image-20190131150906318.png" alt="简单的微服务"></p><h3 id="微服务架构的基础框架-组件"><a href="#微服务架构的基础框架-组件" class="headerlink" title="微服务架构的基础框架/组件"></a>微服务架构的基础框架/组件</h3><ul><li>服务注册发现</li><li><p>服务网关（Service Gateway）</p></li><li><p>后端通用服务（也称中间层服务 Middle Tire Service）</p></li><li>前端服务（也称边缘服务 Edge Service）<ul><li>聚合<ul><li>对多个API调用进行聚合，从而减少客户端的请求数</li></ul></li><li>裁剪<ul><li>对返回不同的设备的内容进行裁剪（PC、移动端）</li></ul></li></ul></li></ul><h2 id="两大阵营"><a href="#两大阵营" class="headerlink" title="两大阵营"></a>两大阵营</h2><h3 id="阿里系"><a href="#阿里系" class="headerlink" title="阿里系"></a>阿里系</h3><ul><li>Dubbo（服务化治理）</li><li>Zookeeper（服务注册中心）</li><li>Spring MVC or SpringBoot</li><li>…</li></ul><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul><li>Spring Cloud Netflix Eureka</li><li>SpringBoot</li><li>…</li></ul><h2 id="Spring-Cloud-是什么"><a href="#Spring-Cloud-是什么" class="headerlink" title="Spring Cloud 是什么"></a>Spring Cloud 是什么</h2><ul><li>Spring Cloud 是一个开发工具集，含了多个子项目<ul><li>利用Spring Boot的开发便利</li><li>主要是基于对Netflix开源组件的进一步封装</li></ul></li><li>Spring Cloud 简化了分布式开发</li><li>掌握如何使用，更要理解分布式、架构的特点</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring-Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring-Cloud </tag>
            
            <tag> 微服务架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS jar包后台运行</title>
      <link href="/2019/01/30/Linux/CentOS/CentOS%20jar%E5%8C%85%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
      <url>/2019/01/30/Linux/CentOS/CentOS%20jar%E5%8C%85%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="运行jar包命令"><a href="#运行jar包命令" class="headerlink" title="运行jar包命令"></a>运行jar包命令</h1><pre class="line-numbers language-shell"><code class="language-shell">java -jar application.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当前ssh窗口被锁定，可按CTRL + C打断程序运行，或直接关闭窗口让程序退出。</p><p>那如何让窗口不被锁定？</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><pre class="line-numbers language-shell"><code class="language-shell">java -jar application.jar &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&amp;代表在后台运行。</p><p>当前ssh窗口不被锁定，但是当窗口关闭时，程序中止运行。</p><p>继续改进，如何让窗口关闭时，程序仍然运行？</p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><pre class="line-numbers language-shell"><code class="language-shell">nohup java -jar application.jar &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行。</p><p>那怎么不打印该程序输出的内容，而写入某个文件中呢？</p><h1 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h1><pre class="line-numbers language-shell"><code class="language-shell">nohup java -jar application.jar >out.txt &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中，除非另外指定了输出文件，如 out.txt。</p><p>command &gt;out.txt是将command的输出重定向到out.txt文件，即输出内容不打印到屏幕上，而是输出到out.txt文件中。</p><h3 id="通过jobs命令查看后台运行任务"><a href="#通过jobs命令查看后台运行任务" class="headerlink" title="通过jobs命令查看后台运行任务"></a>通过jobs命令查看后台运行任务</h3><pre class="line-numbers language-shell"><code class="language-shell">jobs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。</p><h3 id="如果想将某个作业调回前台控制，只需要-fg-编号即可。"><a href="#如果想将某个作业调回前台控制，只需要-fg-编号即可。" class="headerlink" title="如果想将某个作业调回前台控制，只需要 fg + 编号即可。"></a>如果想将某个作业调回前台控制，只需要 fg + 编号即可。</h3><pre class="line-numbers language-shell"><code class="language-shell">fg 23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看某端口占用的线程的pid"><a href="#查看某端口占用的线程的pid" class="headerlink" title="查看某端口占用的线程的pid"></a>查看某端口占用的线程的pid</h3><pre class="line-numbers language-shell"><code class="language-shell">netstat -nlp |grep :9181<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Applied-Software-Project-Management</title>
      <link href="/2019/01/20/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Applied-Software-Project-Management/Applied-Software-Project-Management/"/>
      <url>/2019/01/20/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Applied-Software-Project-Management/Applied-Software-Project-Management/</url>
      
        <content type="html"><![CDATA[<h1 id="General-characteristics-of-a-project"><a href="#General-characteristics-of-a-project" class="headerlink" title="General characteristics of a project"></a>General characteristics of a project</h1><p>A project is a temporary endeavour undertaken to create a unique product or service. It is specific, timely, usually multidisciplinary, and always conflict ridden. Projects are parts of overall programs and may be broken down into tasks, subtasks, and further if desired.</p><ul><li>Vary in size</li><li>Vary in type</li><li>Have desired completion dates</li><li>Requires various kinds of knowledge</li><li>Requires domain knowledge</li><li>Requires team work</li><li>Requires responsibilities and authorities</li><li>Do not exist in isolation</li></ul><h1 id="General-management-vs-Project-management"><a href="#General-management-vs-Project-management" class="headerlink" title="General management vs. Project management"></a>General management vs. Project management</h1><ul><li>General management<ul><li>Organizational management</li><li>Portfolio management</li><li>Program management</li><li>Not time limited?</li><li>No completion dates?</li><li>No managerial hierarchy?</li><li>Routine activities</li><li>Annual budgeting</li></ul></li><li>Project management<ul><li>Project management is the application of knowledge, skills, tools, and techniques to project activities to meet the project requirements</li></ul></li></ul><h1 id="Five-categories-of-activities"><a href="#Five-categories-of-activities" class="headerlink" title="Five categories of activities"></a>Five categories of activities</h1><ul><li>Initiating</li><li>Planning</li><li>Executing</li><li>Monitoring and Controlling</li><li>Closing</li></ul><h1 id="How-does-the-world-look-like"><a href="#How-does-the-world-look-like" class="headerlink" title="How does the world look like?"></a>How does the world look like?</h1><ul><li>Uncertainty</li><li>Plans go awry</li><li>Even the closest future is unpredictable</li><li>Chance events occur frequently</li><li>The life is a rough road</li><li>We need to do trade-offs every day</li><li>We constantly negotiate</li><li>We need flexibility</li></ul><h1 id="Risk-management"><a href="#Risk-management" class="headerlink" title="Risk management"></a>Risk management</h1><ul><li>“Project management is risk management”</li><li>Identify potential problems before they occur</li><li>Put preventive actions in place before unrecoverable harm occurs</li></ul><h2 id="Risks"><a href="#Risks" class="headerlink" title="Risks"></a>Risks</h2><ul><li>possible events that may affect the project negatively</li></ul><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><ul><li>events that have or will affect the project negatively<h2 id="Stages-in-risk-management"><a href="#Stages-in-risk-management" class="headerlink" title="Stages in risk management:"></a>Stages in risk management:</h2><ul><li>Risk identification; project, product and business risks</li><li>Risk analysis; probability and consequences, triggers</li><li>Risk planning; how to address risks – eliminate, reduce, ignore</li><li>Risk monitoring; controlling and updating the risks</li></ul></li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548175505399.png" alt="Risk reporting Matrix"></p><h1 id="Decision-matrix"><a href="#Decision-matrix" class="headerlink" title="Decision matrix"></a>Decision matrix</h1><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548142778618.png" alt="Decision matrix"></p><h1 id="Gantt-chart"><a href="#Gantt-chart" class="headerlink" title="Gantt chart"></a>Gantt chart</h1><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548144904444.png" alt="Strategic Plan for New Business"></p><h1 id="RACI-matrix"><a href="#RACI-matrix" class="headerlink" title="RACI matrix"></a>RACI matrix</h1><ul><li>Usually derived from the WBS</li><li>Clarify responsibilities<h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2></li><li>Responsible, who is responsible for actually doing the activity<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2></li><li>Accountable, who is accountable for the completion of the task<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2></li><li>Consult, who should be consulted<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2></li><li>Informed, who must be informed</li><li>Note that combinations may exist, e.g. AR, CI, AC</li><li><p>Example<br><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548142472944.png" alt="RACI matrix"></p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548142487683.png" alt="RACI Model"></p></li></ul><h1 id="Critical-path"><a href="#Critical-path" class="headerlink" title="Critical path"></a>Critical path</h1><ul><li>A path from the projects start event to its finish event that, if delayed, will delay the completion date</li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548143653742.png" alt="Critical path1"></p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548144057724.png" alt="Critical path2"></p><h1 id="Brainstorming"><a href="#Brainstorming" class="headerlink" title="Brainstorming"></a>Brainstorming</h1><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548142617388.png" alt="Brainstorming"></p><h1 id="Sprint-Sprint-backlog"><a href="#Sprint-Sprint-backlog" class="headerlink" title="Sprint, Sprint backlog"></a>Sprint, Sprint backlog</h1><h2 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h2><ul><li>A fixed period of time, usually 2 or 3 weeks but can be more</li><li>Always use the same fixed period</li><li>The development team should have full authority during the sprint</li><li>The Sprint goal must be defined in advance</li><li><p>The team can change (the depth of) the functionality of the Sprint, as long as it meets its sprint goal</p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548155535982.png" alt="Sprint"></p></li></ul><h1 id="Product-backlog"><a href="#Product-backlog" class="headerlink" title="Product backlog"></a>Product backlog</h1><ul><li>Requirements gathering for the Product Backlog<ul><li>Identify the stakeholders and their goals<ul><li>Identify the different categories of stakeholders</li><li>Ask the question: “Why do you need this?”</li><li>What are the business objectives and goals?</li><li>How do we measure goal accomplishment?</li><li>The goals shall be SMART:<ul><li>Specific</li><li>Measurable</li><li>Acceptable</li><li>Realistic</li><li>Time-based</li></ul></li></ul></li><li>Gather requirements for the Product Backlog<ul><li>Meet the stakeholders</li><li>Understand the stakeholders needs</li><li>Use the “Tree and Forest” analogy<ul><li>Identify the trees, branches and leaves</li><li>Use a top down approach mixed with bottom-up?</li><li>The leaves may be user stories</li><li>Group the leaves into branches</li><li>Group the branches into trees</li><li>Verify the stories with the stakeholders</li></ul></li><li>The CUTFIT rules Validate the user stories<ul><li>Consistent no conflict between user stories</li><li>Unambiguous one interpretation</li><li>Testable test cases can be created</li><li>Feasible possible to implement</li><li>Independent independent of other user stories</li><li>Traceable you can link the story to the project goals</li></ul></li></ul></li></ul></li><li>Do not write stories endlessly. You can stop when you cannot decompose anymore or when you can derive tasks with working effort of approximately one day</li><li>Product Backlog Item (PBI), example</li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548060857834.png" alt="Product Backlog Item"></p><ul><li>Scrum board</li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548060911632.png" alt="Scrum board"></p><ul><li>Some thoughts about the Backlog<ul><li>Scrum in action recommends items to be stories (branches)</li><li>Frequently, in practice, it seems to be a mix of stories, features, functions, tasks, improvements and incidents</li><li>If you choose stories, you should consider defining tasks (leaves) in the stories</li><li>The tasks should be transferred to activities in the sprint planning</li></ul></li></ul><h1 id="Burndown-charts-amp-EVM-method"><a href="#Burndown-charts-amp-EVM-method" class="headerlink" title="Burndown charts &amp; EVM method"></a>Burndown charts &amp; EVM method</h1><h2 id="Earned-Value-Method-EVM"><a href="#Earned-Value-Method-EVM" class="headerlink" title="Earned Value Method - EVM"></a>Earned Value Method - EVM</h2><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548170614674.png" alt="Negative schedule, negative cost"><br><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548170969127.png" alt="Positive schedule, negative cost"><br><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548170999918.png" alt="Negative schedule, positive cost"><br><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548171236485.png" alt="Positive schedule, positive cost"></p><h2 id="Trend-projection-EV"><a href="#Trend-projection-EV" class="headerlink" title="Trend projection - EV"></a>Trend projection - EV</h2><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172014991.png" alt="Trend projection1"></p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172040323.png" alt="Trend projection2"></p><h2 id="Agile-and-Scrum-tracking"><a href="#Agile-and-Scrum-tracking" class="headerlink" title="Agile and Scrum tracking"></a>Agile and Scrum tracking</h2><ul><li>Release tracking<ul><li>Tracking story progress</li><li>Release burndown chart</li></ul></li><li>Sprint tracking<ul><li>Tracking task progress</li><li>Sprint burndown chart</li></ul></li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172373109.png" alt="Release burndown chart1"></p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172438304.png" alt="Release burndown chart2"></p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172594127.png" alt="Release burndown chart3"></p><h2 id="Burndown-charts"><a href="#Burndown-charts" class="headerlink" title="Burndown charts"></a>Burndown charts</h2><ul><li>Displays the <strong>remaining</strong> effort for a given period of time</li><li>Do have good value for the stakeholders and the team</li><li>Visualization is a good thing to do</li><li>Conversation starters</li><li>Over time it will give you the average number of points for a sprint</li><li>You will learn the teams velocity</li><li>You need to have a clear definition of done (DoD)</li></ul><h2 id="Sprint-burndown-chart"><a href="#Sprint-burndown-chart" class="headerlink" title="Sprint burndown chart"></a>Sprint burndown chart</h2><ul><li>Burndown charts<ul><li>X axis displays working days</li><li>Y axis displays remaining effort</li><li>Ideal effort is (may be) a good guideline</li><li>Consists of real progress of effort</li></ul></li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172874084.png" alt="Put # of hours (story points) at the Y axis"></p><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548172936874.png" alt="If backlog items are added to the sprint"></p><h1 id="Scrum-team"><a href="#Scrum-team" class="headerlink" title="Scrum team"></a>Scrum team</h1><ul><li>Why is Scrum effective?<ul><li>Systematic reduction of problems and risks</li><li>A leaner software development cycle</li><li>More adaptive process</li><li>People´s motivation and pride are in focus</li></ul></li></ul><h1 id="Monitoring-and-Controlling"><a href="#Monitoring-and-Controlling" class="headerlink" title="Monitoring and Controlling"></a>Monitoring and Controlling</h1><ul><li>Determine the current status of the project schedule</li><li>Influencing the factors that create schedule changes</li><li>Determining if the project schedule has changed</li><li>Managing the actual changes as they occur</li></ul><h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><ul><li>All parties, stakeholders and others, must have available the information required to exercise control over the project</li><li>An effective information system is needed</li><li>Automated and manual</li><li>Collection, recording and reporting project information</li><li>Activities and performance need to be monitored</li></ul><h2 id="Controlling"><a href="#Controlling" class="headerlink" title="Controlling"></a>Controlling</h2><ul><li>Uses monitored data and information to bring actual performance into agreement with the plan</li><li>Do we have the right information?</li><li>How shall we interpret the information?</li><li>How to balance into decisions?</li><li>Without control there would be confusion, scope risks and conflict among stakeholders</li><li>Chaos could be the norm of the project</li><li>Monitoring and Controlling are easily treated together</li></ul><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548165068217.png" alt="Monitoring and Control"></p><h2 id="Execute-plan-Design-the-monitoring-system"><a href="#Execute-plan-Design-the-monitoring-system" class="headerlink" title="Execute plan - Design the monitoring system"></a>Execute plan - Design the monitoring system</h2><ul><li>Identify characteristics of scope, time and cost</li><li>Identify the goals, the objectives</li><li>Define the boundaries when do we need to take action?<ul><li>Thresholds.</li></ul></li><li>Monitor progress against the sub-goals (e.g. milestones, sprint goals)</li><li>Define data gathering mechanisms</li><li>Define communication plan</li><li>Measure activities, but always measure against RESULTS</li><li>Define the system before-hand, up front</li></ul><h2 id="Obtain-results"><a href="#Obtain-results" class="headerlink" title="Obtain results"></a>Obtain results</h2><ul><li>Decide on the data format<ul><li>Frequency, e.g. occurrence of event</li><li>Raw numbers, actual amount</li><li>Subjective numeric ratings, estimates, ranking</li><li>Indicators, indirect measures</li><li>Verbal characterization, team spirit, soft issues, feelings</li></ul></li><li>Collect data<ul><li>Decide on how to collect the defined data. More easily and preferably automated.</li></ul></li></ul><h2 id="Analyse-results"><a href="#Analyse-results" class="headerlink" title="Analyse results"></a>Analyse results</h2><ul><li>Analyse BEFORE reporting</li><li>Simple aggregation can be done</li><li>Compare with the planned results</li><li>Averages, summaries, medians, trends</li><li>Examples<ul><li>Number of activities done/left</li><li>Actual cost/remaining cost</li><li>Number of bugs per unit</li><li>Performance or velocity</li></ul></li><li>You should use data for discovering, and as input for decision making</li></ul><h2 id="Identify-variance-and-Analyse-results"><a href="#Identify-variance-and-Analyse-results" class="headerlink" title="Identify variance and Analyse results"></a>Identify variance and Analyse results</h2><ul><li>Identify deviations from the plan</li><li>Variances can lead to severe problems</li><li>The goal is to identify variances as early as possible</li><li>Use plots, bars, lines, dots, etc. for analyzing trends (more later)</li><li>Compare the variances towards the planned (allowed) variances</li></ul><h2 id="Variances"><a href="#Variances" class="headerlink" title="Variances"></a>Variances</h2><ul><li>Acceptable – continue to monitor</li><li>Unacceptable – additional action is required<ul><li>Consult personnel</li><li>Consult expertise</li><li>Could it generate more problems?</li><li>Any additional risks?</li><li>Call for meeting, analyze in groups</li></ul></li></ul><h2 id="Identify-root-cause-and-consider-options"><a href="#Identify-root-cause-and-consider-options" class="headerlink" title="Identify root cause and consider options"></a>Identify root cause and consider options</h2><ul><li>Do not immediately adopt the first identified solution</li><li>Try to find the optimal solution</li><li>Analyse side-effects to the different solutions</li><li>Resources needed?</li><li>Cost?</li><li>Time?</li><li>Need help/decisions from sponsor/stakeholders?</li></ul><h2 id="Corrective-action-and-implementation"><a href="#Corrective-action-and-implementation" class="headerlink" title="Corrective action and implementation"></a>Corrective action and implementation</h2><ul><li>Decide on corrective actions<ul><li>Review options</li><li>Define success measures if possible</li><li>Make choices of actions</li><li>Who decide?</li></ul></li><li>Implement<ul><li>How will it be implemented?</li><li>By whom? When?</li><li>Who is responsible?</li></ul></li></ul><h2 id="Analyse-the-results"><a href="#Analyse-the-results" class="headerlink" title="Analyse the results"></a>Analyse the results</h2><ul><li>Analyse the results of the corrective actions</li><li>Compare against the defined measurements</li><li>If unacceptable result then go to root cause analysis (again)</li><li>If acceptable close the problem and store into lessons learned</li><li>Repository of Lessons Learned: Take care of your Best Practices</li><li>Avoid the situation from re-occurring</li></ul><h2 id="Reporting"><a href="#Reporting" class="headerlink" title="Reporting"></a>Reporting</h2><ul><li>Different kinds of reports<ul><li>Status reports</li><li>Progress reports</li><li>Forecast report</li><li>Time/Cost report</li><li>Variance report</li><li>Presentations</li><li>Demos</li></ul></li></ul><h1 id="SWOT-analysis"><a href="#SWOT-analysis" class="headerlink" title="SWOT analysis"></a>SWOT analysis</h1><p><img src="/2019/01/20/期末复习/Applied-Software-Project-Management/Applied-Software-Project-Management/1548056696215.png" alt="SWOT"></p><ul><li><strong>Strengths and Weaknesses</strong><ul><li>Internal factors</li><li>Human factors</li><li>Finances</li><li>Organisational factors</li><li>Physical resources</li><li>Experiences and knowledge</li></ul></li><li><strong>Opportunities and Threats</strong><ul><li>Trends</li><li>New research</li><li>Funding</li><li>Competitors</li><li>Competence</li><li>Channels (marketing)</li></ul></li><li><strong>SWOT analysis</strong><ul><li>Prioritize elements in the analysis</li><li>Define possible activities</li><li>Analyse if it is feasible</li><li>Decide on further management and activities</li><li>Close down strategic direction if found</li><li>necessary</li><li>Keep the SWOT-analysis continuously updated</li><li>Focus on the prioritized elements</li></ul></li></ul><h1 id="Stakeholder-Management"><a href="#Stakeholder-Management" class="headerlink" title="Stakeholder Management"></a>Stakeholder Management</h1><ul><li><strong>Definition</strong> of the term stakeholder:<ul><li>An individual</li><li>A group</li><li>An organisation</li><li>who may affect, be affected by, or perceive itself to be affected by a decision, activity, or outcome of a project.</li><li>Project governance the alignment of the project stakeholders´ needs or objectives</li></ul></li><li>Stakeholder can be<ul><li>The sponsor, the one who provides the resources and support</li><li>Customers and users persons or organisations that will approve and manage the project´s product, service or result.</li><li>Sellers provides components or services necessary for the project</li><li>Business partners provides special expertise, e.g. installation, training, support.</li></ul></li><li>Example<ul><li>Organizational groups internal groups affected by the project activities</li><li>Functional managers human resource, financial, accounting, procurement, IT</li><li>Other stakeholders government experts, subject matter experts, consultants,</li></ul></li></ul><h1 id="Project-Cost-estimation"><a href="#Project-Cost-estimation" class="headerlink" title="Project Cost estimation"></a>Project Cost estimation</h1><ul><li>Budgeting the project<ul><li>Must (always) be approved by management</li><li>Resources must be allocated based on the estimations</li><li>Should be connected to the vision and goals</li><li>Should be supporting to the portfolio and program management</li><li>Upper management is always (?) relating the project success to its relation to the approved budget</li></ul></li><li>Budgeting the project, necessities<ul><li>Shall always be related to the stakeholder requirements</li><li>You need to have an idea of which resources you have</li><li>Correct data must be collected</li><li>Timely reporting</li><li>Strong focus on resource and cost predictions</li><li>Confirm approval of changes</li><li>Consider always changed cost predictions when decisions are taken</li><li>Consider changed cost predictions when problems occur</li><li>Estimate changed cost predictions if risks become problems</li></ul></li><li>Forecasting<ul><li>What resources will be needed?</li><li>How much resources will be needed?</li><li>When will they be needed?</li><li>How much will the resources cost?</li></ul></li><li>The resource cost can be differentiated by<ul><li>Unit, role</li><li>Individual, level of competence or salary</li></ul></li><li>Need to consider<ul><li>Unit (hours, days, weeks, money,…)</li><li>Level of precision (round up or down)</li><li>Level of accuracy (range)</li><li>Links to backlog and stories</li><li>Threshold (agreed variations, if any)</li><li>Performance measurement (earned value or story points left)</li></ul></li><li>Cost estimation tools and techniques<ol><li>Expert judgment</li><li>Analogous estimation</li><li>Parametric estimation</li><li>Top-Down estimating</li><li>Bottom-Up estimating</li><li>Three-Point estimating</li><li>Group-decision techniques</li><li>Wide-band Delphi technique</li></ol></li></ul><h1 id="User-story-amp-story-points"><a href="#User-story-amp-story-points" class="headerlink" title="User story &amp; story points"></a>User story &amp; story points</h1><ul><li>User story<ul><li>A story is a feature a bit of functionality with some characteristics (non-functional characteristics)</li><li>Keep the stories simple and as short as possible</li><li>A story is an agreement between the customer and the supplier</li><li>It must provide some value to the customer</li><li>Stories should be independent of each other</li><li>Stories must be testable</li></ul></li><li>Examples<ul><li>As a power user, I can specify files or folders to backup based on file size, date created and date modified.</li><li>As a user, I can indicate folders not to backup so that my backup drive isn’t filled up with things I don’t need saved.</li><li>As a consumer, I want shopping cart functionality to easily purchase items online.</li></ul></li></ul><h1 id="Agile-and-Scrum"><a href="#Agile-and-Scrum" class="headerlink" title="Agile and Scrum"></a>Agile and Scrum</h1><ul><li>Agile and Scrum<ul><li>Agile volatile, easy to move, easy to change</li><li>Scrum start the game over again.</li><li>Was originally launched as a contrast to plan-driven development</li><li>The goal is: To produce software more effectively</li><li>Embrace change</li><li>Embrace change quickly!</li><li>The change towards agile is not easy</li><li>You need to have the organization with you</li><li>See change as something positive</li><li>You need to change your mind-set</li></ul></li><li>Scrum is<ul><li>a risk reduction mechanism</li><li>a leaner software process</li><li>a more adaptive software project management process</li><li>A framework based on a team´s self-organization, motivation, ownership and pride.</li></ul></li></ul><h1 id="Scrum-master"><a href="#Scrum-master" class="headerlink" title="Scrum master"></a>Scrum master</h1><ul><li>Ensuring that Scrum values, practices and rules are used</li><li>Represents the management and the team to each other</li><li>Guide and coach the team towards achieving the goals</li><li>Should protect the team towards outside disturbances</li><li>Support in keeping track of progress</li><li>Organize retrospectives to help the team and the organization to learn how to be more effective</li><li>Enforces immediate decisions needed</li></ul><h2 id="7-qualities"><a href="#7-qualities" class="headerlink" title="7 qualities"></a>7 qualities</h2><ol><li>In-depth theoretical and practical knowledge about Scrum</li><li>Great servant-leadership ability</li><li>Strong organizational skills</li><li>Great communication skills</li><li>Excellent presentation skills</li><li>Conflict resolution skills</li><li>Great human development skills</li></ol><h1 id="Product-Owner"><a href="#Product-Owner" class="headerlink" title="Product Owner"></a>Product Owner</h1><ul><li>Guards the product vision</li><li>Ensure the fulfilment of goals</li><li>Focus is on delivering business values and results</li><li>The dependence of a good product owner is high<h2 id="The-focus-is-to-control-the-backlog-by-working-with-the-stakeholders-identified"><a href="#The-focus-is-to-control-the-backlog-by-working-with-the-stakeholders-identified" class="headerlink" title="The focus is to control the backlog by working with the stakeholders identified"></a>The focus is to control the backlog by working with the stakeholders identified</h2></li><li>Gather requirements for the backlog</li><li>Solely controls the backlog</li><li>Collaborate with the team and the scrum master to do release planning</li><li>Guide and support the team</li><li>Keeps himself/herself updated with project progress</li><li>Are available to the team, give the team feedback</li><li>Is one person, not a team</li></ul><h2 id="7-qualities-1"><a href="#7-qualities-1" class="headerlink" title="7 qualities"></a>7 qualities</h2><ol><li>Know how to manage stakeholder´s expectations and sometimes their conflicting priorities</li><li>Have a clear vision and knowledge of the product</li><li>Know how to gather the requirements and turn them into a good product backlog</li><li>Be available for the team</li><li>Know how to be a good organizer</li><li>Know how to communicate better than the average person</li><li>Knows that it is all about servant leadership</li></ol><h1 id="The-Development-Team-the-Scrum-team"><a href="#The-Development-Team-the-Scrum-team" class="headerlink" title="The Development Team, the Scrum team"></a>The Development Team, the Scrum team</h1><ul><li>Self-managed and self-organized</li><li>Estimate backlog items, stories</li><li>Turns items, stories into tasks to work on in the Sprints</li><li>Commits to the sprint goals</li><li>Keeps track of progress</li><li>Responsible for Sprint demos</li><li>The team should solve their internal problems by themselves</li><li>The team should be small, 7 +- 2 persons</li><li>Minimize communication interfaces</li><li>Teams should be cross-functional, including different capabilities</li><li>Open work environments are to be preferred</li></ul><h1 id="Agile-Manifesto"><a href="#Agile-Manifesto" class="headerlink" title="Agile Manifesto"></a>Agile Manifesto</h1><ul><li>Individuals and interactions——over processes and tools</li><li>Working software——over comprehensive documentation</li><li>Customer collaboration——over contract negotiation</li><li>Responding to change——over following a plan</li></ul><h1 id="Daily-Scrum-meetings"><a href="#Daily-Scrum-meetings" class="headerlink" title="Daily Scrum meetings"></a>Daily Scrum meetings</h1><ul><li>Where the team communicates</li><li>Approximately 15 minutes, short meetings</li><li>Stand-up meeting<h2 id="Focus-on-three-things"><a href="#Focus-on-three-things" class="headerlink" title="Focus on three things:"></a>Focus on three things:</h2></li><li>What has been done since the previous meeting?</li><li>What are we going to do?</li><li>What risks and problems exists?</li><li>Removing obstacles</li><li>Making necessary decisions</li></ul><h1 id="Leadership-style-Situational-leadership-style"><a href="#Leadership-style-Situational-leadership-style" class="headerlink" title="Leadership style, Situational leadership style"></a>Leadership style, Situational leadership style</h1><h2 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h2><ul><li>The person assigned by the performing organization to lead the team that is responsible for achieving the project objectives</li></ul><h2 id="Interpersonal-skills-needed"><a href="#Interpersonal-skills-needed" class="headerlink" title="Interpersonal skills needed"></a>Interpersonal skills needed</h2><ul><li>Leadership</li><li>Team building</li><li>Motivation</li><li>Communication</li><li>Influencing</li><li>Decision making</li><li>Political (company and business) awareness</li><li>Cultural awareness</li><li>Negotiation</li><li>Trust building</li><li>Conflict (healthy and unhealthy) management</li><li>Coaching</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTH </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Team Collaboration and Career Development for Exam</title>
      <link href="/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development%20for%20Exam/"/>
      <url>/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development%20for%20Exam/</url>
      
        <content type="html"><![CDATA[<h3 id="During-the-lectures-we-defined-three-different-areas-important-for-every-individual-Values-Interests-and-Skills-These-should-be-described-regarding-your-internal-focus-in-a-resume"><a href="#During-the-lectures-we-defined-three-different-areas-important-for-every-individual-Values-Interests-and-Skills-These-should-be-described-regarding-your-internal-focus-in-a-resume" class="headerlink" title="During the lectures we defined three different areas important for every individual: Values, Interests and Skills. These should be described regarding your internal focus in a resume."></a>During the lectures we defined three different areas important for every individual: Values, Interests and Skills. These should be described regarding your internal focus in a resume.</h3><p><strong>a. Describe, explain, these three areas, including at least two examples from each area. (15)</strong></p><ul><li><strong>Values</strong> are what is important for you, what you really care about, and which give you a sense of purpose. <strong>Example</strong>: High Income, Helping others.</li><li><strong>Interests</strong> are what is fun for you, what enjoys you, and those work activities which hold your attention and fire your enthusiasm. <strong>Example</strong>: Technical, Scientific.</li><li><strong>Skills</strong> are things you can do well, things you have learned, special talent and special abilities. <strong>Example</strong>: Technical skills, Leadership.<br><strong>b. What is a GAP? Give at least one example of a possible GAP relating to your own experiences, one example from each area. (6)</strong></li><li>A GAP is where you are and where you want to be.</li><li>The GAP for me: I hope that I can enter a big company like Alibaba to work as a Java developer. The GAP for me is that my understanding of the Java virtual machine is not deep enough, I don’t have enough knowledge of multithreading, don’t know enough about the principle and implementation of the database, and don’t know much about the distributed architecture.</li></ul><h3 id="2-Name-the-5-elements-of-the-Career-Development-Cycle-Draw-the-model-of-the-cycle-Describe-shortly-1-2-sentences-every-action-in-the-cycle-12"><a href="#2-Name-the-5-elements-of-the-Career-Development-Cycle-Draw-the-model-of-the-cycle-Describe-shortly-1-2-sentences-every-action-in-the-cycle-12" class="headerlink" title="2. Name the 5 elements of the Career Development Cycle. Draw the model of the cycle. Describe shortly, 1-2 sentences, every action in the cycle. (12)"></a>2. Name the 5 elements of the Career Development Cycle. Draw the model of the cycle. Describe shortly, 1-2 sentences, every action in the cycle. (12)</h3><ul><li>Communication, Analysis, Synthesis, Valuing, Execution<br><img src="/2019/01/19/期末复习/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development for Exam/1547730517318.png" alt="">  </li><li><strong>Communication</strong>: Become aware of the gap and feel discomfort about the gap. Seek assistance if needed.</li><li><strong>Analysis</strong>: Clarify your knowledge, what do you want, what are your values, interests and skills and so on.</li><li><strong>Synthesis</strong>: Solve the gap, avoid missing alternatives and reduce to a manageable amount of options.</li><li><strong>Valuing</strong>: Judge the benefit (and cost) and rank them to find the best choice. Select an option.</li><li><strong>Execution</strong>: Convert decisions into action, formulate a goal and a plan, and execute the plan.</li><li><strong>Communication</strong>: Review the state and think has the gap been closed. It is an on-going process.</li></ul><h3 id="3-Brown-talks-about-four-general-role-categories-of-people-in-teams-Name-these-roles-and-describe-them-shortly-12"><a href="#3-Brown-talks-about-four-general-role-categories-of-people-in-teams-Name-these-roles-and-describe-them-shortly-12" class="headerlink" title="3. Brown talks about four general role categories of people in teams. Name these roles and describe them shortly? (12)"></a>3. Brown talks about four general role categories of people in teams. Name these roles and describe them shortly? (12)</h3><ul><li><strong>Designers</strong>: People responsible for generating and documenting ideas about how the product works, looks, or behaves.</li><li><strong>Managers</strong>: People responsible for ensuring the project team delivers on its obligations, creates plans to do so, and successfully executes against those plans.</li><li><strong>Subject Matter Experts</strong>: People responsible for contributing information to the design process.</li><li><strong>Stakeholders</strong>: People ultimately accountable for the success of the project.</li></ul><h3 id="4-Consider-the-following-questions-among-individuals-where-we-have-different-characteristics-Select-three-of-them-Describe-how-people-individuals-can-have-different-characteristics-Describe-pros-and-cons-and-possible-consequences-to-a-characteristic-Comments-if-the-characteristics-you-choose-are-good-characteristics-or-not"><a href="#4-Consider-the-following-questions-among-individuals-where-we-have-different-characteristics-Select-three-of-them-Describe-how-people-individuals-can-have-different-characteristics-Describe-pros-and-cons-and-possible-consequences-to-a-characteristic-Comments-if-the-characteristics-you-choose-are-good-characteristics-or-not" class="headerlink" title="4. Consider the following questions among individuals where we have different characteristics. Select three of them. Describe how people (individuals), can have different characteristics. Describe pros and cons, and possible consequences to a characteristic. Comments if the characteristics you choose are good characteristics or not."></a>4. Consider the following questions among individuals where we have different characteristics. Select three of them. Describe how people (individuals), can have different characteristics. Describe pros and cons, and possible consequences to a characteristic. Comments if the characteristics you choose are good characteristics or not.</h3><p>  <strong>a. Can I interrupt you?</strong><br>  <strong>b. Do you attend agreed meetings?</strong><br>  <strong>c. Are you late to meetings?</strong><br>  <strong>d. Are you focusing on details or the big-picture?</strong><br>  <strong>e. Which tasks do you prefer to commit to?</strong><br>  <strong>f. How quickly do you respond to e-mail?</strong><br>  <strong>g. Do you treat others how you would like to be treated yourself?</strong><br>  <strong>h. Can she/he say no? Can you say no?</strong><br>  <strong>i. Does she/he usually say no/yes?</strong><br>  <strong>(12)</strong></p><h3 id="5-Describe-at-least-4-positive-consequences-to-conflicts-8"><a href="#5-Describe-at-least-4-positive-consequences-to-conflicts-8" class="headerlink" title="5. Describe at least 4 positive consequences to conflicts. (8)"></a>5. Describe at least 4 positive consequences to conflicts. (8)</h3><ul><li>Produces better ideas</li><li>Forces people to search for new approaches</li><li>Causes problems to surface</li><li>Forces clarification</li></ul><h3 id="6-Brown-draws-a-triangle-for-the-model-of-conflict-Specify-this-triangle-and-describe-the-elements-and-how-they-are-connected-9"><a href="#6-Brown-draws-a-triangle-for-the-model-of-conflict-Specify-this-triangle-and-describe-the-elements-and-how-they-are-connected-9" class="headerlink" title="6. Brown draws a triangle for the model of conflict. Specify this triangle and describe the elements and how they are connected. (9)"></a>6. Brown draws a triangle for the model of conflict. Specify this triangle and describe the elements and how they are connected. (9)</h3><p><img src="/2019/01/19/期末复习/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development for Exam/1547737741192.png" alt=""></p><blockquote><p>Situations: The different ways conflict manifests itself</p><p>Patterns: The behaviors team members can use to deal with conflict</p><p>Traits: The inherent characteristics that shape our behaviors and perceptions</p></blockquote><h4 id="Situations-lt-gt-Patterns"><a href="#Situations-lt-gt-Patterns" class="headerlink" title="Situations &lt; &gt; Patterns"></a>Situations &lt; &gt; Patterns</h4><ul><li>Designers can use patterns (specific behaviors) to untangle situations<ul><li>Situations can also affect the outcome of patterns<h4 id="Patterns-lt-gt-Traits"><a href="#Patterns-lt-gt-Traits" class="headerlink" title="Patterns &lt; &gt; Traits"></a>Patterns &lt; &gt; Traits</h4></li></ul></li><li>A designer’s traits influences which pattern she chooses for a particular situation</li><li>By using a particular pattern successfully, a designer may take that to reinforce part of her personality<h4 id="Traits-lt-gt-Situations"><a href="#Traits-lt-gt-Situations" class="headerlink" title="Traits &lt; &gt; Situations"></a>Traits &lt; &gt; Situations</h4></li><li>Traits can make certain situations worse by reinforcing the misunderstanding between people</li><li>Some situations may amplify a designer’s trait</li></ul><h3 id="7-Brown-lists-three-areas-important-for-self-awareness-Describe-these-areas-and-give-one-example-from-each-area-for-improving-it-9"><a href="#7-Brown-lists-three-areas-important-for-self-awareness-Describe-these-areas-and-give-one-example-from-each-area-for-improving-it-9" class="headerlink" title="7. Brown lists three areas important for self-awareness. Describe these areas and give one example from each area for improving it. (9)"></a>7. Brown lists three areas important for self-awareness. Describe these areas and give one example from each area for improving it. (9)</h3><p>To understand your limitations, your boundaries, strengths</p><ul><li>Limitations: </li><li>Boundaries: By understanding their limitations, designers can be honest and open about their capabilities, their ability to contribute to a project, and their level of comfort in asking for help.</li><li>Strengths: </li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTH </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The-design-and-analysis-of-algorithms for Exam</title>
      <link href="/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms%20for%20Exam/"/>
      <url>/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms%20for%20Exam/</url>
      
        <content type="html"><![CDATA[<h1 id="This-question-tests-your-knowledge-on-algorithms-and-algorithm-construction"><a href="#This-question-tests-your-knowledge-on-algorithms-and-algorithm-construction" class="headerlink" title="This question tests your knowledge on algorithms and algorithm construction:"></a>This question tests your knowledge on algorithms and algorithm construction:</h1><p><strong>(a) A function that is defined in terms of itself is called a recursive function. Describe the purpose of a base case in a recursive function.(3p)</strong></p><p>A base case is an (input) value for which the function can be calculated without recursion. </p><p>There needs to be at least one base case, which can be solved without recursion. </p><p>For the cases that are solved using recursion, the recursive calls must progress towards a base case.</p><p><strong>(b) Mergesort is based on the principles of divide-and-conquer. Briefly describe what the mergesort algorithm does in the divide step and in the conquer step. (4p)</strong></p><p><strong>Divide step:</strong> Divide the array into two parts to convert the problem of sorting the entire array into sub-problems (to sort the left and right arrays separately) until the size of the array is 1.</p><p><strong>Conquer step:</strong> Repeatedly merging sorted lists into sorted lists of larger size until the initial list is sorted.</p><p><strong>(c) A constructive heuristic is a method that iteratively “builds up” a solution. It starts with nothing and adds (fixes) the value of exactly one variable (solution component) in each of the iterations. The algorithm ends when all variables have been assigned a value. Describe what is a greedy constructive heuristic. (3p)</strong></p><p>Each variable fixing is chosen as the variable that (locally) improves the objective most. Of course, variable fixings are chosen without breaking feasibility.</p><h1 id="This-question-test-your-knowledge-on-graphs-and-trees"><a href="#This-question-test-your-knowledge-on-graphs-and-trees" class="headerlink" title="This question test your knowledge on graphs and trees."></a>This question test your knowledge on graphs and trees.</h1><p><strong>(a) What does a “worst case” binary tree look like? (5p)</strong></p><p>In the <em>worst case</em>, if the binary search tree has n nodes,  it can have O(n) height, when the unbalanced <em>tree</em> looks like a linked list. </p><p>The worst case occurs when inserting an sorted list into the tree in order.</p><p><strong>(b) Describe what is a topological ordering. (4p)</strong></p><p>A topological ordering of a directed non-cyclic graph is an ordering of the vertices such that if there is an edge (u, v) between u and v, then u comes before v in the ordering.</p><p><strong>(c) Illustrate and explain using an example why there can be no topological ordering of a graph that contains a cycle. (6p)</strong></p><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547384256672.png" alt="graph"> </p><p>Consider the cycle v5 -&gt; v6 -&gt; v8 -&gt; v5:</p><ul><li>(v5, v6) 属于 E =&gt; v5 needs to come before v6 in the topological order.</li><li>(v6, v8) 属于  E =&gt; v6 needs to come before v8 in the topological order =&gt; v5 before v8 in the topological order.</li><li>(v8, v5) 属于  E =&gt; v8 needs to come before v5 in the topological order, which is not possible as we previously concluded the opposite.</li></ul><h1 id="This-question-concerns-complexity-analysis"><a href="#This-question-concerns-complexity-analysis" class="headerlink" title="This question concerns complexity analysis."></a>This question concerns complexity analysis.</h1><p><strong>(a) Briefly describe the complexity class P. (3p)</strong></p><p>All problems that can be solved using a polynomial bound algorithm belongs to the same complexity class (complexity class P).</p><p><strong>(b) Describe what is a basic operation of an algorithm. (3p)</strong></p><p>A basic operation can be seen as an operation that is fundamental for the performance of a particular algorithm.</p><p>The performance of the algorithm is in principle proportional to the number of basic operations.</p><p><strong>(c) Describe the concepts of worst-case and average-case complexity of an algorithm. (6p)</strong></p><p><strong>The worst-case</strong> complexity W(n) of an algorithm is the maximum number of basic operations performed for any input of size n.</p><p><strong>The average-case</strong> complexity A(n) of an algorithm is the average number of basic operations performed by the algorithm, where each input I occurs with some probability p(I).</p><p><strong>(d) What does it mean to say that a data structure has an amortized bound of O(n) per operation? (3p).</strong></p><p>This means that regardless of which sequence of n operations, the worst-case average cost per operation is O(n).</p><h1 id="Your-task-for-this-question-is-to-insert-a-node-with-value-5-into-the-following-splay-tree"><a href="#Your-task-for-this-question-is-to-insert-a-node-with-value-5-into-the-following-splay-tree" class="headerlink" title="Your task for this question is to insert a node with value 5 into the following splay tree."></a>Your task for this question is to insert a node with value 5 into the following splay tree.</h1><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547391999965.png" alt="tree"></p><p>You are required to show what the tree looks like after inserting the new node and after each of the (3) splay operations.</p><p>Hint: you will have to perform all three types of splay operations. (20p)</p><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547392108870.png" alt="1"></p><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547392250882.png" alt="2"></p><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547392299434.png" alt="3"></p><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547392316867.png" alt="4"></p><h1 id="Your-task-is-to-apply-dynamic-programming-in-order-to-solve-a-knapsack"><a href="#Your-task-is-to-apply-dynamic-programming-in-order-to-solve-a-knapsack" class="headerlink" title="Your task is to apply dynamic programming in order to solve a knapsack"></a>Your task is to apply dynamic programming in order to solve a knapsack</h1><p>problem instance with 4 items:<br>Item 1: Value: p1 = 8 - Weight: w1 = 2<br>Item 2: Value: p2 = 6 - Weight: w2 = 1<br>Item 3: Value: p3 = 7 - Weight: w3 = 2<br>Item 4: Value: p4 = 5 - Weight: w4 = 1<br>The knapsack (bag) has a weight capacity of 4 (W = 4).<br>You should graphically illustrate your solution. (20p)</p><p><img src="/2019/01/19/期末复习/The-design-and-analysis-of-algorithms/The-design-and-analysis-of-algorithms for Exam/1547392549396.png" alt="solution"></p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTH </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Team Collaboration and Career Development</title>
      <link href="/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development/"/>
      <url>/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development/</url>
      
        <content type="html"><![CDATA[<h1 id="Career-decision-making-cycle"><a href="#Career-decision-making-cycle" class="headerlink" title="Career decision making cycle"></a>Career decision making cycle</h1><p><img src="/2019/01/19/期末复习/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development/1547727641728.png" alt="Career decision making cycle"></p><h2 id="Know-the-elements"><a href="#Know-the-elements" class="headerlink" title="Know the elements"></a>Know the elements</h2><p>Communication, Analysis, Synthesis, Valuing, Execution</p><h2 id="Know-the-definition"><a href="#Know-the-definition" class="headerlink" title="Know the definition"></a>Know the definition</h2><p><strong>Communication</strong>: Identifying the gap<br><strong>Analysis</strong>: Thinking about alternatives<br><strong>Synthesis</strong>: Creating likely alternatives<br><strong>Valuing</strong>: Prioritizing alternatives<br><strong>Execution</strong>: Taking action to narrow the gap</p><h2 id="Be-able-to-elaborate-the-elements"><a href="#Be-able-to-elaborate-the-elements" class="headerlink" title="Be able to elaborate the elements"></a>Be able to elaborate the elements</h2><p><strong>Communication</strong>:<br>• Become aware of the gap<br>• Discomfort, not so much fear of change<br>• Seek assistance if needed<br>• Emotions<br><strong>Analysis</strong>:<br>• Clarify your knowledge<br>• Clarify gap<br>• Understand how you make decisions<br>• Understand what influences you<br>• What do you want?<br>• What have you learned?<br>• What are your values, interests and skills?<br>• Do you want to take responsibility?<br>• Self-awareness<br><strong>Synthesis</strong>:<br>• Solve the gap<br>• Avoid missing alternatives<br>• Reduce to a manageable amount of options.<br>• Brainstorm and reduce.<br><strong>Valuing</strong>:<br>• Judge the benefit (and cost)<br>• Rank<br>• What´s the best choice?<br>• Select an option<br><strong>Execution</strong>:<br>• Convert decisions into action<br>• Formulate a goal and a plan<br>• Execute the plan<br>• Plan, try, evaluate</p><h1 id="Describe-forces-that-affect-our-career"><a href="#Describe-forces-that-affect-our-career" class="headerlink" title="Describe forces that affect our career"></a>Describe forces that affect our career</h1><ul><li>The world is rapidly changing</li><li>The economy goes up and down</li><li>New companies emerges</li><li>Some companies close down</li><li>Unemployment goes up and down</li><li>Organizational failures appears sometimes</li></ul><h1 id="Career-planning-vs-workforce-planning"><a href="#Career-planning-vs-workforce-planning" class="headerlink" title="Career planning vs. workforce planning"></a>Career planning vs. workforce planning</h1><h2 id="Career-development"><a href="#Career-development" class="headerlink" title="Career development"></a>Career development</h2><ul><li>What the individuals in the organization do in order to ensure their interests and future<h2 id="Workforce-planning"><a href="#Workforce-planning" class="headerlink" title="Workforce planning"></a>Workforce planning</h2></li><li>What the organization does in order to ensure growth and profit</li></ul><h1 id="Activities-to-find-employers"><a href="#Activities-to-find-employers" class="headerlink" title="Activities to find employers"></a>Activities to find employers</h1><ul><li>Business/Industry</li><li>Government</li><li>Education</li><li>Non-profit</li><li>Private</li></ul><h1 id="The-elements-of-a-job-campaign-describe-and-elaborate"><a href="#The-elements-of-a-job-campaign-describe-and-elaborate" class="headerlink" title="The elements of a job campaign, describe and elaborate"></a>The elements of a job campaign, describe and elaborate</h1><ul><li>Gain Experience</li><li>Create Connections</li><li>First Impressions Count</li><li>Be Professional</li><li>Be Prepared and Persistent</li><li>Be Realistic, Open-minded and Flexible</li></ul><h1 id="Elements-and-recommendations-for-writing-a-CV"><a href="#Elements-and-recommendations-for-writing-a-CV" class="headerlink" title="Elements and recommendations for writing a CV"></a>Elements and recommendations for writing a CV</h1><h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h2><ul><li>Identification</li><li>Career objective</li><li>Education/Training</li><li>Experience</li><li>Other categories as appropriate</li><li>References<h2 id="Recommendations"><a href="#Recommendations" class="headerlink" title="Recommendations"></a>Recommendations</h2></li><li>Be brief</li><li>Be consistent</li><li>Be positive</li><li>Be honest</li><li>Be neat</li></ul><h1 id="Know-basic-elements-for-good-communication"><a href="#Know-basic-elements-for-good-communication" class="headerlink" title="Know basic elements for good communication"></a>Know basic elements for good communication</h1><p> Treat others as you would like to be treated yourself</p><h1 id="The-typical-team-as-defined-by-Brown"><a href="#The-typical-team-as-defined-by-Brown" class="headerlink" title="The typical team, as defined by Brown"></a>The typical team, as defined by Brown</h1><ul><li>Designers</li><li>Managers</li><li>Subject Matter Experts</li><li>Stakeholders</li></ul><h1 id="The-three-values-of-the-glue-of-a-team"><a href="#The-three-values-of-the-glue-of-a-team" class="headerlink" title="The three values of the glue of a team"></a>The three values of the glue of a team</h1><ul><li>Respect</li><li>Humility</li><li>Empathy</li></ul><h1 id="Be-able-to-distinguish-between-assignment-and-commitment"><a href="#Be-able-to-distinguish-between-assignment-and-commitment" class="headerlink" title="Be able to distinguish between assignment and commitment"></a>Be able to distinguish between assignment and commitment</h1><h2 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h2><h3 id="Assignments-should-be-commitments"><a href="#Assignments-should-be-commitments" class="headerlink" title="Assignments should be commitments"></a>Assignments should be commitments</h3><h3 id="Pressure-to-deliver"><a href="#Pressure-to-deliver" class="headerlink" title="Pressure to deliver"></a>Pressure to deliver</h3><h3 id="Requirements-to-perform"><a href="#Requirements-to-perform" class="headerlink" title="Requirements to perform"></a>Requirements to perform</h3><ul><li>The expected result</li><li>The expected cost</li><li>Within the expected time frame</li><li>Normally, these three items are pushed to its limits<h2 id="Commitment"><a href="#Commitment" class="headerlink" title="Commitment"></a>Commitment</h2></li><li>Should be voluntarily</li><li>Deadlines, delivery dates should be defined</li><li>Should be specific, clearly defined</li><li>Clearly motivated</li><li>Admit problems and risks</li><li>Practice commitment culture</li></ul><h1 id="Mindset-defined-Perception-Attitude-Disposition"><a href="#Mindset-defined-Perception-Attitude-Disposition" class="headerlink" title="Mindset defined (Perception, Attitude, Disposition)"></a>Mindset defined (Perception, Attitude, Disposition)</h1><h2 id="Perception"><a href="#Perception" class="headerlink" title="Perception"></a>Perception</h2><p>– How to interpret thing</p><h2 id="Attitude"><a href="#Attitude" class="headerlink" title="Attitude"></a>Attitude</h2><p>– How to react</p><h2 id="Disposition"><a href="#Disposition" class="headerlink" title="Disposition"></a>Disposition</h2><p>– Decide course of action, what to do</p><h1 id="Different-mindsets"><a href="#Different-mindsets" class="headerlink" title="Different mindsets"></a>Different mindsets</h1><p><img src="/2019/01/19/期末复习/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development/1547781642160.png" alt="1"></p><p><img src="/2019/01/19/期末复习/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development/1547781711943.png" alt="2"></p><p><img src="/2019/01/19/期末复习/Team-Collaboration-and-Career-Development/Team-Collaboration-and-Career-Development/1547781723233.png" alt="3"></p><h1 id="Active-listening"><a href="#Active-listening" class="headerlink" title="Active listening"></a>Active listening</h1><h2 id="Active-listening-1"><a href="#Active-listening-1" class="headerlink" title="Active listening"></a>Active listening</h2><ul><li>Understanding</li><li>Acknowledge</li><li>Encourage</li><li>Elaborate</li><li>Hear others ideas</li><li>See others ideas</li></ul><h1 id="Types-of-listening"><a href="#Types-of-listening" class="headerlink" title="Types of listening"></a>Types of listening</h1><h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><p>– Get ready</p><h2 id="Pause"><a href="#Pause" class="headerlink" title="Pause"></a>Pause</h2><p>– Give time for speaking</p><h2 id="Probe"><a href="#Probe" class="headerlink" title="Probe"></a>Probe</h2><p>– Let people elaborate</p><h2 id="Paraphrase-re-phrase"><a href="#Paraphrase-re-phrase" class="headerlink" title="Paraphrase/re-phrase"></a>Paraphrase/re-phrase</h2><p>– Summarize</p><p>– Repeat</p><p>– Confirm</p><h1 id="Three-obstacles-to-listening"><a href="#Three-obstacles-to-listening" class="headerlink" title="Three obstacles to listening"></a>Three obstacles to listening</h1><ul><li>Short-circuiting</li><li>Closed doors</li><li>Embattled egos</li></ul><h1 id="Browns-definition-of-conflict"><a href="#Browns-definition-of-conflict" class="headerlink" title="Browns definition of conflict"></a>Browns definition of conflict</h1><p>Conflict is the way teams come to a shared understanding of each decision made in the process</p><h1 id="Origins-to-conflicts"><a href="#Origins-to-conflicts" class="headerlink" title="Origins to conflicts"></a>Origins to conflicts</h1><p>• Differences in objectives<br>• Different opinions<br>• Different values<br>• Argumentation and friction are unavoidable<br>• Negotiations with the customer<br>• Argumentation within the project organization<br>• Different or changed priorities</p><h1 id="Positive-consequences-of-conflicts"><a href="#Positive-consequences-of-conflicts" class="headerlink" title="Positive consequences of conflicts"></a>Positive consequences of conflicts</h1><ul><li>Produces better ideas</li><li>Forces people to search for new approaches</li><li>Causes problems to surface</li><li>Forces clarification</li><li>Stimulates interest and creativity</li><li>An opportunity for people to test capacities</li></ul><h1 id="Shared-understanding"><a href="#Shared-understanding" class="headerlink" title="Shared understanding"></a>Shared understanding</h1><h1 id="Obstacles-to-shared-understanding"><a href="#Obstacles-to-shared-understanding" class="headerlink" title="Obstacles to shared understanding"></a>Obstacles to shared understanding</h1><ul><li>Unclear goals</li><li>Unclear process, directions</li><li>Unknown constraints</li><li>Personal disagreements</li><li>Misconception</li><li>Ego</li><li>Disinterest</li></ul><h1 id="Healthy-and-unhealthy-conflicts"><a href="#Healthy-and-unhealthy-conflicts" class="headerlink" title="Healthy and unhealthy conflicts"></a>Healthy and unhealthy conflicts</h1><h2 id="Unhealthy-conflict"><a href="#Unhealthy-conflict" class="headerlink" title="Unhealthy conflict"></a>Unhealthy conflict</h2><h3 id="A-mask-for"><a href="#A-mask-for" class="headerlink" title="A mask for"></a>A mask for</h3><p>– Not understanding<br>– Not knowing<br>– Anxiety for the decision<br>– Personal conflicts</p><h1 id="Root-causes-to-conflicts"><a href="#Root-causes-to-conflicts" class="headerlink" title="Root causes to conflicts"></a>Root causes to conflicts</h1><h2 id="External"><a href="#External" class="headerlink" title="External"></a>External</h2><h3 id="Four-types-of-tensions"><a href="#Four-types-of-tensions" class="headerlink" title="Four types of tensions"></a>Four types of tensions</h3><p>– Disconnectedness<br>– Exclusion<br>– Misdirection<br>– Ambiguity</p><h2 id="Internal"><a href="#Internal" class="headerlink" title="Internal"></a>Internal</h2><h3 id="Method-conflict"><a href="#Method-conflict" class="headerlink" title="Method conflict"></a>Method conflict</h3><p>– Different ways of interpreting the method – HOW things are to be done<br>– Different criteria for success<br>– Re-do things<br>– Adapt and tailor the method<br>– Could be hidden by an outcome conflict<br>– Usually it is healthy, it progresses work</p><h3 id="Outcome-conflict"><a href="#Outcome-conflict" class="headerlink" title="Outcome conflict"></a>Outcome conflict</h3><p>– “The content of a decision”<br>– Product outcomes – how the product look like<br>– Poor performance – how to work<br>– How to structure (Plan) the project<br>– Purpose conflict – Why is this done?<br>– Lack of decisions, lack of clarity</p><h1 id="Know-the-five-principles-of-behaviour-patterns"><a href="#Know-the-five-principles-of-behaviour-patterns" class="headerlink" title="Know the five principles of behaviour patterns"></a>Know the five principles of behaviour patterns</h1><ol><li>There is no single right answer</li><li>Patterns may introduce new approaches</li><li>Not every pattern works in every situation</li><li>Several patterns may give the same result</li><li>Patterns that are experienced as comfortable may be your favourite patterns</li></ol><h1 id="The-four-types-of-patterns-to-solve-root-causes-of-conflicts"><a href="#The-four-types-of-patterns-to-solve-root-causes-of-conflicts" class="headerlink" title="The four types of patterns to solve root causes of conflicts"></a>The four types of patterns to solve root causes of conflicts</h1><h2 id="Empathize"><a href="#Empathize" class="headerlink" title="Empathize"></a>Empathize</h2><pre><code>– Break down misunderstandings – shared understanding– Let a neutral person take notes</code></pre><h2 id="Involve"><a href="#Involve" class="headerlink" title="Involve"></a>Involve</h2><pre><code>– To get more involvement– Story telling. Could use neutral persons</code></pre><h2 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h2><pre><code>– Find focus, narrow the scope, take baby steps</code></pre><h2 id="Reframe"><a href="#Reframe" class="headerlink" title="Reframe"></a>Reframe</h2><pre><code>– Use different words, find other approaches</code></pre><h1 id="The-definition-of-collaboration"><a href="#The-definition-of-collaboration" class="headerlink" title="The definition of collaboration"></a>The definition of collaboration</h1><p>• Collaboration means “working together” according to the dictionary<br>• In software projects it also includes “producing something”</p><h1 id="Collaboration-vs-Groupthink"><a href="#Collaboration-vs-Groupthink" class="headerlink" title="Collaboration vs. Groupthink"></a>Collaboration vs. Groupthink</h1><h2 id="Collaboration"><a href="#Collaboration" class="headerlink" title="Collaboration"></a>Collaboration</h2><ul><li>Working together</li></ul><h2 id="Groupthink"><a href="#Groupthink" class="headerlink" title="Groupthink"></a>Groupthink</h2><ul><li>When you agree rather than come up with something better</li></ul><p>Collaboration should lead to groupthink</p><h1 id="Aspects-of-collaboration"><a href="#Aspects-of-collaboration" class="headerlink" title="Aspects of collaboration"></a>Aspects of collaboration</h1><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="The-tools-have-different-focus"><a href="#The-tools-have-different-focus" class="headerlink" title="The tools have different focus"></a>The tools have different focus</h3><p>Tools helps in sharing and collaboration<br>Software tools for<br>– Messages<br>– Chats<br>– Video</p><h2 id="Mindset"><a href="#Mindset" class="headerlink" title="Mindset"></a>Mindset</h2><h3 id="Perception-1"><a href="#Perception-1" class="headerlink" title="Perception"></a>Perception</h3><p>– How to interpret thing</p><h3 id="Attitude-1"><a href="#Attitude-1" class="headerlink" title="Attitude"></a>Attitude</h3><p>– How to react</p><h3 id="Disposition-1"><a href="#Disposition-1" class="headerlink" title="Disposition"></a>Disposition</h3><p>– Decide course of action, what to do</p><h2 id="Culture"><a href="#Culture" class="headerlink" title="Culture"></a>Culture</h2><p>  • Open workspaces or closed rooms?<br>  • Dislike in some way of communicating<br>  • Against or for face-to-face communication<br>  • Organizational limitations and boundaries<br>  • Competition between people<br>  • Heading for a promotion?</p><h1 id="The-four-virtues-of-collaboration"><a href="#The-four-virtues-of-collaboration" class="headerlink" title="The four virtues of collaboration"></a>The four virtues of collaboration</h1><ol><li>Clarity and Definition</li><li>Accountability and Ownership</li><li>Awareness and Respect</li><li>Openness and Honesty</li></ol><table><thead><tr><th>situations</th><th>example</th><th>interpretation</th><th>pattern</th></tr></thead><tbody><tr><td>design ignorance</td><td>“I don’t see why we even   need to spend time on this.”我不知道为什么我们要浪费时间做这个</td><td>Designers sometimes find   themselves defending the practice of design itself.</td><td>reflect the position(考虑他的位置);   anticipate agendas;   communicate   implications 讨论影响（如果..会..?）</td></tr><tr><td>Distracted by internal   competition内部矛盾</td><td>“The   marketing team is setting up their own Web site.”</td><td>Members of the project   team lose focus on project objectives because they are distracted by a competitor</td><td>Help me prioritize;   Fame the conversition;   Recount previous conversation</td></tr><tr><td>Distracted by shiny   objects（consequence of   distraction）</td><td>“Our site   needs social sharing functions.”</td><td>“Shiny objects” is one   term for ideas or technologies or techniques that have captured the   imagination of the public or the industry.</td><td>make it real;   hold a workshop;   offer alternatives(做一些 mock-up来比较)</td></tr><tr><td>Don’t know   what we need</td><td>“What do you   think we should do?”</td><td>Without a   clear definition of the design problem, the project team may run in different   directions.</td><td>provide starting points;   set reasonable expectations;   make assumption;</td></tr><tr><td>Efforts ignored</td><td>“This stuff   doesn’t really matter because we’re working on a separate track.”</td><td>利益相关者或其他成员选择忽视outputs, recommendations, and   solutions provided by people assigned to   those activities.</td><td>convert failure to action;   help me help you;   blame a “bad cop”</td></tr><tr><td>Excluded from planning</td><td>“It’s a   shame she’s not in the meeting. All these action items are for her.”</td><td>In this situation,   the people responsible for delivering and executing are not included in the   planning process.</td><td>acknowledge achievements;   communicate implications;   reduce the assignment</td></tr><tr><td>False consensus</td><td>“I think we all agree here.” 大家都认为已经达到共识了，但仔细想想其实没有</td><td>In this   situation the team comes to some agreement (on direction or approach, for   example) but doesn’t re</td><td>ask for a story;   communicate implications;   help me make this better(说出有挑战的点)</td></tr><tr><td>Inconsistent   expectations</td><td>“That’s not   what I said!”</td><td>From one   conversation to the next, team members change their expectations.</td><td>Blame a “bad cop”;   make it real;   set reasonable expectations</td></tr><tr><td>Insufficient   progress   项目进度很慢，和懒惰有关</td><td>“You’ve done   how much?”</td><td>assigned   tasks remain incomplete, design problems remain unsolved, or feedback   isn’t fully   incorporated.</td><td>Go back to basics;   Reduce the assignment;   set reasonable expectations</td></tr><tr><td>Irrelevant (无关紧要的)comparisons</td><td>“Have you   seen this Web site?”</td><td>someone   contributes comparative examples with little or no practical relevance to the   design problem</td><td>consider micro/macro perspectives;   help me prioritize指出哪里相关;   communicate implications</td></tr><tr><td>Lack of clear inputs</td><td>“Mmm…   yeah… we’re not going to have the budget to do user research.”</td><td>Designers   don’t have detailed inputs (requirements, starting points, etc.) to frame the   problem and inform the solution.</td><td>Make a plan;   Make it real;   Make assumptions</td></tr><tr><td>Lack of   context</td><td>“There’s a   lot going on behind the scenes here…”</td><td>Teams do not   have insight into the organizational, business, or operational context   surrounding a project.</td><td>Pick one thing;   Help me help you;   List assumptions</td></tr><tr><td>Lack of decision maker</td><td>“So, what   does the group think?”</td><td>Design   decisions drag out because no authority is capable of rendering executive   decisions when necessary.</td><td>anticipate agendas;   hold a workshop;   communicate implications</td></tr><tr><td>Lack of stable strategy</td><td>“So, things   have changed since we last spoke…”</td><td>the project’s   objectives, parameters, or constraints change regularly.</td><td>make assumption一些原则;   blame a “bad cop”制定deadline;   treat it like a project</td></tr><tr><td>Late-breaking   requirements</td><td>“Now that I   think about it, we’re also going to need…”</td><td>the   stakeholder who didn’t have time to participate in the process; the one thing   that one guy   forgot; a   change to the business that has a ripple effect throughout all the company’s   systems.</td><td>Help me prioritize;   make it real;   make a plan</td></tr><tr><td>Misinterpretation of tone</td><td>“Your email   was really snippy.”</td><td>breeds hostility(敌意) or disrespect   in the   communications.</td><td>Change the channel;   reflect the position;   come back later</td></tr><tr><td>New perspectives</td><td>“I know I’m   coming in with this late, but…”</td><td>stakeholders offering new perspectives may not welcome   their positions being hastily dismissed.(立场被驳回)</td><td>assert your process;   frame the conversation(和利益相关者建立谈话);   offer alternatives（提供更多的选择）</td></tr><tr><td>No plan</td><td>“OK, so what   do we do next?”</td><td>In this   situation, the project lacks a plan that defines desired outcomes,   activities, schedule, and assignments.</td><td>Blame a “bad cop”;   draw pictures;   offer alternatives</td></tr><tr><td>No time to   design</td><td>“Just get   some rough ideas down by tomorrow, OK?”</td><td>Forces   outside the design team establish an unreasonable schedule for producing   design ideas</td><td>assert your process(坚持自己，说完不成);   help me help you;   set reasonable expectations</td></tr><tr><td>Not a team   player   拒绝和别人合作</td><td>“I can take   care of this.”</td><td>Someone on   the team refuses to engage with other members</td><td>Ask for help;   Go back to basic;   communicate implications</td></tr><tr><td>Overpreparation认为已经解决了问题</td><td>“I think we’ve   got the solution already.”</td><td>Product   teams may create early mock-ups to frame the problem, which locks them into a   particular way of thinking about the   problem.</td><td>Hold a workshop;   ask questions;   ask for a story</td></tr><tr><td>Poorly   composed feedback</td><td>“That just   doesn’t look right to me.”</td><td>The team   receives feedback that doesn’t clearly articulate the next steps, the desired   improvements, or the issues with the current   version.</td><td>Frame the conversation;   take baby steps(go through the   design point by point);   change the metaphor</td></tr><tr><td>Poorly   planned presentation or discussion</td><td>“I hate to   put you on the spot, but…”</td><td>Project   stakeholders do not understand the design work because the design team hasn’t   assembled a meaningful narrative</td><td>set reasonable expectations;   assert your process;   ask questions</td></tr><tr><td>Reluctant   participation in design activities   (一些人不积极参与design)</td><td>“I’ll leave   the drawing to my colleagues.”</td><td>Some members   of the team may not actively participate in creative games and brainstorming   activities.</td><td>provide starting points;   assert your process;   communicate implications</td></tr><tr><td>Responses   not timely</td><td>“[This quote   intentionally left blank.]”</td><td></td><td>provide starting points;   assert your process;   communicate implications(和25pattern一样)</td></tr><tr><td>Separated   from key stakeholders</td><td>“Let me take   this to the VP, and I’ll let you know what she says.”</td><td>Designers   find themselves separated from the true client or customer through layers of   bureaucracy.</td><td>Hold a workshop;   assert your process;   take baby steps</td></tr><tr><td>Tasks and   goals not aligned</td><td>“Everyone   says we need to hold a daylong brainstorming session.”</td><td>Designers   sometimes engage in design activities with no real rationale. Such activities   yield outcomes that likely don’t move the   project   forward, or do so inefficiently.</td><td>set expectations;   ask for the first step;   make a plan</td></tr><tr><td>Uncoordinated   collaboration</td><td>“So, which   one of us is doing this?”(分配任务)</td><td>Some project   teams have no plan, no overall direction of where they’re going long-term and   the activities required to get there.</td><td>Take responsibility;   provide starting points;   enumerate issues</td></tr><tr><td>Unfounded   design direction（毫无根据的设计方向）</td><td>“Hey, I did   some mock-ups!”</td><td>Someone   outside the design team prepares screen designs, concepts, or other artifacts   attempting to establish a creative direction.   When a   non-designer shows up with design artifacts, the team may feel tension   because it implies lack of performance from the   designers.</td><td>Ask questions;   take responsibility;   acknowledge achievements</td></tr><tr><td>Unreasonable   constraints</td><td>“I want the   design to look the same on every Web browser.”</td><td>Designers   thrive on constraints: boundaries help designers understand what constitutes   a good solution for the challenge. Some   projects,   however, are bounded by constraints that are arbitrary.</td><td>consider micro/macro perspectives;   help me prioritize;   make it real</td></tr><tr><td>Wrong scope</td><td>“What do you   mean I wasn’t supposed to work on that?”</td><td>A designer   works on the wrong thing.</td><td>Take responsibility;   acknowledge achievements;   Go back to basics</td></tr></tbody></table><table><thead><tr><th>pattern</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Acknowledge achievements（involve</td><td>“Wow, you   guys did a great job on this. I can see the effort you put in. Can you walk   me through to make sure I understand   everything?”</td><td></td><td>Engaging with someone   about his or her work, and potentially balancing achievements with   opportunities for improvement.</td></tr><tr><td>Anticipate agendas（empathize</td><td>“I know   there are a few things that are especially important to you, so I wanted to   address them right away.”</td><td>Imagine what’s   important to other members of the team or project stakeholders before   engaging in a discussion with them.</td><td>Entering a   conversation with people expected to be competitive or confrontational, to   demonstrate that you have their best   interest in mind.</td></tr><tr><td>ask for a story（reframe</td><td></td><td>Ask someone   to describe their ideas or thoughts or needs in the form of a story.</td><td>Someone   struggles to articulate their needs in the abstract, and you want to help   them make it more concrete.</td></tr><tr><td>ask for help（involve</td><td></td><td>Directly ask   someone to help you with your task.</td><td>You need   help. You’re preoccupied with proving yourself instead of solving the design   problem.</td></tr><tr><td>ask for the first step(Reframe)</td><td></td><td>Ask someone   what their first step will be in attempting to achieve an objective.</td><td>Someone   struggles to articulate their process for performing a task, by getting them   to focus only on a small slice.</td></tr><tr><td>ask questions(Reframe,Involve)</td><td></td><td>Instead of   jumping to conclusions, ask questions to make sure both you and the other people   understand what’s going on.</td><td>All. The.   Time. No other skill is as essential to designers as being able to ask good   questions. Except, perhaps, listening to   the answers.</td></tr><tr><td>assert your process(redirect)</td><td></td><td>Remind   participants of the schedule and the process on which it is based, providing   lots of detail about activities, outcomes, and goals.</td><td>Someone   introduces factors that may compromise or derail the process, like late-breaking   requirements.</td></tr><tr><td>Blame a “bad cop”(reframe)</td><td></td><td>Use another   team member (not present) as a scapegoat. By putting a human face on the   situation, people might work harder to find a   compromise,   or might forgive ignorance.</td><td>Facing   unreasonable constraints or being put on the spot for a question you can’t   answer immediately.</td></tr><tr><td>Call their bluff(揭发底牌) reframe</td><td></td><td>Take a   challenge to its inevitable conclusion and hold everyone involved accountable   for meeting the challenge. Help other team   members   understand the impact of their request.</td><td>Presented   with unreasonable requests that aim to put pressure on the design team   without any meaningful outcome.</td></tr><tr><td>Capture   lessons learned（involve，redirect）</td><td></td><td>Make a list   of issues, obstacles, and difficulties that came out of a prior project or   situation or challenge.</td><td>The project   team hasn’t taken a moment to reflect on their previous work and how they   could have done it better.</td></tr><tr><td>change the channel（email，voice，etc）（reframe</td><td></td><td>Find a   different “channel” in which to communicate. Sometimes this means moving from   email to voice, or in person to email, or   instant   messenger to video chat. Sometimes this means taking a conversation out of a   public venue.</td><td>The medium   of communications is impacting participants’ ability to express themselves   clearly.</td></tr><tr><td>Change the   metaphor（reframe）</td><td></td><td>Use a   different concept to explore or explain a complex idea.</td><td>Participants   become fixated on the metaphor and not the problem being solved, or when   participants need a new way of   looking at   the same old problem.</td></tr><tr><td>Channel your   colleagues’ best qualities（redirect</td><td></td><td>，想想一个能处理好这件事的人。考虑他们将如何表现,并试图将其融入到情况。</td><td>Confronting   a situation that is causing you particular anxiety or frustration. Sometimes,   pretending to be a different person   allows us to   tap into not only their capabilities, but also their strength.</td></tr><tr><td>come back later（Empathize, Redirect</td><td></td><td>Postpone(延期) taking action until   participants can consider the situation more deliberately.</td><td>The   situation has gotten out of hand, such that the participants aren’t providing   reasonable and appropriate contributions</td></tr><tr><td>Communicate   implications（reframe</td><td>“If we don’t   get feedback until next week, we’ll have to shift our delivery milestones.   Without feedback, I’m worried that   we’ll have   more work later in the project dealing with late-breaking requirements.”</td><td>State, in   the simplest terms possible, the consequences of a decision</td><td>Participants   make decisions without realizing the negative consequences for the process or   project outcome.</td></tr><tr><td>Consider   micro/macro perspectives（redirect</td><td></td><td>Look at the   situation from two different angles, broad versus narrow or high versus low.   Adopting a new perspective can help   expose new   issues and solutions.</td><td>Participants   become so focused on one perspective that they lose sight of the project or   task objectives</td></tr><tr><td>Consider   your work/their work（reframe</td><td></td><td>Offer   encouragement and deflate the anxiety of critique by reminding colleagues   that stakeholders and other team members are just   doing their jobs.</td><td>Confrontations   have escalated to the extent that participants are having trouble hearing   each other’s concerns</td></tr><tr><td>Convert   failure to action（redirect</td><td></td><td>Take   outcomes that seem to be dead ends and use those as starting points for   subsequent tasks.</td><td>Confronted   by people who approach failure with a gloom and doom attitude, thinking that nothing   is recoverable from such   outcomes</td></tr><tr><td>draw pictures（reframe</td><td></td><td>Use visual   aids, spontaneous sketches, whiteboards, diagrams, or other visualizations to   organize thoughts. Encourage participants to   draw or embellish others’ drawings.</td><td>Participants   are having trouble making sense of each other’s statements</td></tr><tr><td>Frame the   conversation（Involve,   Redirect）</td><td></td><td>Establish a   structure for conversations, with clearly articulated topics and goals. To   the extent feasible, identify items outside the   scope of the   discussion to avoid getting off track.</td><td>Participants   struggle to keep conversations focused or the agenda becomes dominated by a   few players that distract from   objectives.</td></tr><tr><td>Go back to   basics(redirect, involve)</td><td></td><td>Rely on tried-and-true   project management tools and techniques to keep project teams aligned and on   track.</td><td>Project   teams begin to spin out of control because they take project management   basics for granted</td></tr><tr><td>Help me help   you (empathize)</td><td>“I know how important   this design project is to your work here. I’d like to make sure you can be   successful and meet the   milestones   of the larger project. What I can I do to help you meet those goals?”</td><td>Position the   team’s work and the team’s role relative to another’s goals. 展示团队的目标是如何与个人目标相一致的。</td><td>A   stakeholder or participant signals that they see themselves as competitive   with or opposed to the rest of the team.</td></tr><tr><td>Help me make   this better（involve）</td><td></td><td>让expert去帮助improve   the design</td><td>参与者不愿意或不能提供建设性的反馈。</td></tr><tr><td>Help me   prioritize （redirect）</td><td></td><td>Ask participants to prioritize issues, requirements,   feedback, or whatever else may be driving subsequent activities.（找重点）</td><td>Presented with a list of issues that will impact the team’s   ability to execute their plan or to complete tasks within the project’s   constraints.（有好多问题要解决）</td></tr><tr><td>Hold a   workshop（involve）</td><td></td><td>组织一个meeting，可以让利益相关者来Structure a meeting as a   collection of participatory activities combined with presentations, as if   team members were attending a   training workshop.   By making the activity more participatory, teams can engage all stakeholders.</td><td>Working with   a team of people who need structure to actively contribute to a project.</td></tr><tr><td>List   assumptions（reframe）</td><td></td><td>List the   educated guesses the team made to allow them to move forward with the   project. Assumptions may be related to any   context:   product, performance, plan, or purpose</td><td>The list of   assumptions   may be used to justify decisions or as a tool to validate assumptions.团队里一些人没有什么看法，依赖于别人的看法。</td></tr><tr><td>make a plan （refame</td><td></td><td>Identify a   goal, a set of activities to reach that goal, and a set of milestones leading   up to the goal. With multiple goals, be sure to   prioritize.</td><td>面对大量的工作，没有明确的下一步如何取得进展</td></tr><tr><td>make   assumptions （redirect）</td><td></td><td>不要让未知的信息阻碍了项目目标的实现。对丢失的信息进行有根据的猜测。一定要分享这些假设与项目团队提供设计决策的基本原理。</td><td>您已经准备好开始设计过程，但是无法弥补在理解上的差距</td></tr><tr><td>make it real   （redirect）</td><td></td><td>Take steps   to embody abstract ideas</td><td>参与者在不考虑可行性的情况下抛出想法和反馈。</td></tr><tr><td>Offer   alternatives（involve</td><td></td><td>提供两三个想法，让参与者对比和比较</td><td>提出了一个模糊的问题，将没有明确的标准来评估一个解决方案。</td></tr><tr><td>Offer a sneak peek(提供一个先睹为快)（invole</td><td>我们明天要讲三个概念，我先说一下你们明天会看到的。</td><td>Show or   describe upcoming work in brief to set expectations about what will be seen   or what participants will need to comment on.</td><td>Presenting   ideas or approaches that will challenge some underlying assumptions, as a way   to build the right mindset in key   participants.</td></tr><tr><td>Pick one   thing （redirect）</td><td></td><td>Select one   item from a list to focus on.</td><td>有很多issue困扰着</td></tr><tr><td>Pick your   battles（empathize）</td><td>避免对抗，以后再说</td><td>Choose the right   time to engage in active conflict.</td><td>Facing a   potentially major conflict that, compared to confrontations likely to emerge   later, will have little impact on the final   outcome.</td></tr><tr><td>Prioritize the portfolio（优先考虑投资组合）redirect</td><td>虽然不喜欢这个project，但能提高职业目标</td><td></td><td>一个项目或任务的线程已经变得如此妥协，以至于很难在其中找到个人意义或满足感</td></tr><tr><td>Provide   starting points（empathize）</td><td></td><td>给人们举一些例子来说明你所期望的工作水平</td><td>要给新人分配任务，团队，确立方向和期望值</td></tr><tr><td>Recount   previous conversation（reframe</td><td></td><td>总结之前的对话，为当前的对话奠定基础</td><td>当和记忆里不好的人一起工作时，先确定她们agree之前的对话要点。（避免他们经常在会议中改变自己的想法）</td></tr><tr><td>Reduce   the assignment（redirect</td><td>redirect</td><td>把手头任务的一小部分用来控制范围</td><td>有一个很大的项目，一小块的分配允许人们关注一个可控的设计问题和调整他们的预期。</td></tr><tr><td>Reflect the   position（e）</td><td></td><td>重复别人说的话来确保自己听到的是正确的，也可以体现respect</td><td>当参与者觉得他们可能不理解对方的立场时</td></tr><tr><td>Seek small   victories（redirect）</td><td></td><td>Drive toward   a win, no matter how small, to demonstrate success or establish a foundation   of success. 努力争取胜利，无论多么小</td><td></td></tr><tr><td>Set   reasonable expectations（redirect）</td><td></td><td>Provide a   clear account of how long tasks will take.</td><td>被问到项目的截止时间和范围，何时交付项目</td></tr><tr><td>Show the   goal（Empathize,   Involve, Redirect</td><td></td><td>让利益相关者尽可能生动地描述项目或任务的期望结果，确保他们知道他们要什么。Ask stakeholders to describe as   vividly as possible the desired outcome of a project or task. This isn’t so   much to describe the final   design as it   is to make sure they know what they’re getting.</td><td>项目已经花了很多时间，但还是不清楚stakeholders到底要什么</td></tr><tr><td>show your   work（invole</td><td></td><td>揭示设计关键点，提供了基础和设计决策的理由</td><td>当给stakeholders看你的design   idea时</td></tr><tr><td>take baby   staps（redirect，involve</td><td></td><td>introduce引进小小的改变 给项目，一种文化来影响大的charge</td><td>团队或组织的习惯根深蒂固,新的思维方式难以实现。</td></tr><tr><td>take responsibility（Empathize</td><td></td><td>诚实坦率地面对错误。主动帮忙收拾残局 Be honest and forthright with   errors. Offer to help clean up the mess.</td><td>Facing an   error that has an impact on other team members or the success of the project.</td></tr><tr><td>treat it   like a project（reframe）</td><td>有一个问题很难达成一致，   create a plan 去解决</td><td>建立目标、活动、依赖关系、角色和其他结构，以推动冲突的解决方案Establish a goal, activities,   dependencies, roles, and other structure to drive toward a solution for a   conflict</td><td>Facing a   conflict with so many moving parts that resolution requires careful planning.</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>behavior</th><th>how</th><th>virtue</th><th>interpretation</th></tr></thead><tbody><tr><td>ask questions that yield specific   answers</td><td></td><td>Clarity and Definition</td><td>Structure   questions to encourage increasingly direct and detailed responses. Yes/no   questions are OK, so long as they validate a   specific decision or direction.</td></tr><tr><td>Centralize decision making 集中决策</td><td>At the   beginning of the project, ask who owns final decisions about design.   Lean on the   decision maker to validate direction and approach</td><td>Accountability and Ownership</td><td></td></tr><tr><td>Clarify   expectations regarding ability and delivery</td><td>在收到任务后，确保你明白任务的交付时间和任务</td><td>Accountability and Ownership</td><td>项目参与者应该让对方诚实地、公开地了解他们的工作地点</td></tr><tr><td>Communicate progress</td><td>日常保持小火苗！Establish a rhythm for   communicating updates to project leads.   Use a simple   template for email or other electronic messages to communicate updates.</td><td>Accountability and Ownership</td><td></td></tr><tr><td>Don’t hog opportunities不要占用机会？？？</td><td>在要说话之前，保持15分钟沉默，让别人先说</td><td>Awareness and Respect</td><td>让每个参与者都参与进来。</td></tr><tr><td>Embrace constructive criticism接受建设性的建议</td><td>先考虑一下这是他们的工作，也不算他们的错。在他们打击之前，先预测一下Anticipate   critiques before they happen to soften the blow.</td><td>Accountability and Ownership</td><td></td></tr><tr><td>Embrace risk</td><td>明白风险，可能的消极后果</td><td>Accountability and Ownership</td><td></td></tr><tr><td>Employ采用 tools that   yield meaningful outcomes</td><td>判断工具是否能让项目继续Question the value of every activity or deliverable, and   seek to understand how it will move the project forward and how it   will lead to   the next step</td><td>Clarity and Definition</td><td>make a contribution</td></tr><tr><td>Encourage disruptive communications</td><td>采用多种沟通渠道，为团队成员提供各种相互交流的方式。</td><td>Clarity and Definition</td><td></td></tr><tr><td>Engage in dialogue</td><td>Show up to   meetings with lots of questions prepared, whether you’re responsible for   presenting concepts or not.</td><td>Clarity and Definition</td><td>鼓励对话来阐述项目的概念、设计要求等。</td></tr><tr><td>Engage multiple senses to   communicate 调用多种感官来交流</td><td>计划会议不只是说什么，而是要展示什么。有一个文档相机准备显示屏幕上快速草图或投射在墙上。注意图片所示的节奏,特别是,人们会花最多的时间看看照片</td><td>Clarity and Definition</td><td>Use both   speaking and pictures to engage team members.</td></tr><tr><td>Establish role definitions</td><td>If you’re   not in charge of defining roles, ask for each participant’s responsibilities</td><td>Clarity and Definition</td><td>确保团队中的每个人都知道他或她的职责是什么。Take the time to ensure they understand whether they   own   particular activities, or are just contributors.</td></tr><tr><td>Give others   room to learn from mistakes</td><td>Offer to help colleagues reflect on   their failures.</td><td>Awareness and Respect</td><td></td></tr><tr><td>Have a communications plan</td><td>使用模板为常见的电子邮件格式。建立一些规则用不同的交流方式。Identify who can respond to inquiries from different   stakeholders</td><td>Clarity and Definition</td><td>为团队成员之间的交流创建标准。</td></tr><tr><td>Have a project plan</td><td>ensure you can answer who, what, where, when, why, and   how questions about the project.确保你能回答谁，什么，什么，何时，为什么，以及如何对这个项目的问题</td><td>Clarity and Definition</td><td>Create a   project schedule with milestones and resource assignments. Clearly state how   much time each team member should spend   on each   activity.</td></tr><tr><td>Have decision-making mechanisms有决策机制</td><td>为设计或项目计划制定目标或原则以指导决策。指定具体的人负责,负责具体的决策。Establish goals or principles for the design or project   plan to guide decisions.   Designate   specific people responsible and accountable for specific decisions.</td><td>Clarity and Definition</td><td></td></tr><tr><td>Have   objectives for every discussion</td><td>If you’re   organizing the meeting, send an agenda, a list of topics, or even a   one-sentence objective beforehand.   If you’re   not organizing the meeting, ask the organizer for the agenda or objectives.   If it’s an   ad hoc meeting, take a moment to validate expectations with other   participants.</td><td>Clarity and Definition</td><td>know   beforehand what you expect to come out of it.</td></tr><tr><td>Keep   meetings focused and short</td><td>Conclude a   meeting when it’s over, not when the clock says it’s over.   Show up with   an agenda and objectives so you know when it’s over.</td><td>Awareness and Respect</td><td>Golden Rule: Assume other people’s time is as valuable as   yours. 假设别人的时间和你的一样宝贵</td></tr><tr><td>Know when you’re “spinning” 知道你遇到瓶颈的时候</td><td>在任务或任务上花一小段时间(大约10% - 20%的时间)，然后评估进度。如果开始适应,坚持下去。如果没有明确的方向，可以向同事寻求帮助。</td><td>Accountability and Ownership</td><td>意识到你的努力没有成效。旋转的行为将是一个问题解决,没有做出任何实质性的进展。有些人坚持啃一个问题,消耗时间和金钱,因为他们需要证明自己。</td></tr><tr><td>Offer direct critiques</td><td>Avoid generalizations like “It’s not   good.”避免笼统地说“这不好”。</td><td>Awareness and Respect</td><td></td></tr><tr><td>Play to strengths 发挥优势</td><td>Reflect on abilities and skills to identify strengths反思能力和技能，以确定优势</td><td>Accountability and Ownership</td><td>确保项目中的角色和责任与团队成员的个人能力、技能和性格相一致。</td></tr><tr><td>Provide a rationale for decisions为决策提供依据</td><td>Enumerate key decisions and identify   the primary rationale for driving them.列举关键决策并确定驱动它们的基本原理。</td><td>Accountability and Ownership</td><td>确保所有的决定——关于产品，关于计划，关于项目——都有合理的理由</td></tr><tr><td>Recognize contributions承认贡献</td><td></td><td>Accountability and Ownership</td><td>if someone   inspired a particular direction or lent an insight, give them a shout-out.</td></tr><tr><td>Reduce competition</td><td>In   competitions, there is always a loser. Losers no longer feel as invested in   the project. When people feel like they will make a meaningful contribution,   regardless of their role, they will do better work and support each other in   the pursuit of the project’s goals</td><td>Accountability and Ownership</td><td>从设计过程中消除对彼此不利的设计过程。鼓励人们一起工作,而不是竞选。</td></tr><tr><td>Reflect on your performance</td><td></td><td>Awareness and Respect</td><td>花点时间考虑一下你在一个项目或任务上的表现。识别领域你可以表现的更好,发挥你的长处。确定下次你会做不同的事情，然后吸取教训，下次再用。</td></tr><tr><td>Respect the calendar</td><td></td><td>Awareness and Respect</td><td></td></tr><tr><td>Set availability expectations</td><td></td><td>Awareness and Respect</td><td></td></tr><tr><td>Set performance expectations</td><td></td><td>Awareness and Respect</td><td>Clearly   communicate ability to complete tasks and assignments.</td></tr></tbody></table><table><thead><tr><th>Traits</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Adaptability</td><td></td><td></td><td></td></tr><tr><td>Adherence to style</td><td></td><td></td><td></td></tr><tr><td>Assumption threshold</td><td>假设阈值</td><td></td><td></td></tr><tr><td>Creative triggers</td><td></td><td></td><td></td></tr><tr><td>Defining the challenge</td><td></td><td></td><td></td></tr><tr><td>Desired cadence</td><td>期望的节拍</td><td>Workload， client   culture</td><td></td></tr><tr><td>Dogmatism</td><td>教条主义</td><td></td><td></td></tr><tr><td>Format for feedback</td><td></td><td></td><td></td></tr><tr><td>Giving and getting   recognition</td><td></td><td></td><td></td></tr><tr><td>Knee-jerk reaction</td><td>很快的反应</td><td>要么不思考马上赞同，要么马上反对</td><td></td></tr><tr><td>Level of abstraction</td><td>喜欢做抽象的事情</td><td></td><td></td></tr><tr><td>Perception of control</td><td></td><td></td><td></td></tr><tr><td>Preferred environment</td><td></td><td></td><td></td></tr><tr><td>Preferred perspective</td><td></td><td></td><td></td></tr><tr><td>Project load</td><td></td><td></td><td></td></tr><tr><td>Structure of design   reviews</td><td></td><td></td><td></td></tr><tr><td>Transparency</td><td>透明度</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTH </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software-Architecture-and-Quality</title>
      <link href="/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Software-Architecture-and-Quality/Software-Architecture-and-Quality/"/>
      <url>/2019/01/19/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/Software-Architecture-and-Quality/Software-Architecture-and-Quality/</url>
      
        <content type="html"><![CDATA[<h1 id="CH-1-What-is-software-architecture"><a href="#CH-1-What-is-software-architecture" class="headerlink" title="CH 1. What is software architecture?"></a>CH 1. What is software architecture?</h1><h2 id="What-is-software-architecture"><a href="#What-is-software-architecture" class="headerlink" title="What is software architecture"></a>What is software architecture</h2><p>The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.</p><ol><li>To find out what users of the system think about the system. ×</li><li>To assist in marketing activities. ×</li><li>To make estimate for projects planning purposes. √</li><li>To use as input for dividing up the work into tasks. √</li><li>To analyze and predict characteristics of the implemented system. √</li><li>To present the future development of the product. ×</li></ol><h2 id="Categories-of-structures"><a href="#Categories-of-structures" class="headerlink" title="Categories of structures"></a>Categories of structures</h2><ul><li>First, some structures partition systems into implementation units called <strong>modules</strong>.</li><li>Other structures are dynamic, meaning that they focus on the way the elements interact with each other at runtime to carry out the system’s functions. we will call runtime structures <strong>component-and-connector (C&amp;C) structures</strong>.</li><li>A third kind of structure describes the mapping from software structures to the system’s organizational, developmental, installation, and execution environments. These mappings are called <strong>allocation structures</strong>.</li></ul><h2 id="Three-Kinds-of-Structures"><a href="#Three-Kinds-of-Structures" class="headerlink" title="Three Kinds of Structures"></a>Three Kinds of Structures</h2><h3 id="Module-structures"><a href="#Module-structures" class="headerlink" title="Module structures"></a><strong>Module structures</strong></h3><p>embody decisions as to how the system is to be structured as a set of code or data units that have to be constructed or procured. </p><ul><li><strong>Decomposition structure</strong>. The units are modules that are related to each other by the is-a-submodule-of relation, showing how modules are decomposed into smaller modules recursively until the modules are small enough to be easily understood.</li><li><strong>Uses structure</strong>. The units are related by the uses relation, a specialized form of dependency.</li><li><strong>Layer structure</strong>. The modules in this structure are called layers. A layer is an abstract “virtual machine” that provides a cohesive set of services through a managed interface.</li></ul><h3 id="Component-and-connector"><a href="#Component-and-connector" class="headerlink" title="Component-and-connector"></a><strong>Component-and-connector</strong></h3><p>structures embody decisions as to how the system is to be structured as a set of elements that have runtime behavior (components) and interactions (connectors). </p><ul><li><strong>Service structure</strong>. The units here are services that interoperate with each other by service coordination mechanisms.</li><li><strong>Concurrency structure</strong>. This component-and-connector structure allows the architect to determine opportunities for parallelism and the locations where resource contention may occur.</li></ul><h3 id="Allocation-structures"><a href="#Allocation-structures" class="headerlink" title="Allocation structures"></a><strong>Allocation structures</strong></h3><p>embody decisions as to how the system will relate to nonsoftware structures in its environment (such as CPUs, file systems, networks, development teams, etc.).</p><ul><li><strong>Deployment structure</strong>. The deployment structure shows how software is assigned to hardware processing and communication elements.</li><li><strong>Implementation structure</strong>. This structure shows how software elements (usually modules) are mapped to the file structure(s) in the system’s development, integration, or configuration control environments.</li><li><strong>Work assignment structure</strong>. This structure assigns responsibility for implementing and integrating the modules to the teams who will carry it out.</li></ul><h1 id="CH-4-Understanding-Quality-Attributes"><a href="#CH-4-Understanding-Quality-Attributes" class="headerlink" title="CH 4. Understanding Quality Attributes"></a>CH 4. Understanding Quality Attributes</h1><h2 id="System-requirements-can-be-categorized-as"><a href="#System-requirements-can-be-categorized-as" class="headerlink" title="System requirements can be categorized as"></a>System requirements can be categorized as</h2><p><strong>Functional requirements</strong>. These requirements state what the system must do, and how it must behave or react to run-time stimuli. </p><p><strong>Quality attribute requirements</strong>. These requirements annotate (qualify) functional requirements. Qualification might be how fast the function must be performed, how resilient it must be to erroneous input, how easy the function is to learn, etc.</p><p><strong>Constraints</strong>. A constraint is a design decision with zero degrees of freedom. That is, it’s a design decision that has already been made for you.</p><h2 id="Quality-Attribute-Requirements-six-parts"><a href="#Quality-Attribute-Requirements-six-parts" class="headerlink" title="Quality Attribute Requirements six parts"></a>Quality Attribute Requirements six parts</h2><ol><li><strong>Source of stimulus</strong>. This is some entity (a human, a computer system, or any other actuator) that generated the stimulus.</li><li><strong>Stimulus</strong>. The stimulus is a condition that requires a response when it arrives at a system.</li><li><strong>Environment</strong>. The stimulus occurs under certain conditions. The system may be in an overload condition or in normal operation, or some other relevant state. For many systems, “normal” operation can refer to one of a number of modes. For these kinds of systems, the environment should specify in which mode the system is executing.</li><li><strong>Artifact</strong>. Some artifact is stimulated. This may be a collection of systems, the whole system, or some piece or pieces of it.</li><li><strong>Response</strong>. The response is the activity undertaken as the result of the arrival of the stimulus.</li><li><strong>Response measure</strong>. When the response occurs, it should be measurable in some fashion so that the requirement can be tested.</li></ol><p><img src="/2019/01/19/期末复习/Software-Architecture-and-Quality/Software-Architecture-and-Quality/1547890359658.png" alt=""></p><h2 id="Guiding-Quality-Design-Decisions"><a href="#Guiding-Quality-Design-Decisions" class="headerlink" title="Guiding Quality Design Decisions"></a>Guiding Quality Design Decisions</h2><ul><li>Architecture design is a systematic approach to making design decisions.<h3 id="We-categorize-the-design-decisions-that-an-architect-needs-to-make-as-follows"><a href="#We-categorize-the-design-decisions-that-an-architect-needs-to-make-as-follows" class="headerlink" title="We categorize the design decisions that an architect needs to make as follows:"></a>We categorize the design decisions that an architect needs to make as follows:</h3><ul><li>Allocation of responsibilities</li><li><strong>Coordination model</strong></li><li><strong>Data model</strong></li><li>Management of resources</li><li>Mapping among architectural elements</li><li><strong>Binding time decisions</strong></li><li>Choice of technology<h2 id="Coordination-model"><a href="#Coordination-model" class="headerlink" title="Coordination model"></a><strong>Coordination model</strong></h2><h3 id="Software-works-by-having-elements-interact-with-each-other-through-designed-mechanisms-These-mechanisms-are-collectively-referred-to-as-a-coordination-model-Decisions-about-the-coordination-model-include-these"><a href="#Software-works-by-having-elements-interact-with-each-other-through-designed-mechanisms-These-mechanisms-are-collectively-referred-to-as-a-coordination-model-Decisions-about-the-coordination-model-include-these" class="headerlink" title="Software works by having elements interact with each other through designed mechanisms. These mechanisms are collectively referred to as a coordination model. Decisions about the coordination  model include these:"></a>Software works by having elements interact with each other through designed mechanisms. These mechanisms are collectively referred to as a coordination model. Decisions about the coordination  model include these:</h3></li></ul></li><li>Identifying the elements of the system that must coordinate, or are prohibited from coordinating.</li><li>Determining the <strong>properties of the coordination</strong>, such as <strong>timeliness, currency, completeness, correctness, and consistency</strong>.</li><li>Choosing the <strong>communication mechanisms</strong> (between systems, between our system and external entities, between elements of our system) that realize those properties. Important properties of the communication mechanisms include <strong>stateful versus stateless</strong>, <strong>synchronous versus asynchronous</strong>, <strong>guaranteed versus nonguaranteed delivery</strong>, and performance-related properties such as <strong>throughput and latency</strong>.<h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3></li><li>Both asynchronous communication and synchronous  communication can be used in the same system</li><li>Asynchronous communication does not block the program thread until a response is ready </li><li>Asynchronous communication guarantees when a response is returned<h2 id="Data-model"><a href="#Data-model" class="headerlink" title="Data model"></a><strong>Data model</strong></h2><h3 id="Every-system-must-represent-artifacts-of-system-wide-interest—data—in-some-internal-fashion-The-collection-of-those-representations-and-how-to-interpret-them-is-referred-to-as-the-data-model-Decisions-about-the-data-model-include-the-following"><a href="#Every-system-must-represent-artifacts-of-system-wide-interest—data—in-some-internal-fashion-The-collection-of-those-representations-and-how-to-interpret-them-is-referred-to-as-the-data-model-Decisions-about-the-data-model-include-the-following" class="headerlink" title="Every system must represent artifacts of system-wide interest—data—in some internal fashion. The collection of those representations and how to interpret them is referred to as the data model. Decisions about the data model include the following:"></a>Every system must represent artifacts of system-wide interest—data—in some internal fashion. The collection of those representations and how to interpret them is referred to as the data model. Decisions about the data model include the following:</h3></li><li>Choosing the major <strong>data abstractions</strong>, their operations, and their properties. This includes determining how the data items are created, initialized, accessed, persisted, manipulated, translated, and destroyed.</li></ul><ol><li><strong>Compiling metadata</strong> needed for consistent interpretation of the data.</li><li><strong>Organizing the data</strong>. This includes determining whether the data is going to be kept in a relational database, a collection of objects, or both. If both, then the mapping between the two different locations of the data must be determined.<h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h3></li></ol><ul><li>Choosing the major data abstractions, their operations, and their  properties.</li><li>Compiling metadata needed for consistent interpretation of the data.</li><li>Organizing the data.<h2 id="Binding-time-decisions"><a href="#Binding-time-decisions" class="headerlink" title="Binding time decisions"></a><strong>Binding time decisions</strong></h2></li><li>Binding time decisions introduce allowable ranges of variation. This variation can be bound at different times in the software life cycle by different entities— from design time by a developer to runtime by an end user. A binding time decision establishes the scope, the point in the life cycle, and the mechanism for achieving the variation.<br>The decisions in the other six categories have an associated binding time decision. Examples of such binding time decisions include the following:</li><li>For allocation of responsibilities, you can have <strong>build-time selection of modules</strong> via a parameterized makefile.</li><li>For choice of coordination model, you can design <strong>runtime negotiation of protocols</strong>.</li><li>For resource management, you can design a system to <strong>accept new peripheral devices plugged in at runtime</strong>, after which the system recognizes them and <strong>downloads and installs the right drivers automatically</strong>.</li><li>For choice of technology, you can build an app store for a smartphone that <strong>automatically downloads the version of the app</strong> appropriate for the phone of the customer buying the app.<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example:"></a>Example:</h3></li><li>Setting the hostname of the server in a configuration file</li><li>Using the user input to set the destination of a message</li><li>Using inheritance in the code to execute the different subclass implementations depending on program state</li></ul><h2 id="Quality-attributes"><a href="#Quality-attributes" class="headerlink" title="Quality attributes"></a>Quality attributes</h2><ol><li><strong>Availability</strong></li><li>Interoperability</li><li><strong>Modifiability</strong></li><li><strong>Performance</strong></li><li><strong>Security</strong></li><li><strong>Testability</strong></li><li>Usability</li></ol><h2 id="Development-time-qualities"><a href="#Development-time-qualities" class="headerlink" title="Development time qualities"></a>Development time qualities</h2><ul><li>Modifiability</li><li>Testability</li></ul><h1 id="CH5-Availability"><a href="#CH5-Availability" class="headerlink" title="CH5. Availability"></a>CH5. Availability</h1><h2 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h2><h3 id="Fault"><a href="#Fault" class="headerlink" title="Fault"></a><strong>Fault</strong></h3><ul><li>A failure’s cause is called a <strong>fault</strong>. A fault can be either internal or  external to the system under consideration. Intermediate states between the occurrence of a fault and the occurrence of a failure are called <strong>errors</strong>. </li></ul><h3 id="Failure"><a href="#Failure" class="headerlink" title="Failure"></a><strong>Failure</strong></h3><ul><li>A <strong>failure</strong> is the deviation of the system from its specification, where the deviation is externally visible.</li></ul><h3 id="Fault-and-failure"><a href="#Fault-and-failure" class="headerlink" title="Fault and failure"></a><strong>Fault and failure</strong></h3><h4 id="Fault-1"><a href="#Fault-1" class="headerlink" title="Fault"></a><strong>Fault</strong></h4><ul><li>Internal or external deviation of correct function<h4 id="Failure-1"><a href="#Failure-1" class="headerlink" title="Failure"></a><strong>Failure</strong></h4></li><li>When the system cannot provide its intended service</li><li>Caused by faults that could not be handled/repaired<h3 id="Resilient"><a href="#Resilient" class="headerlink" title="Resilient"></a><strong>Resilient</strong></h3></li><li>Faults can be prevented, tolerated, removed, or forecast. In this way a system becomes “<strong>resilient</strong>” to faults.</li></ul><h3 id="Degraded-operation-mode"><a href="#Degraded-operation-mode" class="headerlink" title="Degraded operation mode"></a><strong>Degraded operation mode</strong></h3><ul><li>we are often concerned with the level of capability that remains when a failure has occurred—a degraded operating mode.<h3 id="MTBF"><a href="#MTBF" class="headerlink" title="MTBF"></a><strong>MTBF</strong></h3><ul><li>mean time between failures<h3 id="MTTR"><a href="#MTTR" class="headerlink" title="MTTR"></a><strong>MTTR</strong></h3></li><li>mean time to repair<h3 id="Formula"><a href="#Formula" class="headerlink" title="Formula"></a><strong>Formula</strong></h3>$$<br>MTBF\over(MTBF+MTTR)<br>$$</li></ul></li></ul><h2 id="Service-Level-Agreement-SLA"><a href="#Service-Level-Agreement-SLA" class="headerlink" title="Service Level Agreement, SLA"></a><strong>Service Level Agreement, SLA</strong></h2><ul><li>The availability provided by a computer system or hosting service is frequently expressed as a <strong>service-level agreement</strong>. This SLA specifies the availability level that is guaranteed and, usually, the penalties that the computer system or hosting service will suffer if the SLA is violated.</li></ul><h2 id="Tactic"><a href="#Tactic" class="headerlink" title="Tactic"></a>Tactic</h2><p><img src="/2019/01/19/期末复习/Software-Architecture-and-Quality/Software-Architecture-and-Quality/1547958287611.png" alt=""></p><h3 id="Detect-Faults"><a href="#Detect-Faults" class="headerlink" title="Detect Faults"></a>Detect Faults</h3><h4 id="Heart-beat"><a href="#Heart-beat" class="headerlink" title="Heart-beat"></a><strong>Heart-beat</strong></h4><ul><li>Heartbeat is a fault detection mechanism that employs a periodic message exchange between a system monitor and a process being monitored.<h4 id="Ping-Echo"><a href="#Ping-Echo" class="headerlink" title="Ping/Echo"></a><strong>Ping/Echo</strong></h4></li><li>Ping/echo refers to an asynchronous request/response message pair exchanged between nodes, used to determine reachability and the round-trip delay through the associated network path.<h4 id="Heart-beat-tactic-vs-Ping-Echo-tactic"><a href="#Heart-beat-tactic-vs-Ping-Echo-tactic" class="headerlink" title="Heart-beat tactic vs. Ping/Echo- tactic"></a><strong>Heart-beat tactic</strong> vs. <strong>Ping/Echo- tactic</strong></h4></li><li>The big difference between heartbeat and ping/echo is who holds the responsibility for initiating the health check—the monitor or the component itself.<h3 id="Recover-from-Faults"><a href="#Recover-from-Faults" class="headerlink" title="Recover from Faults"></a>Recover from Faults</h3><h4 id="Active-Redundancy"><a href="#Active-Redundancy" class="headerlink" title="Active Redundancy"></a><strong>Active Redundancy</strong></h4></li><li>Active redundancy (hot spare). This refers to a configuration where all of the nodes (active or redundant spare) in a protection group receive and process identical inputs in parallel, allowing the redundant spare(s) to maintain synchronous state with the active node(s).<h4 id="Passive-Redundancy"><a href="#Passive-Redundancy" class="headerlink" title="Passive Redundancy"></a><strong>Passive Redundancy</strong></h4></li><li>Passive redundancy (warm spare). This refers to a configuration where only the active members of the protection group process input traffic; one of their duties is to provide the redundant spare(s) with periodic state updates.<h4 id="Spare"><a href="#Spare" class="headerlink" title="Spare"></a><strong>Spare</strong></h4></li><li>Spare (cold spare). Cold sparing refers to a configuration where the redundant spares of a protection group remain out of service until a fail-over occurs, at which point a power-on-reset procedure is initiated on the redundant spare prior to its being placed in service.<h4 id="Rollback"><a href="#Rollback" class="headerlink" title="Rollback"></a><strong>Rollback</strong></h4></li><li>Rollback. This tactic permits the system to revert to a previous known good state, referred to as the “rollback line”—rolling back time—upon the detection of a failure.</li></ul><h2 id="Fault-tree"><a href="#Fault-tree" class="headerlink" title="Fault tree"></a>Fault tree</h2><p>Fault tree analysis is an analytical technique that specifies a state of the system that negatively impacts safety or reliability, and then analyzes the system’s context and operation to find all the ways that the undesired state could occur.</p><p><img src="/2019/01/19/期末复习/Software-Architecture-and-Quality/Software-Architecture-and-Quality/1547915772754.png" alt="A simple fault tree. D fails if A fails and either B or C fails."></p><p><img src="/2019/01/19/期末复习/Software-Architecture-and-Quality/Software-Architecture-and-Quality/1547915852136.png" alt="Fault tree gate symbols"></p><h1 id="CH7-Modifiability"><a href="#CH7-Modifiability" class="headerlink" title="CH7. Modifiability"></a>CH7. Modifiability</h1><h2 id="What-is-Modifiability？"><a href="#What-is-Modifiability？" class="headerlink" title="What is Modifiability？"></a>What is Modifiability？</h2><ul><li>Modifiability is about change and our interest in it is in the cost and risk of making change</li><li>To plan for modifiability, an architect has to consider <strong>four questions</strong>:</li></ul><ol><li><strong>What can change?</strong><br>A change can occur to any aspect of a system: the <strong>functions</strong> that the system computes, the <strong>platform</strong> (the hardware, operating system, middleware), the <strong>environment</strong> in which the system operates (the systems with which it must interoperate, the <strong>protocols</strong> it uses to communicate with the rest of the world), the <strong>qualities</strong> the system exhibits (its performance, its reliability, and even its future modifications), and its <strong>capacity</strong> (number of users supported, number of simultaneous operations).</li><li><strong>What is the likelihood of the change?</strong><br>One cannot plan a system for all potential changes—the system would never be done, or if it was done it would be far too expensive and would likely suffer quality attribute problems in other dimensions. Although anything might change, <strong>the architect has to make the tough decisions about which changes are likely, and hence which changes are to be supported, and which are not.</strong></li><li><strong>When is the change made and who makes it?</strong><br>Most commonly in the past, a change was made to source code. Changes can be made to the <strong>implementation</strong> (by modifying the source code), during <strong>compile</strong> (using compile-time switches), during <strong>build</strong> (by choice of libraries), during <strong>configuration setup</strong> (by a range of techniques, including parameter setting), or during <strong>execution</strong> (by parameter settings, plugins, etc.). A change can also be made by a <strong>developer</strong>, an <strong>end user</strong>, or a <strong>system administrator</strong>.</li><li><strong>What is the cost of the change?</strong><br>Making a system more modifiable involves two types of cost:</li></ol><ul><li>The cost of introducing the mechanism(s) to make the system more modifiable</li><li>The cost of making the modification using the mechanism(s)</li></ul><h1 id="CH8-Performance"><a href="#CH8-Performance" class="headerlink" title="CH8. Performance"></a>CH8. Performance</h1><h2 id="Performance-General-Scenario"><a href="#Performance-General-Scenario" class="headerlink" title="Performance General Scenario"></a>Performance General Scenario</h2><table><thead><tr><th>Portion of Scenario</th><th>Possible Values</th></tr></thead><tbody><tr><td>Source</td><td>Internal or external to the system</td></tr><tr><td>Stimulus</td><td>Arrival of a periodic, sporadic, or stochastic event</td></tr><tr><td>Artifact</td><td>System or one or more components in the system</td></tr><tr><td>Environment</td><td>Operational mode: normal, emergency, peak load, overload</td></tr><tr><td>Response</td><td>Process events, change level of service</td></tr><tr><td>Response Measure</td><td>Latency, deadline, throughput, jitter, miss rate</td></tr></tbody></table><h2 id="Tactics-for-Performance"><a href="#Tactics-for-Performance" class="headerlink" title="Tactics for Performance"></a>Tactics for Performance</h2><p><img src="/2019/01/19/期末复习/Software-Architecture-and-Quality/Software-Architecture-and-Quality/1547962999199.png" alt="Performance tactics"></p><h3 id="Control-Resource-Demand"><a href="#Control-Resource-Demand" class="headerlink" title="Control Resource Demand"></a><strong>Control Resource Demand</strong></h3><ul><li><strong>Manage sampling rate</strong>. If it is possible to reduce the sampling frequency at which a stream of environmental data is captured, then demand can be reduced, typically with some attendant loss of fidelity.</li><li><strong>Limit event response</strong>. Process events only up to a set maximum rate, thereby ensuring more predictable processing when the events are actually processed.</li><li><strong>Prioritize events</strong>. If not all events are equally important, you can impose a priority scheme that ranks events according to how important it is to service them.<h3 id="Manage-Resources"><a href="#Manage-Resources" class="headerlink" title="Manage Resources"></a><strong>Manage Resources</strong></h3></li><li><strong>Increase resources</strong>. Faster processors, additional processors, additional memory, and faster networks all have the potential for reducing latency.</li><li><strong>Introduce concurrency</strong>. Concurrency can be introduced by processing different streams of events on different threads or by creating additional threads to process different sets of activities.</li><li><strong>Maintain multiple copies of computations</strong>. Reduce the contention that would occur if all computations took place on a single server.</li></ul><h1 id="CH13-Patterns-and-Tactics"><a href="#CH13-Patterns-and-Tactics" class="headerlink" title="CH13. Patterns and Tactics"></a>CH13. Patterns and Tactics</h1><h2 id="What-is-a-Pattern"><a href="#What-is-a-Pattern" class="headerlink" title="What is a Pattern?"></a>What is a Pattern?</h2><p>An architectural pattern</p><ul><li>is a package of design decisions that is found repeatedly in practice,</li><li>has known properties that permit reuse, and</li><li>describes a class of architectures.</li></ul><h2 id="Architectural-Pattern"><a href="#Architectural-Pattern" class="headerlink" title="Architectural Pattern"></a>Architectural Pattern</h2><ul><li><strong>A context</strong>. A recuSrring, common situation in the world that gives rise to a problem.</li><li><strong>A problem</strong>. The problem, appropriately generalized, that arises in the given context. </li><li><strong>A solution</strong>. A successful architectural resolution to the problem, appropriately abstracted. The solution for a pattern is determined and described by:<ul><li>A set of element types (for example, data repositories, processes, and objects)</li><li>A set of interaction mechanisms or connectors (for example, method calls, events, or message bus)</li><li>A topological layout of the components</li><li>A set of semantic constraints covering topology, element behavior, and interaction mechanisms</li></ul></li></ul><h1 id="CH18-Architecture-Document"><a href="#CH18-Architecture-Document" class="headerlink" title="CH18. Architecture Document"></a>CH18. Architecture Document</h1><h2 id="View-consistency"><a href="#View-consistency" class="headerlink" title="View consistency"></a>View consistency</h2><h3 id="A-view-is-consistent-with-its-definition-when"><a href="#A-view-is-consistent-with-its-definition-when" class="headerlink" title="A view is consistent with its definition when:"></a>A view is consistent with its definition when:</h3><ul><li>All <strong>elements</strong> that fulfills the selection criterion is in the view</li><li>All <strong>relations</strong> that fulfills the selection criterion is in the view</li><li>That all <strong>properties</strong> that fulfills the selection criterion is in the view</li><li>THAT <strong>NO additional</strong> elements, relation or properties that does not meet the selection is in the view<h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4>All elements in the view must have a corresponding part in the view definition.<h4 id="Relation"><a href="#Relation" class="headerlink" title="Relation"></a>Relation</h4>Only relations that meet the selection criteria must be in the view.<h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4>Properties must have values in the view.<h4 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h4>Selection criteria can exclude certain elements or relations from the view.</li></ul><h2 id="4-1-view-model"><a href="#4-1-view-model" class="headerlink" title="4+1 view model"></a>4+1 view model</h2><p>Logical, Process, Development, Physical + Use Cases</p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTH </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 Tomcat开机自启动配置</title>
      <link href="/2019/01/13/Linux/CentOS/CentOS%207%20Tomcat%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/13/Linux/CentOS/CentOS%207%20Tomcat%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-Tomcat开机自启动配置"><a href="#CentOS-7-Tomcat开机自启动配置" class="headerlink" title="CentOS 7 Tomcat开机自启动配置"></a>CentOS 7 Tomcat开机自启动配置</h1><h2 id="配置开机运行"><a href="#配置开机运行" class="headerlink" title="配置开机运行"></a>配置开机运行</h2><h3 id="Tomcat增加启动参数"><a href="#Tomcat增加启动参数" class="headerlink" title="Tomcat增加启动参数"></a>Tomcat增加启动参数</h3><p>Tomcat需要增加一个pid文件，在 <code>$CATALINA_HOME/bin</code> 目录下面，增加 <code>setenv.sh</code> 配置，<code>catalina.sh</code>启动的时候会调用，同时配置Java内存参数。添加如下命令：<br><code>[root@vps bin]# vim setenv.sh</code></p><pre class="line-numbers language-shell"><code class="language-shell">#Tomcat startup pid#set Java runtime environment variable export JAVA_HOME=/usr/java/jdk1.8.0_191-amd64export PATH=$PATH:$JAVA_HOME/binexport CATALINA_HOME=/developer/apache-tomcat-7.0.91export CATALINA_BASE=/developer/apache-tomcat-7.0.91#add Tomcat pidCATALINA_PID="$CATALINA_BASE/tomcat.pid"#add Java optsJAVA_OPTS="-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSize=256m"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 配置开机运行时,需要再次添加 JAVA_HOME</p><h3 id="增加-tomcat-service"><a href="#增加-tomcat-service" class="headerlink" title="增加 tomcat.service"></a>增加 tomcat.service</h3><p>在/usr/lib/systemd/system目录下增加tomcat.service，目录必须是绝对目录，添加如下命令：<br><code>[root@vps bin]# vim /usr/lib/systemd/system/tomcat.service</code></p><pre class="line-numbers language-shell"><code class="language-shell"># conf service desc ,set do this after network started[Unit]Description=tomcat After=syslog.target network.target remote-fs.target nss-lookup.target# conf service pid, start,stop and restart[Service]Type=forkingPIDFile=/developer/apache-tomcat-7.0.91/tomcat.pidExecStart=/developer/apache-tomcat-7.0.91/bin/startup.shExecStop=/bin/kill -s QUIT $MAINPIDExecReload=/bin/kill -s HUP $MAINPIDPrivateTmp=true# conf user [Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>[unit]:</em> 配置了服务的描述，规定了在network启动之后执行，</p><p><em>[service]:</em> 配置服务的pid，服务的启动，停止，重启</p><p><em>[install]:</em> 配置了使用用户</p><h3 id="使用tomcat-service"><a href="#使用tomcat-service" class="headerlink" title="使用tomcat.service"></a>使用tomcat.service</h3><p>centos7使用systemctl替换了service命令，如需设置其他服务，替换此处的tomcat即可，如:<code>systemctl start vsftp.service</code></p><ul><li>启动服务<br>systemctl start tomcat.service</li><li>停止服务<br>systemctl stop tomcat.service</li><li>重启服务<br>systemctl restart tomcat.service</li><li>增加开机启动<br>systemctl enable tomcat.service</li><li>删除开机启动<br>systemctl disable tomcat.service</li></ul><p>因为配置pid，在启动的时候会在Tomcat的根目录下生产tomcat.pid文件,服务停止后删除。<br>同时Tomcat在启动时，执行start不会启动两个Tomcat，保证始终只有一个Tomcat服务在运行。多个Tomcat可以配置在多个目录下，互不影响。</p><h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>重启服务器后,通过wget访问，终端输出如下所示，配置tomcat开机自启动成功！</p><pre class="line-numbers language-shellell"><code class="language-shellell">[root@vps ~]# wget 35.234.8.23:8080--2019-01-12 16:02:41--  http://35.234.8.23:8080/Connecting to 35.234.8.23:8080... connected.HTTP request sent, awaiting response... 200 OKLength: 909 [text/html]Saving to: ‘index.html’100%[===========================================================>] 909         --.-K/s   in 0s      2019-01-12 16:02:41 (157 MB/s) - ‘index.html’ saved [909/909]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时,客户端浏览器也能成功访问。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>J2EE基础知识</title>
      <link href="/2019/01/04/Java/J2EE/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/01/04/Java/J2EE/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet总结"><a href="#Servlet总结" class="headerlink" title="Servlet总结"></a>Servlet总结</h2><p>在Java Web程序中，<strong>Servlet</strong>主要负责接收用户请求<strong>HttpServletRequest</strong>,在<strong>doGet()</strong>,<strong>doPost()中做相应的处理，并将回应HttpServletResponse</strong>反馈给用户。Servlet可以设置初始化参数，供Servlet内部使用。一个Servlet类只会有一个实例，在它初始化时调用<strong>init()方法</strong>，销毁时调用<strong>destroy()方法</strong>。<strong>Servlet需要在web.xml中配置</strong>（MyEclipse中创建Servlet会自动配置），<strong>一个Servlet可以设置多个URL访问</strong>。<strong>Servlet不是线程安全</strong>，因此要谨慎使用类变量。</p><h2 id="阐述Servlet和CGI的区别"><a href="#阐述Servlet和CGI的区别" class="headerlink" title="阐述Servlet和CGI的区别?"></a>阐述Servlet和CGI的区别?</h2><h3 id="CGI的不足之处"><a href="#CGI的不足之处" class="headerlink" title="CGI的不足之处:"></a>CGI的不足之处:</h3><p>1，需要为每个请求启动一个操作CGI程序的系统进程。如果请求频繁，这将会带来很大的开销。</p><p>2，需要为每个请求加载和运行一个CGI程序，这将带来很大的开销</p><p>3，需要重复编写处理网络协议的代码以及编码，这些工作都是非常耗时的。</p><h3 id="Servlet的优点"><a href="#Servlet的优点" class="headerlink" title="Servlet的优点:"></a>Servlet的优点:</h3><p>1，只需要启动一个操作系统进程以及加载一个JVM，大大降低了系统的开销</p><p>2，如果多个请求需要做同样处理的时候，这时候只需要加载一个类，这也大大降低了开销</p><p>3，所有动态加载的类可以实现对网络协议以及请求解码的共享，大大降低了工作量。</p><p>4，Servlet能直接和Web服务器交互，而普通的CGI程序不能。Servlet还能在各个程序之间共享数据，使数据库连接池之类的功能很容易实现。</p><p>补充：Sun Microsystems公司在1996年发布Servlet技术就是为了和CGI进行竞争，Servlet是一个特殊的Java程序，一个基于Java的Web应用通常包含一个或多个Servlet类。Servlet不能够自行创建并执行，它是在Servlet容器中运行的，容器将用户的请求传递给Servlet程序，并将Servlet的响应回传给用户。通常一个Servlet会关联一个或多个JSP页面。以前CGI经常因为性能开销上的问题被诟病，然而Fast CGI早就已经解决了CGI效率上的问题，所以面试的时候大可不必信口开河的诟病CGI，事实上有很多你熟悉的网站都使用了CGI技术。</p><p>参考：《javaweb整合开发王者归来》P7</p><h2 id="Servlet接口中有哪些方法及Servlet生命周期探秘"><a href="#Servlet接口中有哪些方法及Servlet生命周期探秘" class="headerlink" title="Servlet接口中有哪些方法及Servlet生命周期探秘"></a>Servlet接口中有哪些方法及Servlet生命周期探秘</h2><p>Servlet接口定义了5个方法，其中<strong>前三个方法与Servlet生命周期相关</strong>：</p><ul><li><strong>void init(ServletConfig config) throws ServletException</strong></li><li><strong>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</strong></li><li><strong>void destory()</strong></li><li>java.lang.String getServletInfo()</li><li>ServletConfig getServletConfig()</li></ul><p><strong>生命周期：</strong> <strong>Web容器加载Servlet并将其实例化后，Servlet生命周期开始</strong>，容器运行其<strong>init()方法</strong>进行Servlet的初始化；请求到达时调用Servlet的<strong>service()方法</strong>，service()方法会根据需要调用与请求对应的<strong>doGet或doPost</strong>等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的<strong>destroy()方法</strong>。<strong>init方法和destory方法只会执行一次，service方法客户端每次请求Servlet都会执行</strong>。Servlet中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入init方法中，销毁资源的代码放入destroy方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p><p>参考：《javaweb整合开发王者归来》P81</p><h2 id="get和post请求的区别"><a href="#get和post请求的区别" class="headerlink" title="get和post请求的区别"></a>get和post请求的区别</h2><blockquote><p>网上也有文章说：get和post请求实际上是没有区别，大家可以自行查询相关文章！我下面给出的只是一种常见的答案。</p></blockquote><p>①get请求用来从服务器上获得资源，而post是用来向服务器提交数据；</p><p>②get将表单中数据按照name=value的形式，添加到action 所指向的URL 后面，并且两者使用”?”连接，而各个变量之间使用”&amp;”连接；post是将表单中的数据放在HTTP协议的请求头或消息体中，传递到action所指向URL；</p><p>③get传输的数据要受到URL长度限制（1024字节即256个字符）；而post可以传输大量的数据，上传文件通常要使用post方式；</p><p>④使用get时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用get；对于敏感数据还是应用使用post；</p><p>⑤get使用MIME类型application/x-www-form-urlencoded的URL编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是”%20”。</p><p>补充：GET方式提交表单的典型应用是搜索引擎。GET方式就是被设计为查询用的。</p><p>还有另外一种回答。推荐大家看一下：</p><ul><li><a href="https://www.zhihu.com/question/28586791" target="_blank" rel="noopener">https://www.zhihu.com/question/28586791</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd</a></li></ul><h2 id="什么情况下调用doGet-和doPost"><a href="#什么情况下调用doGet-和doPost" class="headerlink" title="什么情况下调用doGet()和doPost()"></a>什么情况下调用doGet()和doPost()</h2><p>Form标签里的method的属性为get时调用doGet()，为post时调用doPost()。</p><h2 id="转发-Forward-和重定向-Redirect-的区别"><a href="#转发-Forward-和重定向-Redirect-的区别" class="headerlink" title="转发(Forward)和重定向(Redirect)的区别"></a>转发(Forward)和重定向(Redirect)的区别</h2><p><strong>转发是服务器行为，重定向是客户端行为。</strong></p><p><strong>转发（Forword）</strong> 通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到login_success.jsp页面。</p><pre><code>     request.getRequestDispatcher(&quot;login_success.jsp&quot;).forward(request, response);</code></pre><p><strong>重定向（Redirect）</strong> 是利用服务器返回的状态吗来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过HttpServletRequestResponse的setStatus(int status)方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。</p><ol><li><strong>从地址栏显示来说</strong></li></ol><p>forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址. redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</p><ol><li><strong>从数据共享来说</strong></li></ol><p>forward:转发页面和转发到的页面可以共享request里面的数据. redirect:不能共享数据.</p><ol><li><strong>从运用地方来说</strong></li></ol><p>forward:一般用于用户登陆的时候,根据角色转发到相应的模块. redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p><ol><li>从效率来说</li></ol><p>forward:高. redirect:低.</p><h2 id="自动刷新-Refresh"><a href="#自动刷新-Refresh" class="headerlink" title="自动刷新(Refresh)"></a>自动刷新(Refresh)</h2><p>自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet中通过HttpServletResponse对象设置Header属性实现自动刷新例如：</p><pre><code>Response.setHeader(&quot;Refresh&quot;,&quot;5;URL=http://localhost:8080/servlet/example.htm&quot;);</code></pre><p>其中5为时间，单位为秒。URL指定就是要跳转的页面（如果设置自己的路径，就会实现每过一秒自动刷新本页面一次）</p><h2 id="Servlet与线程安全"><a href="#Servlet与线程安全" class="headerlink" title="Servlet与线程安全"></a>Servlet与线程安全</h2><p><strong>Servlet不是线程安全的，多线程并发的读写会导致数据不同步的问题。</strong> 解决的办法是尽量不要定义name属性，而是要把name变量分别定义在doGet()和doPost()方法内。虽然使用synchronized(name){}语句块可以解决问题，但是会造成线程的等待，不是很科学的办法。 注意：多线程的并发的读写Servlet类属性会导致数据不同步。但是如果只是并发地读取属性而不写入，则不存在数据不同步的问题。因此Servlet里的只读属性最好定义为final类型的。</p><p>参考：《javaweb整合开发王者归来》P92</p><h2 id="JSP和Servlet是什么关系"><a href="#JSP和Servlet是什么关系" class="headerlink" title="JSP和Servlet是什么关系"></a>JSP和Servlet是什么关系</h2><p>其实这个问题在上面已经阐述过了，Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图（view）而Servlet适合充当控制器（controller）。</p><h2 id="JSP工作原理"><a href="#JSP工作原理" class="headerlink" title="JSP工作原理"></a>JSP工作原理</h2><p>JSP是一种Servlet，但是与HttpServlet的工作方式不太一样。HttpServlet是先由源代码编译为class文件后部署到服务器下，为先编译后部署。而JSP则是先部署后编译。JSP会在客户端第一次请求JSP文件时被编译为HttpJspPage类（接口Servlet的一个子类）。该类会被服务器临时存放在服务器工作目录里面。下面通过实例给大家介绍。 工程JspLoginDemo下有一个名为login.jsp的Jsp文件，把工程第一次部署到服务器上后访问这个Jsp文件，我们发现这个目录下多了下图这两个东东。 .class文件便是JSP对应的Servlet。编译完毕后再运行class文件来响应客户端请求。以后客户端访问login.jsp的时候，Tomcat将不再重新编译JSP文件，而是直接调用class文件来响应客户端请求。<img src="/2019/01/04/Java/J2EE/J2EE基础知识/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f332f33312f313632376265653037333037396132383f773d36373526683d32393226663d6a70656726733d313333353533.jpg" alt="JSP工作原理"> </p><p>由于JSP只会在客户端第一次请求的时候被编译 ，因此第一次请求JSP时会感觉比较慢，之后就会感觉快很多。如果把服务器保存的class文件删除，服务器也会重新编译JSP。</p><p>开发Web程序时经常需要修改JSP。Tomcat能够自动检测到JSP程序的改动。如果检测到JSP源代码发生了改动。Tomcat会在下次客户端请求JSP时重新编译JSP，而不需要重启Tomcat。这种自动检测功能是默认开启的，检测改动会消耗少量的时间，在部署Web应用的时候可以在web.xml中将它关掉。</p><p>参考：《javaweb整合开发王者归来》P97</p><h2 id="JSP有哪些内置对象、作用分别是什么"><a href="#JSP有哪些内置对象、作用分别是什么" class="headerlink" title="JSP有哪些内置对象、作用分别是什么"></a>JSP有哪些内置对象、作用分别是什么</h2><p><a href="http://blog.csdn.net/qq_34337272/article/details/64310849" target="_blank" rel="noopener">JSP内置对象 - CSDN博客</a></p><p>JSP有9个内置对象：</p><ul><li>request：封装客户端的请求，其中包含来自GET或POST请求的参数；</li><li>response：封装服务器对客户端的响应；</li><li>pageContext：通过该对象可以获取其他对象；</li><li>session：封装用户会话的对象；</li><li>application：封装服务器运行环境的对象；</li><li>out：输出服务器响应的输出流对象；</li><li>config：Web应用的配置对象；</li><li>page：JSP页面本身（相当于Java程序中的this）；</li><li>exception：封装页面抛出异常的对象。</li></ul><h2 id="Request对象的主要方法有哪些"><a href="#Request对象的主要方法有哪些" class="headerlink" title="Request对象的主要方法有哪些"></a>Request对象的主要方法有哪些</h2><ul><li>setAttribute(String name,Object)：设置名字为name的request 的参数值</li><li>getAttribute(String name)：返回由name指定的属性值</li><li>getAttributeNames()：返回request 对象所有属性的名字集合，结果是一个枚举的实例</li><li>getCookies()：返回客户端的所有 Cookie 对象，结果是一个Cookie 数组</li><li>getCharacterEncoding() ：返回请求中的字符编码方式 = getContentLength() ：返回请求的 Body的长度</li><li>getHeader(String name) ：获得HTTP协议定义的文件头信息</li><li>getHeaders(String name) ：返回指定名字的request Header 的所有值，结果是一个枚举的实例</li><li>getHeaderNames() ：返回所以request Header 的名字，结果是一个枚举的实例</li><li>getInputStream() ：返回请求的输入流，用于获得请求中的数据</li><li>getMethod() ：获得客户端向服务器端传送数据的方法</li><li>getParameter(String name) ：获得客户端传送给服务器端的有 name指定的参数值</li><li>getParameterNames() ：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例</li><li>getParameterValues(String name)：获得有name指定的参数的所有值</li><li>getProtocol()：获取客户端向服务器端传送数据所依据的协议名称</li><li>getQueryString() ：获得查询字符串</li><li>getRequestURI() ：获取发出请求字符串的客户端地址</li><li>getRemoteAddr()：获取客户端的 IP 地址</li><li>getRemoteHost() ：获取客户端的名字</li><li>getSession([Boolean create]) ：返回和请求相关 Session</li><li>getServerName() ：获取服务器的名字</li><li>getServletPath()：获取客户端所请求的脚本文件的路径</li><li>getServerPort()：获取服务器的端口号</li><li>removeAttribute(String name)：删除请求中的一个属性</li></ul><h2 id="request-getAttribute-和-request-getParameter-有何区别"><a href="#request-getAttribute-和-request-getParameter-有何区别" class="headerlink" title="request.getAttribute()和 request.getParameter()有何区别"></a>request.getAttribute()和 request.getParameter()有何区别</h2><p><strong>从获取方向来看：</strong></p><p>getParameter()是获取 POST/GET 传递的参数值；</p><p>getAttribute()是获取对象容器中的数据值；</p><p><strong>从用途来看：</strong></p><p>getParameter用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或url重定向传值时接收数据用。</p><p>getAttribute用于服务器端重定向时，即在 sevlet 中使用了 forward 函数,或 struts 中使用了 mapping.findForward。 getAttribute 只能收到程序用 setAttribute 传过来的值。</p><p>另外，可以用 setAttribute,getAttribute 发送接收对象.而 getParameter 显然只能传字符串。 setAttribute 是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另一个页面时，应用服务器会把这块内存拷贝另一个页面所对应的内存中。这样getAttribute就能取得你所设下的值，当然这种方法可以传对象。session也一样，只是对象在内存中的生命周期不一样而已。getParameter只是应用服务器在分析你送上来的 request页面的文本时，取得你设在表单或 url 重定向时的值。</p><p><strong>总结：</strong></p><p>getParameter 返回的是String,用于读取提交的表单中的值;（获取之后会根据实际需要转换为自己需要的相应类型，比如整型，日期类型啊等等）</p><p>getAttribute 返回的是Object，需进行转换,可用setAttribute 设置成任意对象，使用很灵活，可随时用</p><h2 id="include指令include的行为的区别"><a href="#include指令include的行为的区别" class="headerlink" title="include指令include的行为的区别"></a>include指令include的行为的区别</h2><p><strong>include指令：</strong> JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。 语法格式如下： &lt;%@ include file=”文件相对 url 地址” %&gt;</p><p>i<strong>nclude动作：</strong> jsp:include动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下： &lt;jsp:include page=”相对 URL 地址” flush=”true” /&gt;</p><h2 id="JSP九大内置对象，七大动作，三大指令"><a href="#JSP九大内置对象，七大动作，三大指令" class="headerlink" title="JSP九大内置对象，七大动作，三大指令"></a>JSP九大内置对象，七大动作，三大指令</h2><p><a href="http://blog.csdn.net/qq_34337272/article/details/64310849" target="_blank" rel="noopener">JSP九大内置对象，七大动作，三大指令总结</a></p><h2 id="讲解JSP中的四种作用域"><a href="#讲解JSP中的四种作用域" class="headerlink" title="讲解JSP中的四种作用域"></a>讲解JSP中的四种作用域</h2><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p><ul><li><strong>page</strong>代表与一个页面相关的对象和属性。</li><li><strong>request</strong>代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。</li><li><strong>session</strong>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</li><li><strong>application</strong>代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</li></ul><h2 id="如何实现JSP或Servlet的单线程模式"><a href="#如何实现JSP或Servlet的单线程模式" class="headerlink" title="如何实现JSP或Servlet的单线程模式"></a>如何实现JSP或Servlet的单线程模式</h2><p>对于JSP页面，可以通过page指令进行设置。 &lt;%@page isThreadSafe=”false”%&gt;</p><p>对于Servlet，可以让自定义的Servlet实现SingleThreadModel标识接口。</p><p>说明：如果将JSP或Servlet设置成单线程工作模式，会导致每个请求创建一个Servlet实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p><h2 id="实现会话跟踪的技术有哪些"><a href="#实现会话跟踪的技术有哪些" class="headerlink" title="实现会话跟踪的技术有哪些"></a>实现会话跟踪的技术有哪些</h2><ol><li><strong>使用Cookie</strong></li></ol><p>向客户端发送Cookie</p><pre><code>Cookie c =new Cookie(&quot;name&quot;,&quot;value&quot;); //创建Cookie c.setMaxAge(60*60*24); //设置最大时效，此处设置的最大时效为一天response.addCookie(c); //把Cookie放入到HTTP响应中</code></pre><p>从客户端读取Cookie</p><pre><code>String name =&quot;name&quot;; Cookie[]cookies =request.getCookies(); if(cookies !=null){    for(int i= 0;i&lt;cookies.length;i++){     Cookie cookie =cookies[i];     if(name.equals(cookis.getName()))     //something is here.     //you can get the value     cookie.getValue();    } }</code></pre><p><strong>优点:</strong> 数据可以持久保存，不需要服务器资源，简单，基于文本的Key-Value</p><p><strong>缺点:</strong> 大小受到限制，用户可以禁用Cookie功能，由于保存在本地，有一定的安全风险。</p><ol><li>URL 重写</li></ol><p>在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。</p><p><strong>优点：</strong> 在Cookie被禁用的时候依然可以使用</p><p><strong>缺点：</strong> 必须对网站的URL进行编码，所有页面必须动态生成，不能用预先记录下来的URL进行访问。</p><p>3.隐藏的表单域</p><pre><code>&lt;input type=&quot;hidden&quot; name =&quot;session&quot; value=&quot;...&quot;/&gt;</code></pre><p><strong>优点：</strong> Cookie被禁时可以使用</p><p><strong>缺点：</strong> 所有页面必须是表单提交之后的结果。</p><ol><li>HttpSession</li></ol><p>在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建 HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方 法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用 HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的 是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession 中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了 Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p><h2 id="Cookie和Session的的区别"><a href="#Cookie和Session的的区别" class="headerlink" title="Cookie和Session的的区别"></a>Cookie和Session的的区别</h2><ol><li>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</li><li>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</li><li>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li></ol><blockquote><p>参考：</p><p><a href="https://www.zhihu.com/question/19786827/answer/28752144" target="_blank" rel="noopener">https://www.zhihu.com/question/19786827/answer/28752144</a></p><p>《javaweb整合开发王者归来》P158 Cookie和Session的比较</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2019/01/03/Java/Java%E6%A0%B8%E5%BF%83/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/01/03/Java/Java%E6%A0%B8%E5%BF%83/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象和面向过程的区别"><a href="#1-面向对象和面向过程的区别" class="headerlink" title="1. 面向对象和面向过程的区别"></a>1. 面向对象和面向过程的区别</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p><strong>优点：</strong> 性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发，性能是最重要的因素。</p><p><strong>缺点：</strong> 没有面向对象易维护、易复用、易扩展</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p><strong>优点：</strong> 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p><strong>缺点：</strong> 性能比面向过程低</p><h2 id="2-Java-语言有哪些特点"><a href="#2-Java-语言有哪些特点" class="headerlink" title="2. Java 语言有哪些特点"></a>2. Java 语言有哪些特点</h2><ol><li>简单易学；</li><li>面向对象（封装，继承，多态）；</li><li>平台无关性（ Java 虚拟机实现平台无关性）；</li><li>可靠性；</li><li>安全性；</li><li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li><li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li><li>编译与解释并存；</li></ol><h2 id="3-什么是-JDK-什么是-JRE-什么是-JVM-三者之间的联系与区别"><a href="#3-什么是-JDK-什么是-JRE-什么是-JVM-三者之间的联系与区别" class="headerlink" title="3. 什么是 JDK 什么是 JRE 什么是 JVM 三者之间的联系与区别"></a>3. 什么是 JDK 什么是 JRE 什么是 JVM 三者之间的联系与区别</h2><p>这几个是Java中很基本很基本的东西，但是我相信一定还有很多人搞不清楚！为什么呢？因为我们大多数时候在使用现成的编译工具以及环境的时候，并没有去考虑这些东西。</p><p><strong>JDK:</strong> JDK（Java Development Kit）顾名思义它是给开发者提供的开发工具箱,是给程序开发者用的。它除了包括完整的JRE（Java Runtime Environment），Java运行环境，还包含了其他供开发者使用的工具包。</p><p><strong>JRE:</strong> 普通用户而只需要安装 JRE（Java Runtime Environment）来运行 Java 程序。而程序开发者必须安装JDK来编译、调试程序。</p><p><strong>JVM：</strong> 当我们运行一个程序时，JVM 负责将字节码转换为特定机器代码，JVM 提供了内存管理/垃圾回收和安全机制等。这种独立于硬件和操作系统，正是 java 程序可以一次编写多处执行的原因。</p><p><strong>区别与联系：</strong></p><ol><li>JDK 用于开发，JRE 用于运行java程序 ；</li><li>JDK 和 JRE 中都包含 JVM ；</li><li>JVM 是 java 编程语言的核心并且具有平台独立性。</li></ol><h2 id="4-什么是字节码-采用字节码的最大好处是什么"><a href="#4-什么是字节码-采用字节码的最大好处是什么" class="headerlink" title="4. 什么是字节码 采用字节码的最大好处是什么"></a>4. 什么是字节码 采用字节码的最大好处是什么</h2><h3 id="先看下-java-中的编译器和解释器："><a href="#先看下-java-中的编译器和解释器：" class="headerlink" title="先看下 java 中的编译器和解释器： 　　"></a>先看下 java 中的编译器和解释器： 　　</h3><p>Java 中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟的机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。</p><p>编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在 Java 中，这种供虚拟机理解的代码叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java 源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行。这也就是解释了 Java 的编译与解释并存的特点。</p><p>Java 源代码—-&gt;编译器—-&gt;jvm 可执行的 Java 字节码(即虚拟指令)—-&gt;jvm—-&gt;jvm 中解释器—–&gt;机器可执行的二进制机器码—-&gt;程序运行。</p><h3 id="采用字节码的好处："><a href="#采用字节码的好处：" class="headerlink" title="采用字节码的好处：　"></a>采用字节码的好处：　</h3><p><strong>Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</strong></p><blockquote><p>解释型语言：解释型语言，是在运行的时候将程序翻译成机器语言。解释型语言的程序不需要在运行前编译，在运行程序的时候才翻译，专门的解释器负责在每个语句执行的时候解释程序代码。这样解释型语言每执行一次就要翻译一次，效率比较低。——百度百科</p></blockquote><h2 id="5-Java和C-的区别"><a href="#5-Java和C-的区别" class="headerlink" title="5. Java和C++的区别"></a>5. Java和C++的区别</h2><p>我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过C++，也要记下来！</p><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li></ul><h2 id="6-什么是-Java-程序的主类-应用程序和小程序的主类有何不同"><a href="#6-什么是-Java-程序的主类-应用程序和小程序的主类有何不同" class="headerlink" title="6. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同"></a>6. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同</h2><p>一个程序中可以有多个类，但只能有一个类是主类。在 Java 应用程序中，这个主类是指包含 main（）方法的类。而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。</p><h2 id="7-Java-应用程序与小程序之间有那些差别"><a href="#7-Java-应用程序与小程序之间有那些差别" class="headerlink" title="7. Java 应用程序与小程序之间有那些差别"></a>7. Java 应用程序与小程序之间有那些差别</h2><p>简单说应用程序是从主线程启动(也就是 main() 方法)。applet 小程序没有main方法，主要是嵌在浏览器页面上运行(调用init()线程或者run()来启动)，嵌入浏览器这点跟 flash 的小游戏类似。</p><h2 id="8-字符型常量和字符串常量的区别"><a href="#8-字符型常量和字符串常量的区别" class="headerlink" title="8. 字符型常量和字符串常量的区别"></a>8. 字符型常量和字符串常量的区别</h2><ol><li>形式上: 字符常量是单引号引起的一个字符 字符串常量是双引号引起的若干个字符</li><li>含义上: 字符常量相当于一个整形值( ASCII 值),可以参加表达式运算 字符串常量代表一个地址值(该字符串在内存中存放位置)</li><li>占内存大小 字符常量只占2个字节 字符串常量占若干个字节(至少一个字符结束标志) (<strong>注意： char在Java中占两个字节</strong>)</li></ol><blockquote><p> <img src="/2019/01/03/Java/Java核心/Java基础知识/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d392d31352f38363733353531392e6a7067.jpg" alt="java编程思想第四版：2.2.2节"></p></blockquote><h2 id="9-构造器-Constructor-是否可被-override"><a href="#9-构造器-Constructor-是否可被-override" class="headerlink" title="9. 构造器 Constructor 是否可被 override"></a>9. 构造器 Constructor 是否可被 override</h2><p>在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承，所以 Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h2 id="10-重载和重写的区别"><a href="#10-重载和重写的区别" class="headerlink" title="10. 重载和重写的区别"></a>10. 重载和重写的区别</h2><p><strong>重载：</strong> 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。 　　</p><p><strong>重写：</strong> 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法。</p><h2 id="11-Java-面向对象编程三大特性-封装、继承、多态"><a href="#11-Java-面向对象编程三大特性-封装、继承、多态" class="headerlink" title="11. Java 面向对象编程三大特性:封装、继承、多态"></a>11. Java 面向对象编程三大特性:封装、继承、多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类非 private 的属性和方法。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h2 id="12-String-和-StringBuffer、StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#12-String-和-StringBuffer、StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="12. String 和 StringBuffer、StringBuilder 的区别是什么 String 为什么是不可变的"></a>12. String 和 StringBuffer、StringBuilder 的区别是什么 String 为什么是不可变的</h2><p><strong>可变性</strong> 　</p><p>简单的来说：String 类中使用 final 关键字字符数组保存字符串，<code>private　final　char　value[]</code>，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。</p><p>AbstractStringBuilder.java</p><pre><code>abstract class AbstractStringBuilder implements Appendable, CharSequence {    char[] value;    int count;    AbstractStringBuilder() {    }    AbstractStringBuilder(int capacity) {        value = new char[capacity];    }</code></pre><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。 　　</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据 = String</li><li>单线程操作字符串缓冲区下操作大量数据 = StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据 = StringBuffer</li></ol><h2 id="13-自动装箱与拆箱"><a href="#13-自动装箱与拆箱" class="headerlink" title="13. 自动装箱与拆箱"></a>13. 自动装箱与拆箱</h2><p><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</p><p><strong>拆箱</strong>：将包装类型转换为基本数据类型；</p><h2 id="14-在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#14-在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="14. 在一个静态方法内调用一个非静态成员为什么是非法的"></a>14. 在一个静态方法内调用一个非静态成员为什么是非法的</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h2 id="15-在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#15-在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="15. 在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>15. 在 Java 中定义一个不做事且没有参数的构造方法的作用</h2><p>　Java 程序在执行子类的构造方法之前，如果没有用 super() 来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super() 来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。 　</p><h2 id="16-import-java和javax有什么区别"><a href="#16-import-java和javax有什么区别" class="headerlink" title="16. import java和javax有什么区别"></a>16. import java和javax有什么区别</h2><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准API的一部分。</p><p>所以，实际上java和javax没有区别。这都是一个名字。</p><h2 id="17-接口和抽象类的区别是什么"><a href="#17-接口和抽象类的区别是什么" class="headerlink" title="17. 接口和抽象类的区别是什么"></a>17. 接口和抽象类的区别是什么</h2><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法</li><li>接口中的实例变量默认是 final 类型的，而抽象类中则不一定</li><li>一个类可以实现多个接口，但最多只能实现一个抽象类</li><li>一个类实现接口的话要实现接口的所有方法，而抽象类不一定</li><li>接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</li></ol><h2 id="18-成员变量与局部变量的区别有那些"><a href="#18-成员变量与局部变量的区别有那些" class="headerlink" title="18. 成员变量与局部变量的区别有那些"></a>18. 成员变量与局部变量的区别有那些</h2><ol><li>从语法形式上，看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰；</li><li>从变量在内存中的存储方式来看，成员变量是对象的一部分，而对象存在于堆内存，局部变量存在于栈内存</li><li>从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外被 final 修饰的成员变量也必须显示地赋值）；而局部变量则不会自动赋值。</li></ol><h2 id="19-创建一个对象用什么运算符？对象实体与对象引用有何不同？"><a href="#19-创建一个对象用什么运算符？对象实体与对象引用有何不同？" class="headerlink" title="19. 创建一个对象用什么运算符？对象实体与对象引用有何不同？"></a>19. 创建一个对象用什么运算符？对象实体与对象引用有何不同？</h2><p>new运算符，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向0个或1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）。</p><h2 id="20-什么是方法的返回值？返回值在类的方法里的作用是什么？"><a href="#20-什么是方法的返回值？返回值在类的方法里的作用是什么？" class="headerlink" title="20. 什么是方法的返回值？返回值在类的方法里的作用是什么？"></a>20. 什么是方法的返回值？返回值在类的方法里的作用是什么？</h2><p>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</p><h2 id="21-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"><a href="#21-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么" class="headerlink" title="21. 一个类的构造方法的作用是什么 若一个类没有声明构造方法，该程序能正确执行吗 为什么"></a>21. 一个类的构造方法的作用是什么 若一个类没有声明构造方法，该程序能正确执行吗 为什么</h2><p>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</p><h2 id="22-构造方法有哪些特性"><a href="#22-构造方法有哪些特性" class="headerlink" title="22. 构造方法有哪些特性"></a>22. 构造方法有哪些特性</h2><ol><li>名字与类名相同；</li><li>没有返回值，但不能用void声明构造函数；</li><li>生成类的对象时自动执行，无需调用。</li></ol><h2 id="23-静态方法和实例方法有何不同"><a href="#23-静态方法和实例方法有何不同" class="headerlink" title="23. 静态方法和实例方法有何不同"></a>23. 静态方法和实例方法有何不同</h2><ol><li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</li><li>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制.</li></ol><h2 id="24-对象的相等与指向他们的引用相等，两者有什么不同？"><a href="#24-对象的相等与指向他们的引用相等，两者有什么不同？" class="headerlink" title="24. 对象的相等与指向他们的引用相等，两者有什么不同？"></a>24. 对象的相等与指向他们的引用相等，两者有什么不同？</h2><p>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h2 id="25-在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？"><a href="#25-在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？" class="headerlink" title="25. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？"></a>25. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？</h2><p>帮助子类做初始化工作。</p><h2 id="26-与-equals-重要"><a href="#26-与-equals-重要" class="headerlink" title="26. == 与 equals(重要)"></a>26. == 与 equals(重要)</h2><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象。(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><pre><code>public class test1 {    public static void main(String[] args) {        String a = new String(&quot;ab&quot;); // a 为一个引用        String b = new String(&quot;ab&quot;); // b为另一个引用,对象的内容一样        String aa = &quot;ab&quot;; // 放在常量池中        String bb = &quot;ab&quot;; // 从常量池中查找        if (aa == bb) // true            System.out.println(&quot;aa==bb&quot;);        if (a == b) // false，非同一对象            System.out.println(&quot;a==b&quot;);        if (a.equals(b)) // true            System.out.println(&quot;aEQb&quot;);        if (42 == 42.0) { // true            System.out.println(&quot;true&quot;);        }    }}</code></pre><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h2 id="27-hashCode-与-equals（重要）"><a href="#27-hashCode-与-equals（重要）" class="headerlink" title="27. hashCode 与 equals（重要）"></a>27. hashCode 与 equals（重要）</h2><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><h3 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h3><p><strong>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong></p><p>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head fist java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><h3 id="hashCode（）与equals（）的相关规定"><a href="#hashCode（）与equals（）的相关规定" class="headerlink" title="hashCode（）与equals（）的相关规定"></a>hashCode（）与equals（）的相关规定</h3><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个对象分别调用equals方法都返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><h2 id="28-为什么Java中只有值传递"><a href="#28-为什么Java中只有值传递" class="headerlink" title="28. 为什么Java中只有值传递"></a>28. 为什么Java中只有值传递</h2><p><a href="https://github.com/Snailclimb/Java-Guide/blob/master/%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/%E6%9C%80%E6%9C%80%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E5%91%A8%EF%BC%882018-8-7%EF%BC%89.md" target="_blank" rel="noopener">为什么Java中只有值传递？</a></p><h2 id="29-简述线程，程序、进程的基本概念。以及他们之间关系是什么"><a href="#29-简述线程，程序、进程的基本概念。以及他们之间关系是什么" class="headerlink" title="29. 简述线程，程序、进程的基本概念。以及他们之间关系是什么"></a>29. 简述线程，程序、进程的基本概念。以及他们之间关系是什么</h2><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h2 id="30-线程有哪些基本状态？这些状态是如何定义的"><a href="#30-线程有哪些基本状态？这些状态是如何定义的" class="headerlink" title="30. 线程有哪些基本状态？这些状态是如何定义的?"></a>30. 线程有哪些基本状态？这些状态是如何定义的?</h2><ol><li><strong>新建(new)</strong>：新创建了一个线程对象。</li><li><strong>可运行(runnable)</strong>：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取cpu的使用权。</li><li><strong>运行(running)</strong>：可运行状态(runnable)的线程获得了cpu时间片（timeslice），执行程序代码。</li><li><strong>阻塞(block)</strong>：阻塞状态是指线程因为某种原因放弃了cpu使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有 机会再次获得cpu timeslice转到运行(running)状态。阻塞的情况分三种： (一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放 入等待队列(waitting queue)中。 (二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。 (三). 其他阻塞: 运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li><li><strong>死亡(dead)</strong>：线程run()、main()方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</li></ol><p><img src="/2019/01/03/Java/Java核心/Java基础知识/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f392f313635316631396437633465393361333f773d38373626683d34393226663d706e6726733d313238303932.jpg" alt=""></p><p>备注： 可以用早起坐地铁来比喻这个过程：</p><p>还没起床：sleeping</p><p>起床收拾好了，随时可以坐地铁出发：Runnable</p><p>等地铁来：Waiting</p><p>地铁来了，但要排队上地铁：I/O阻塞</p><p>上了地铁，发现暂时没座位：synchronized阻塞</p><p>地铁上找到座位：Running</p><p>到达目的地：Dead</p><h2 id="31-关于-final-关键字的一些总结"><a href="#31-关于-final-关键字的一些总结" class="headerlink" title="31 关于 final 关键字的一些总结"></a>31 关于 final 关键字的一些总结</h2><p>final关键字主要用在三个地方：变量、方法、类。</p><ol><li>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li><li>当用final修饰一个类时，表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final方法。</li><li>使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的Java版本已经不需要使用final方法进行这些优化了）。类中所有的private方法都隐式地指定为final。</li></ol><h2 id="32-Java-中的异常处理"><a href="#32-Java-中的异常处理" class="headerlink" title="32 Java 中的异常处理"></a>32 Java 中的异常处理</h2><h3 id="Java异常类层次结构图"><a href="#Java异常类层次结构图" class="headerlink" title="Java异常类层次结构图"></a>Java异常类层次结构图</h3><p><img src="/2019/01/03/Java/Java核心/Java基础知识/687474703a2f2f696d61676573323031352e636e626c6f67732e636f6d2f626c6f672f3634313030332f3230313630372f3634313030332d32303136303730363233323034343238302d3335353335343739302e706e67.png" alt="Java异常类层次结构图"></p><p>在 Java 中，所有的异常都有一个共同的祖先java.lang包中的 <strong>Throwable类</strong>。Throwable： 有两个重要的子类：<strong>Exception（异常）</strong> 和 <strong>Error（错误）</strong> ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p><strong>Error（错误）:是程序无法处理的错误</strong>，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p><p><strong>Exception（异常）:是程序本身可以处理的异常</strong>。Exception 类有一个重要的子类 <strong>RuntimeException</strong>。RuntimeException 异常由Java虚拟机抛出。<strong>NullPointerException</strong>（要访问的变量没有引用任何对象时，抛出该异常）、<strong>ArithmeticException</strong>（算术运算异常，一个整数除以0时，抛出该异常）和 <strong>ArrayIndexOutOfBoundsException</strong> （下标越界异常）。</p><p><strong>注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</strong></p><h3 id="Throwable类常用方法"><a href="#Throwable类常用方法" class="headerlink" title="Throwable类常用方法"></a>Throwable类常用方法</h3><ul><li><strong>public string getMessage()</strong>:返回异常发生时的详细信息</li><li><strong>public string toString()</strong>:返回异常发生时的简要描述</li><li><strong>public string getLocalizedMessage()</strong>:返回异常对象的本地化信息。使用Throwable的子类覆盖这个方法，可以声称本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同</li><li><strong>public void printStackTrace()</strong>:在控制台上打印Throwable对象封装的异常信息</li></ul><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h3><ul><li>try 块：用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。</li><li>catch 块：用于处理try捕获到的异常。</li><li>finally 块：无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。</li></ul><p><strong>在以下4种特殊情况下，finally块不会被执行：</strong></p><ol><li>在finally语句块中发生了异常。</li><li>在前面的代码中用了System.exit()退出程序。</li><li>程序所在的线程死亡。</li><li>关闭CPU。</li></ol><h2 id="33-Java序列话中如果有些字段不想进行序列化-怎么办"><a href="#33-Java序列话中如果有些字段不想进行序列化-怎么办" class="headerlink" title="33 Java序列话中如果有些字段不想进行序列化 怎么办"></a>33 Java序列话中如果有些字段不想进行序列化 怎么办</h2><p>对于不想进行序列化的变量，使用transient关键字修饰。</p><p>transient关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。transient只能修饰变量，不能修饰类和方法。</p><h2 id="34-获取用键盘输入常用的的两种方法"><a href="#34-获取用键盘输入常用的的两种方法" class="headerlink" title="34 获取用键盘输入常用的的两种方法"></a>34 获取用键盘输入常用的的两种方法</h2><p>方法1：通过 Scanner</p><pre><code>Scanner input = new Scanner(System.in);String s  = input.nextLine();input.close();</code></pre><p>方法2：通过 BufferedReader</p><pre><code>BufferedReader input = new BufferedReader(new InputStreamReader(System.in)); String s = input.readLine(); </code></pre><h1 id="Java基础学习书籍推荐"><a href="#Java基础学习书籍推荐" class="headerlink" title="Java基础学习书籍推荐"></a>Java基础学习书籍推荐</h1><p><strong>《Head First Java.第二版》：</strong> 可以说是我的 Java 启蒙书籍了，特别适合新手读当然也适合我们用来温故Java知识点。</p><p><strong>《Java核心技术卷1+卷2》：</strong> 很棒的两本书，建议有点 Java 基础之后再读，介绍的还是比较深入的，非常推荐。</p><p><strong>《Java编程思想(第4版)》：</strong> 这本书要常读，初学者可以快速概览，中等程序员可以深入看看 Java，老鸟还可以用之回顾 Java 的体系。这本书之所以厉害，因为它在无形中整合了设计模式，这本书之所以难读，也恰恰在于他对设计模式的整合是无形的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
